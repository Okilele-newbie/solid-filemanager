{"version":3,"sources":["../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/n3/lib sync /^/N3.*$","Actions/actionTypes.ts","config.ts","Reducers/accountReducer.ts","Reducers/dialogsReducer.ts","Reducers/itemsReducer.ts","Reducers/metasReducer.ts","Reducers/pathReducer.ts","Reducers/uploadReducer.ts","Reducers/reducer.ts","Reducers/currentBlobReducer.ts","Reducers/errorReducer.ts","Reducers/loadingReducer.ts","serviceWorker.ts","Api/FileUtils.ts","Api/Item.ts","Api/folderUtils.ts","Api/Api.ts","Api/ApiCache.ts","Api/CouchDb.ts","Api/MetaUtils.ts","Api/ApiHandler.ts","Actions/Actions.ts","Components/TreeView/TreeViewItem.tsx","Components/Loader/Loader.tsx","Components/TreeView/TreeView.tsx","Components/TagList/TagList.tsx","Components/File/File.tsx","Components/FileList/FileListEmptyMessage.tsx","Components/FileList/FileList.tsx","Components/Meta/MetaRow.tsx","Components/Meta/MetaListEmptyMessage.tsx","Components/Meta/MetaList.tsx","TreeAndTagList.tsx","Components/ContextMenu/ContextMenuActions/CreateFolderAction.tsx","Components/ContextMenu/ContextMenuActions/CreateFileAction.tsx","Components/ContextMenu/ContextMenuActions/UploadFileAction.tsx","Components/ContextMenu/ContextMenuActions/ChooseLocationAction.tsx","Components/Navbar/ThreeDotsMenu.tsx","Components/Breadcrumb/BreadcrumbText.tsx","Components/Navbar/Navbar.tsx","Components/ContextMenu/ContextMenuActions/OpenAction.tsx","Components/ContextMenu/ContextMenuActions/RemoveAction.tsx","Components/ContextMenu/ContextMenuActions/MoveAction.tsx","Components/ContextMenu/ContextMenuActions/CopyAction.tsx","Components/ContextMenu/ContextMenuActions/EditAction.tsx","Components/ContextMenu/ContextMenuActions/EditTagsAction.tsx","Components/ContextMenu/ContextMenuActions/RenameAction.tsx","Components/ContextMenu/ContextMenuActions/ZipAction.tsx","Components/ContextMenu/ContextMenuActions/ExtractAction.tsx","Components/ContextMenu/ContextMenuActions/DownloadAction.tsx","Components/ContextMenu/ContextMenuActions/OpenInNewTabAction.tsx","Components/ContextMenu/ContextMenu.tsx","Components/HistoryHandler/HistoryHandler.tsx","Components/Dialogs/Menu/Menu.tsx","Components/Dialogs/Content/Content.tsx","Components/Dialogs/Media/Media.tsx","Components/Dialogs/Edit/Edit.tsx","Api/jsonp.js","Components/Dialogs/EditTags/AutocompleteTag.tsx","Components/Dialogs/EditTags/EditTags.tsx","Components/Dialogs/CreateFolder/CreateFolder.tsx","Components/Dialogs/CreateFile/CreateFile.tsx","Components/Dialogs/Rename/Rename.tsx","Components/File/FileSublist/FileSublist.tsx","Components/FileList/FileListSublist/FileListSublist.tsx","Components/Dialogs/ChooseLocation/ChooseLocation.tsx","Components/Dialogs/Move/Move.tsx","Components/Dialogs/Copy/Copy.tsx","Components/FileUploader/UploadFileList.tsx","Components/FileUploader/FileUploader.tsx","Components/Dialogs/UploadFile/UploadFile.tsx","Components/Dialogs/Dialogs.tsx","Components/Notification/DynamicSnackbar.tsx","App.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","map","webpackContext","webpackContextResolve","__webpack_require__","o","Object","DIALOGS","host","getHost","setHost","newHost","endsWith","slice","initialState","loggedIn","webId","initialVisibleDialogs","values","name","reduce","prev","cur","initialContextMenuState","open","x","y","initialItemsState","inCurFolder","filter","selected","removeItem","items","item","selectedItem","equals","addItem","initialMetasState","initialPath","initialUploadState","fileList","progress","rootReducer","combineReducers","account","state","action","type","config","value","blob","URL","createObjectURL","revokeObjectURL","contextMenu","visibleDialogs","errorMessage","includes","loading","path","upload","metas","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","FileClient","require","FileUtils","popupLogin","serverId","split","err","ms","Promise","setTimeout","this","webIdAndHost","baseUrl","sleep","solidAuth","session","fileName","getWebIdAndHost","infos","res","readFolder","content","decodeURI","folders","forEach","f","alert","url","readFile","body","createFile","newContent","updateFile","Item","size","_name","_path","_url","_size","getPathFromUrl","pop","length","every","val","index","getHumanFileSize","FileItem","patterns","image","test","media","editable","extractable","video","FolderItem","byteString","bytes","parseInt","Math","pow","toFixed","urlString","pathname","getFolderItems","graph","subj","files","each","rdflib","undefined","subjectName","subjectNode","nsSize","any","getSizeByGraph","folderNode","isAnInstanceOfClass","types","some","isFolder","push","text2graph","text","a","contentType","guessFileType","reject","ext","replace","fetchFile","buildFileUrl","assertSuccessfulResponse","fetchFolder","folderName","buildFolderUrl","headers","response","folderRDF","folderUtils","folderItems","destination","itemNames","copyItems","removeItems","oldName","newName","copyFile","oldFolderName","newFolderName","copyFolder","removeFolderRecursively","promises","all","Response","originPath","originName","destinationPath","destinationName","fileResponse","createFolder","Array","from","file","folderExists","createItem","Blob","itemName","link","request","method","slug","status","removeFolderContents","folderPath","ok","ApiCache","_data","itemList","hasOwnProperty","paths","contains","CouchDb","xhr","createCORSRequest","couchDbBaseUrl","onload","responseText","onerror","send","executeQueryonCouch","json","JSON","parse","usedTag","rows","row","tag","tagType","key","published","statusText","meta","createIdFromMeta","oldMeta","_rev","writeMeta","stringify","XMLHttpRequest","setRequestHeader","reg","RegExp","hostName","pathName","couchDbServerUrl","couchDbDatabaseName","onServerColor","MetaUtils","SolidFileClientUtils","allMetas","allLocalMetas","fileClientReadFileAsString","fileClientcreateFile","getTagIndexFullPath","selectedTags","getAllMetas","filteredMetas","testTag","filterByMetaTag","havingTagMeta","existingFilteredMeta","lodash","find","tags","havingTagMetaCopy","creationDate","Date","getUrl","mimeType","currentMeta","existingMeta","el","currentItem","fileClientupdateFile","metaCopy","updateMeta","currentLocalUsedTags","getLocalUsedTags","foundTags","usedTags","uniqWith","first","second","sortBy","getItemsByViewGroupedTags","centralTags","centralTag","localTags","localTag","markCentralFromLocal","cache","handleFetchError","detailedErrorMessage","group","displayMessages","displayErrorMessage","message","stack","groupEnd","fixPath","getItemList","get","API","add","getFileBlob","filename","renameFile","newFileName","remove","renameFolder","trim","moveItems","filenames","uploadFiles","getAsZip","zip","JSZip","addItemsToZip","zipFolder","folder","binary","extractZipArchive","loadAsync","uploadExtractedZipArchive","curFolder","getItemsInZipFolder","relativePath","getItemNameFromPath","getParentPathFromPath","dir","async","substr","lastIndexOf","solidLogin","dispatch","getState","displayLoading","solidPopupLogin","updateLoginStatus","r","setErrorMessage","String","finally","stopLoading","setWebId","setLoggedIn","setLoggedOut","resetWebId","popupUri","clearCache","clear","APIHandler","closeDialog","EDITTAGS","getMetaList","getLocalMetaList","setMetas","displayCurrentItemList","resetSelectedItems","join","setItems","refreshItemList","promptDownload","msSaveOrOpenBlob","document","createElement","href","download","appendChild","click","removeChild","getFileContent","resetFileContent","setFileContent","loadAndEditFile","openDialog","EDIT","loadAndDisplayFile","CONTENT","displaySelectedMediaFile","MEDIA","targetPath","COPY","setSelectedItemsFromLastTo","lastFile","selectedItems","lastPreviouslySelected","lastPreviouslySelectedIndex","indexOf","lastSelectedIndex","isInRange","num","start","end","toAdd","selectItems","resetFileUploader","setFileUploadProgress","UPLOAD_FILE","resetFileUploadList","enterFolder","setPath","resetFilter","enterFolderByItem","rightClickOnFile","selectItem","makeActionCreator","moveFolderUpwards","resetPath","resetItems","toggleSelectedItem","filterItems","setFileUploadList","openContextMenu","closeContextMenu","MyListItem","styled","ListItem","padding","MyListItemText","ListItemText","fontSize","TreeViewItem","colNumber","Blank","width","height","viewBox","xmlns","xmlnsXlink","d","fill","props","handleClick","itemHandleClick","button","onClick","bind","blanks","expColl","it","React","Component","connect","ownProps","withStyles","theme","createStyles","margin","spacing","unit","container","justify","className","classes","color","MyList","List","flexShrink","TreeView","updateFolder","setState","fileClientReadFolder","forceUpdate","i","known","j","initFolders","subheader","printRows","component","in","timeout","unmountOnExit","minWidth","MyCheckbox","Checkbox","TagList","showLocalOrCentral","PrintList","itemColor","role","dense","onChange","checked","elt","style","refreshView","getCentralUsedTags","metaTag","splice","handleSubmit","File","isSelected","handleClickOnName","handleClickOnFolder","handleDoubleClick","handleContextMenu","iconStyle","backgroundColor","blue","realSize","getDisplaySize","data-selected","primary","getDisplayName","secondary","onDoubleClick","onContextMenu","absolute","isEditable","isImage","isMedia","event","preventDefault","stopPropagation","nativeEvent","MouseEvent","clientX","clientY","TouchEvent","touches","pageX","pageY","warn","shiftKey","ctrlKey","FileListEmptyMessage","FileList","isLoading","itemComponents","filterMatch","toLocaleLowerCase","MetaRow","tagList","concat","MetaListEmptyMessage","MetaList","TreeAndTagList","showTreeOrTag","CREATE_FOLDER","callback","handleClose","variant","CREATE_FILE","CHOOSE_LOCATION","ThreeDotsMenu","anchorEl","currentTarget","marginLeft","aria-label","aria-owns","aria-haspopup","onClose","BreadcrumbText","handleClickPath","rootTitle","handleGoBack","canGoBack","separator","rootPath","data-index","lastPath","directories","display","breakpoints","up","root","marginBottom","grow","flexGrow","menuButton","marginRight","title","search","position","borderRadius","shape","fade","palette","common","white","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","handleChange","moveUpwards","n","moveFolderUpwardsAndRefresh","handleRefresh","noWrap","placeholder","input","MOVE","RENAME","archiveName","generateAsync","downloadName","ContextMenu","acts","anchorReference","anchorPosition","top","left","transformOrigin","vertical","horizontal","PaperProps","EditAction","RenameAction","getActionsForMultipleItems","getActionsForItem","getActionsForFile","getActionsForFolder","actions","isExtractable","HistoryHandler","history","states","stateIndex","createBrowserHistory","listen","handlePop","handleReplace","handlePush","updateBrowserHistory","prevState","locationsEqual","encodeURI","newState","getLocationObjectFromUrl","origin","URLSearchParams","FormDialog","isLoggedIn","encodedUrl","targetForm","form","querySelector","handleLogin","handleLogout","aria-labelledby","fullWidth","maxWidth","gutterBottom","autoFocus","label","lastBlobUrl","blobUrl","src","alt","isVideo","iconUrl","textField","createRef","fetch","t","current","textArea","minHeight","defaultValue","ref","handleSave","updateTextFile","jsonp","callback2","callbackName","round","random","data","script","MultiValueLabel","styles","tagHandleClick","MyFormControlLabel","FormControlLabel","MyRadio","Radio","AutocompleteTag","creatableSelect","source","lastStr","handleRadioChange","suggests","focusCreatableSelect","focus","setSaveTextParameter","saveTextLevel","setSaveText","str","retVal","callback1","searchedString","autoComplete","CallJsonP","suggestion","target","control","labelPlacement","components","options","isMulti","handleChangeTagList","onInputChange","selectAllToCentral","saveText","itemUrl","getOrInitMeta","cleanedTags","extension","spl","fullScreen","overflow","native","inputRef","createNewFolder","previousName","FileSublist","FileListSublist","handleOpenFolder","initialHost","prevProps","updateItems","ApiHandler","actionName","disabled","move","targetLocation","ChooseLocation","copy","UploadFileList","list","FileUploader","inputElement","handleReset","handleSelectedFiles","inputfile","inputreset","htmlFor","multiple","canUpload","Dialogs","DynamicSnackbar","errorMsg","notificationDuration","anchorOrigin","autoHideDuration","ContentProps","close","createMuiTheme","typography","useNextVariants","App","init","handleHideContextMenu","Navbar","element","tagName","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","getElementById","process","addEventListener","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.428caae1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 597;","var map = {\n\t\"./N3Lexer\": 206,\n\t\"./N3Lexer.js\": 206,\n\t\"./N3Parser\": 207,\n\t\"./N3Parser.js\": 207,\n\t\"./N3Store\": 314,\n\t\"./N3Store.js\": 314,\n\t\"./N3StreamParser\": 315,\n\t\"./N3StreamParser.js\": 315,\n\t\"./N3StreamWriter\": 316,\n\t\"./N3StreamWriter.js\": 316,\n\t\"./N3Util\": 208,\n\t\"./N3Util.js\": 208,\n\t\"./N3Writer\": 209,\n\t\"./N3Writer.js\": 209\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 620;","//import { Item } from \"../Api/Item\";\r\n\r\nexport interface Action<V> {\r\n    type: string;\r\n    value: V;\r\n};\r\n\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nexport const ENTER_FOLDER = 'ENTER_FOLDER';\r\nexport const MOVE_FOLDER_UPWARDS = 'MOVE_FOLDER_UPWARDS';\r\nexport const SET_PATH = 'SET_PATH';\r\n\r\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\r\nexport const SET_LOGGED_OUT = 'SET_LOGGED_OUT';\r\nexport const RESET_HOST = 'RESET_HOST';\r\nexport const SET_HOST = 'SET_HOST'; // TODO: Consider renaming to BASE_URL\r\nexport const RESET_WEB_ID = 'RESET_WEB_ID';\r\nexport const SET_WEB_ID = 'SET_WEB_ID';\r\n\r\nexport const SET_ITEMS = 'SET_ITEMS';\r\nexport const SET_METAS = 'SET_METAS';\r\n\r\nexport const SELECT_ITEMS = 'SELECT_ITEMS';\r\nexport const TOGGLE_SELECTED_ITEM = 'TOGGLE_SELECTED_ITEM';\r\nexport const DESELECT_ITEM = 'DESELECT_ITEM';\r\n\r\nexport const FILTER_ITEMS = 'FILTER_ITEMS';\r\nexport const RESET_FILTER = 'REMOVE_FILTER';\r\n\r\nexport const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const STOP_LOADING = 'STOP_LOADING';\r\n\r\nexport const RESET_LOADED_BLOB = 'RESET_LOADED_BLOB';\r\nexport const SET_LOADED_BLOB = 'SET_LOADED_BLOB';\r\n\r\nexport const SET_UPLOAD_FILE_PROGRESS = 'SET_UPLOAD_FILE_PROGRESS';\r\nexport const SET_UPLOAD_FILE_LIST = 'SET_UPLOAD_FILE_LIST';\r\n\r\nexport const OPEN_CONTEXT_MENU = 'OPEN_CONTEXT_MENU';\r\nexport const CLOSE_CONTEXT_MENU = 'CLOSE_CONTEXT_MENU';\r\n\r\nexport const OPEN_DIALOG = 'OPEN_DIALOG';\r\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';\r\n\r\nexport enum DIALOGS {\r\n    CHOOSE_LOCATION = 'CHOOSE_LOCATION',\r\n    CREATE_FOLDER = 'CREATE_FOLDER',\r\n    CREATE_FILE = 'CREATE_FILE',\r\n    UPLOAD_FILE = 'UPLOAD_FILE',\r\n    RENAME = 'RENAME',\r\n    EDITTAGS = 'EDITTAGS',\r\n    MOVE = 'MOVE',\r\n    COPY = 'COPY',\r\n    CONTENT = 'CONTENT',\r\n    MEDIA = 'MEDIA',\r\n    EDIT = 'EDIT',\r\n    CONTEXT_MENU = 'CONTEXT_MENU',\r\n};","let host: string | null = null;\r\n\r\nexport default {\r\n    getHost() {\r\n        return host;\r\n    },\r\n    setHost(newHost: string) {\r\n        host = newHost;\r\n        while (host.endsWith('/'))\r\n            host = host.slice(0, -1);\r\n    }\r\n};\r\n","import { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_WEB_ID, RESET_HOST, RESET_WEB_ID } from \"../Actions/actionTypes\";\r\nimport config from \"../config\";\r\n\r\ninterface AccountState {\r\n    loggedIn: boolean;\r\n    host: string | null;\r\n    webId: string | null;\r\n}\r\n\r\nconst initialState: AccountState = {\r\n    loggedIn: false,\r\n    host: null,\r\n    webId: null\r\n};\r\n\r\nexport const account = (state = initialState, action: Action<string|null|void>): AccountState => {\r\n    switch(action.type) {\r\n        case SET_LOGGED_IN:\r\n            return { ...state, loggedIn: true };\r\n        case SET_LOGGED_OUT:\r\n            return { ...state, loggedIn: false };\r\n        case SET_HOST:\r\n            config.setHost(action.value as string); // TODO\r\n            return { ...state, host: action.value as string };\r\n        case RESET_HOST:\r\n            return { ...state, host: null };\r\n        case SET_WEB_ID:\r\n            return { ...state, webId: action.value as string|null };\r\n        case RESET_WEB_ID:\r\n            return { ...state, webId: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { DIALOGS, Action, OPEN_DIALOG, CLOSE_DIALOG, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from \"../Actions/actionTypes\";\r\n\r\n// Initialize state with values of DIALOGS as keys and false (closed) as value\r\nconst initialVisibleDialogs: Record<DIALOGS, boolean> = Object.values(DIALOGS)\r\n    .map((name: DIALOGS) => ({ [name]: false } as Record<DIALOGS, boolean>))\r\n    .reduce((prev, cur) => ({ ...prev, ...cur })) as Record<DIALOGS, boolean>;\r\n\r\nexport const visibleDialogs = (state = initialVisibleDialogs, action: Action<DIALOGS>): typeof initialVisibleDialogs => {\r\n    switch (action.type) {\r\n        case OPEN_DIALOG:\r\n            return { ...state, [action.value]: true };\r\n        case CLOSE_DIALOG:\r\n            return { ...state, [action.value]: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialContextMenuState = {\r\n    open: false,\r\n    x: 0,\r\n    y: 0,\r\n};\r\n\r\nexport const contextMenu = (state = initialContextMenuState, action: Action<any>): typeof initialContextMenuState => {\r\n    switch (action.type) {\r\n        case OPEN_CONTEXT_MENU:\r\n            return {\r\n                ...state,\r\n                open: true,\r\n                x: action.value.x,\r\n                y: action.value.y\r\n            };\r\n        case CLOSE_CONTEXT_MENU:\r\n            return { ...state, open: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Item } from \"../Api/Item\";\r\n\r\nimport { Action, SET_ITEMS, SELECT_ITEMS, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, TOGGLE_SELECTED_ITEM } from \"../Actions/actionTypes\";\r\n\r\ninterface ItemsState {\r\n    inCurFolder: Item[];\r\n    filter: string;\r\n    selected: Item[];\r\n}\r\n\r\nconst initialItemsState: ItemsState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const items = (state = initialItemsState, action: Action<any>): ItemsState => {\r\n    switch (action.type) {\r\n        case SET_ITEMS:\r\n            return { ...state, inCurFolder: action.value as Item[] };\r\n        case SELECT_ITEMS:\r\n            return { ...state, selected: action.value as Item[] };\r\n        case DESELECT_ITEM:\r\n            return { ...state, selected: removeItem(state.selected, action.value as Item) };\r\n        case TOGGLE_SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                selected: state.selected.includes(action.value) ?\r\n                    removeItem(state.selected, action.value as Item)\r\n                    : addItem(state.selected, action.value as Item)\r\n            };\r\n        case FILTER_ITEMS:\r\n            return { ...state, filter: action.value as string };\r\n        case RESET_FILTER:\r\n            return { ...state, filter: '' };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst removeItem = (items: Item[], item: Item) => {\r\n    return items.filter(selectedItem => !selectedItem.equals(item));\r\n}\r\n\r\nconst addItem = (items: Item[], item: Item) => {\r\n    return [...items, item];\r\n}\r\n","import { Meta } from \"../Api/MetaUtils\";\r\nimport { Action, SET_METAS } from \"../Actions/actionTypes\";\r\n\r\ninterface MetasState {\r\n    inCurFolder: Meta[];\r\n    filter: string;\r\n    selected: Meta[];\r\n}\r\n\r\nconst initialMetasState: MetasState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const metas = (state = initialMetasState, action: Action<any>): MetasState => {\r\n    switch (action.type) {\r\n        case SET_METAS:\r\n            return { ...state, inCurFolder: action.value as Meta[] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, ENTER_FOLDER, SET_PATH, MOVE_FOLDER_UPWARDS } from \"../Actions/actionTypes\";\r\n\r\n\r\nconst initialPath: string[] = [];\r\n\r\nexport const path = (state = initialPath, action: Action<any>): typeof initialPath => {\r\n    switch(action.type) {\r\n        case ENTER_FOLDER:\r\n            return [...state, action.value];\r\n        case MOVE_FOLDER_UPWARDS:\r\n            return action.value > 0 ?\r\n                state.slice(0, -action.value)\r\n                : state;\r\n        case SET_PATH:\r\n            return [...action.value];\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS } from \"../Actions/actionTypes\";\r\n\r\nconst initialUploadState = {\r\n    fileList: null as FileList|null,\r\n    progress: 0,\r\n};\r\n\r\nexport const upload = (state = initialUploadState, action: Action<FileList|number>): typeof initialUploadState => {\r\n    switch(action.type) {\r\n        case SET_UPLOAD_FILE_LIST:\r\n            return { ...state, fileList: action.value as FileList };\r\n        case SET_UPLOAD_FILE_PROGRESS:\r\n            return { ...state, progress: action.value as number };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { account } from './accountReducer';\r\nimport { blob } from './currentBlobReducer';\r\nimport { visibleDialogs, contextMenu } from './dialogsReducer';\r\nimport { errorMessage } from './errorReducer';\r\nimport { items } from './itemsReducer';\r\nimport { metas } from './metasReducer';\r\nimport { loading } from './loadingReducer';\r\nimport { path } from './pathReducer';\r\nimport { upload } from './uploadReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    account,\r\n    blob,\r\n    contextMenu,\r\n    visibleDialogs,\r\n    errorMessage,\r\n    items,\r\n    loading,\r\n    path,\r\n    upload,\r\n    metas\r\n});\r\n\r\nexport default rootReducer;\r\nexport type AppState = ReturnType<typeof rootReducer>;","import { Action, SET_LOADED_BLOB, RESET_LOADED_BLOB } from \"../Actions/actionTypes\";\r\n\r\nexport const blob = (state: string|null = null, action: Action<Blob>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_LOADED_BLOB:\r\n            return URL.createObjectURL(action.value);\r\n        case RESET_LOADED_BLOB:\r\n            if (state !== null)\r\n                URL.revokeObjectURL(state);\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_ERROR_MESSAGE } from \"../Actions/actionTypes\";\r\n\r\nexport const errorMessage = (state = '', action: Action<string>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_ERROR_MESSAGE:\r\n            return action.value;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, DISPLAY_LOADING, STOP_LOADING } from \"../Actions/actionTypes\";\r\n\r\nconst initialLoadingState: boolean = false;\r\n\r\nexport const loading = (state = initialLoadingState, action: Action<void>): boolean => {\r\n    switch(action.type) {\r\n        case DISPLAY_LOADING:\r\n            return true;\r\n        case STOP_LOADING:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: ServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport interface ServiceWorkerConfig {\r\n  onUpdate(registration: ServiceWorkerRegistration): void;\r\n  onSuccess(registration: ServiceWorkerRegistration): void;\r\n}","import config from '../config';\r\nimport * as solidAuth from 'solid-auth-client';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    known?: boolean;//details of sub folders are read (in treeview)\r\n}\r\n\r\nexport default class FileUtils {\r\n\r\n    static serverId: string = ''\r\n    static webId: string = ''\r\n\r\n    //Interface method for FileClient.popupLogin\r\n    static async fileClientPopupLogin() {\r\n        await FileClient.popupLogin()\r\n            .then(\r\n                (webId: string) => {\r\n                    const serverId = webId.split(\"/card\")[0];\r\n                    this.serverId = serverId\r\n                    this.webId = webId\r\n                    console.log(`Logged in as ${webId} on ${serverId}.`);\r\n                }\r\n                , (err: any) => console.log('Error while loging' + err)\r\n            )\r\n    }\r\n\r\n    static sleep(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    static webIdAndHost = {webId: '', baseUrl: ''}\r\n    static async getWebIdAndHost() {\r\n        if (this.webIdAndHost.webId === '') {\r\n            let baseUrl = config.getHost()\r\n            while (baseUrl === null) {\r\n                await this.sleep(1000)\r\n                baseUrl = config.getHost()\r\n            }\r\n            const session = await solidAuth.currentSession()\r\n            let webId = session ? session.webId : ''\r\n            this.webIdAndHost = { webId: webId, baseUrl: baseUrl }\r\n        }\r\n        return this.webIdAndHost\r\n    }\r\n\r\n    static async fileClientReadFolder(fileName: string) {\r\n        const infos = await this.getWebIdAndHost()\r\n        let res = {} as IFolder;\r\n        await FileClient.readFolder(fileName).then((content: IFolder) => {\r\n            content.name = decodeURI(content.name)\r\n            content.folders.forEach((f: IFolder) => {\r\n                f.name = decodeURI(f.name)\r\n                f.folders = []\r\n            })\r\n            res = content\r\n        }, (err: any) => {\r\n            alert(`User ${infos.webId} is not able to read folder ${fileName} on Pod ${infos.baseUrl}`)\r\n        });\r\n        return res\r\n    }\r\n\r\n\r\n    //Interface method for FileClient.readFile\r\n    static async fileClientReadFileAsString(url: string) {\r\n        let res: string = ''\r\n        await FileClient.readFile(url).then(\r\n            (body: string) => {\r\n                res = body\r\n            }\r\n            , (err: any) => {\r\n                console.log(`Error when reading file ${url}, returning blank`)\r\n                //throw new Error(\"read error  \" + err)\r\n            });\r\n        return res as string\r\n    }\r\n\r\n    //Interface method for FileClient.createFile\r\n    static async fileClientcreateFile(url: string) {\r\n        FileClient.createFile(url)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while creating file ' + url)\r\n            )\r\n    }\r\n\r\n    //Interface method for FileClient.updateFile\r\n    static async fileClientupdateFile(url: string, newContent: string) {\r\n        FileClient.updateFile(url, newContent)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while updating file ' + url)\r\n            )\r\n    }\r\n}","/**\r\n * Class for an arbitrary item from a solid pod\r\n */\r\nexport class Item {\r\n    _name: string;\r\n    _path: string[];\r\n    _url: string;\r\n    _size?: string\r\n\r\n    constructor(url: string, size?: string) {\r\n        const path = getPathFromUrl(url);\r\n\r\n        this._name = path.pop() || '';\r\n        this._path = path;\r\n        this._url = url;\r\n        this._size = size;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get name() { return this._name; }\r\n    get path() { return this._path; }\r\n    get url() { return this._url; }\r\n    get size() { return this._size; }\r\n\r\n    equals(item: Item) {\r\n        return this.name === item.name\r\n            && this.path.length === item.path.length\r\n            && this.path.every((val, index) => val === item.path[index]);\r\n    }\r\n\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n    \r\n    getDisplayName() {\r\n        return decodeURI(this.name);\r\n    }\r\n\r\n    getDisplaySize() {\r\n        return this._size ? getHumanFileSize(this._size) : 'Unknown size';\r\n    }\r\n}\r\n\r\nexport class FileItem extends Item {\r\n    isImage() {\r\n        return patterns.image.test(this.name);\r\n    }\r\n\r\n    isMedia() {\r\n        return patterns.media.test(this.name);\r\n    }\r\n\r\n    isEditable() {\r\n        return patterns.editable.test(this.name);\r\n    }\r\n\r\n    isExtractable() {\r\n        return patterns.extractable.test(this.name);\r\n    }\r\n\r\n    isVideo() {\r\n        return patterns.video.test(this.name);\r\n    }\r\n}\r\n\r\nexport class FolderItem extends Item { }\r\n\r\n\r\n// regex patterns for testing if a file is of a specific type\r\nconst patterns = {\r\n    editable: /\\.(txt|diff?|patch|svg|asc|cnf|cfg|conf|html?|cfm|cgi|aspx?|ini|pl|py|md|css|cs|jsx?|jsp|log|htaccess|htpasswd|gitignore|gitattributes|env|json|atom|eml|rss|markdown|sql|xml|xslt?|sh|rb|as|bat|cmd|cob|for|ftn|frm|frx|inc|lisp|scm|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb|tmpl|lock|go|yml|yaml|tsv|lst|ttl)$/i,\r\n    image: /\\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,\r\n    media: /\\.(mp3|ogg|wav|mp4|webm)$/i,\r\n    video: /\\.(mp4|webm|ogg)$/i,\r\n    extractable: /\\.(zip)$/i\r\n};\r\n\r\n/**\r\n * Calculate file size by bytes in human readable format\r\n */\r\nexport const getHumanFileSize = (byteString: string|number): string => {\r\n    const bytes = typeof byteString === 'string' ?\r\n        parseInt(byteString)\r\n        : byteString;\r\n    const e = (Math.log(bytes) / Math.log(1e3)) | 0;\r\n    return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\r\n};\r\n\r\n\r\n/**\r\n * Get path including the last element (e.g. [public, test, index.html])\r\n */\r\nconst getPathFromUrl = (urlString: string): string[] => {\r\n    const url = new URL(urlString);\r\n    return url.pathname.split('/').filter(val => val !== '');\r\n}","// Based on https://github.com/jeff-zucker/solid-file-client/blob/master/src/folderUtils\r\nimport * as rdflib from 'rdflib';\r\nimport { FileItem, FolderItem } from './Item';\r\nimport { FolderItems } from './types';\r\n\r\nexport function getSizeByGraph(graph: rdflib.IndexedFormula, subjectName: string): string | undefined {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const nsSize = rdflib.sym('http://www.w3.org/ns/posix/stat#size');\r\n    const size = graph.any(subjectNode, nsSize, undefined, undefined);\r\n\r\n    return (size && 'value' in size) ? size.value : undefined;\r\n}\r\n\r\n/**\r\n * @param {rdflib.IndexedFormula} graph a rdflib.graph() database instance\r\n * @param {string} baseUrl location of the folder\r\n * @returns {boolean}\r\n */\r\nexport function isFolder(graph: rdflib.IndexedFormula, baseUrl: string): boolean {\r\n    const folderNode = rdflib.sym(baseUrl);\r\n    const isAnInstanceOfClass = rdflib.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\r\n    const types = graph.each(folderNode, isAnInstanceOfClass, undefined, undefined);\r\n    return Object.values(types)\r\n        .some(({ value }) => value.match('ldp#BasicContainer') !== null);\r\n}\r\n\r\nexport function getFolderItems(graph: rdflib.IndexedFormula, subj: string): FolderItems {\r\n    const files: FileItem[] = [];\r\n    const folders: FolderItem[] = [];\r\n\r\n    graph.each(\r\n        rdflib.sym(subj),\r\n        rdflib.sym('http://www.w3.org/ns/ldp#contains'),\r\n        undefined,\r\n        undefined\r\n    ).forEach(item => {\r\n        const url = item.value;\r\n        const size = getSizeByGraph(graph, url);\r\n\r\n        if (isFolder(graph, url))\r\n            folders.push(new FolderItem(url, size));\r\n        else\r\n            files.push(new FileItem(url, size));\r\n    });\r\n\r\n    return { files, folders };\r\n}\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @param {string} contentType Content-Type of the request\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function text2graph(text: string, baseUrl: string, contentType: string = ''): Promise<rdflib.IndexedFormula> {\r\n    contentType = contentType || guessFileType(baseUrl);\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => {});\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\nfunction guessFileType(url: string): string {\r\n    const ext = url.replace(/.*\\./, '');\r\n    if (ext.match(/\\/$/)) return 'dir';\r\n    if (ext.match(/(md|markdown)/)) return 'text/markdown';\r\n    if (ext.match(/html/)) return 'text/html';\r\n    if (ext.match(/xml/)) return 'text/xml';\r\n    if (ext.match(/ttl/)) return 'text/turtle';\r\n    if (ext.match(/n3/)) return 'text/n3';\r\n    if (ext.match(/rq/)) return 'application/sparql';\r\n    if (ext.match(/css/)) return 'text/css';\r\n    if (ext.match(/txt/)) return 'text/plain';\r\n    if (ext.match(/json/)) return 'application/json';\r\n    if (ext.match(/js/)) return 'application/javascript';\r\n    if (ext.match(/(png|gif|jpeg|tif)/)) return 'image';\r\n    if (ext.match(/(mp3|aif|ogg)/)) return 'audio';\r\n    if (ext.match(/(avi|mp4|mpeg)/)) return 'video';\r\n    /* default */ return 'text/turtle';\r\n}\r\n","import config from './../config';\r\nimport * as folderUtils from './folderUtils';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { FolderItems } from './types';\r\n\r\n\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchFile(path: string, fileName?: string): Promise<Response>  {\r\n    const url = buildFileUrl(path, fileName);\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to get folder\r\n */\r\nexport async function fetchFolder(path: string, folderName?: string): Promise<Response> {\r\n    const url = buildFolderUrl(path, folderName);\r\n    return solidAuth.fetch(url, { headers: { \"Accept\": \"text/turtle\" } })\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to retrieve object containing a files and folders array\r\n */\r\nexport async function readFolder(path: string, folderName?: string): Promise<FolderItems> {\r\n    const url = buildFolderUrl(path, folderName);\r\n\r\n    const response = await fetchFolder(path, folderName);\r\n    const folderRDF = await response.text();\r\n    const graph = await folderUtils.text2graph(folderRDF, url, 'text/turtle');\r\n    const folderItems = folderUtils.getFolderItems(graph, url);\r\n\r\n    return folderItems;\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to move items\r\n */\r\nexport async function moveItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    await copyItems(path, destination, itemNames);\r\n    return removeItems(path, itemNames);\r\n};\r\n\r\n/**\r\n * Fetch API to tag a file\r\n */\r\n\r\nexport async function editTags(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n/**\r\n * Fetch API to rename a file\r\n */\r\nexport async function renameFile(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a folder\r\n */\r\nexport async function renameFolder(path: string, oldFolderName: string, newFolderName: string): Promise<Response> {\r\n    await copyFolder(path, oldFolderName, path, newFolderName);\r\n    return removeFolderRecursively(path, oldFolderName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy files\r\n */\r\nexport async function copyItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    let { files, folders } = await readFolder(path);\r\n\r\n    files = files.filter(({ name }) => itemNames.includes(name));\r\n    folders = folders.filter(({ name }) => itemNames.includes(name));\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(path, name, destination, name)),\r\n        ...folders.map(({ name }) => copyFolder(path, name, destination, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy a file\r\n */\r\nexport async function copyFile(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    const fileResponse = await fetchFile(originPath, originName);\r\n    const content = await fileResponse.blob();\r\n\r\n    return createFile(destinationPath, destinationName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to copy a folder recursively\r\n */\r\nexport async function copyFolder(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    // TODO: Combine these two promises for better performance\r\n    await createFolder(destinationPath, destinationName);\r\n    const { files, folders } = await readFolder(originPath, originName);\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name)),\r\n        ...folders.map(({ name }) => copyFolder(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to upload files\r\n */\r\nexport async function upload(path: string, fileList: FileList): Promise<Response> {\r\n    const promises = Array.from(fileList).map(file => updateFile(path, file.name, file));\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to create a folder\r\n */\r\nexport async function createFolder(path: string, folderName: string): Promise<Response> {\r\n    if (await folderExists(path, folderName))\r\n        return new Response();\r\n\r\n    return createItem(path, folderName, new Blob(), '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to replace or create a new file\r\n */\r\nexport async function updateFile(path: string, fileName: string, content: Blob|string): Promise<Response> {\r\n    await removeItem(path, fileName);\r\n    return createFile(path, fileName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create a new file\r\n */\r\nexport async function createFile(path: string, fileName: string, content: Blob|string): Promise<Response> {\r\n    return createItem(path, fileName, content, '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create create an item\r\n */\r\nasync function createItem(path: string, itemName: string, content: Blob|string, link: string): Promise<Response> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const request = {\r\n        method: 'POST',\r\n        headers: {\r\n            link,\r\n            slug: itemName,\r\n            'Content-Type': undefined as any // TODO: This hack can be removed if this issue is fixed: https://github.com/solid/node-solid-server/issues/1165\r\n        },\r\n        body: content\r\n    };\r\n\r\n    return solidAuth.fetch(baseUrl, request)\r\n        .then(assertSuccessfulResponse);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove multiple items\r\n */\r\nexport async function removeItems(path: string, itemNames: string[]): Promise<Response> {\r\n    return Promise.all(itemNames.map(itemName => removeItem(path, itemName)))\r\n        .then(() => new Response());\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to remove one item\r\n */\r\nexport async function removeItem(path: string, itemName: string): Promise<Response> {\r\n    const url = buildFileUrl(path, itemName);\r\n\r\n    const response = await solidAuth.fetch(url, { method: 'DELETE' });\r\n    if (response.status === 409 || response.status === 301) {\r\n        // Solid pod returns 409 if the item is a folder and is not empty\r\n        // Solid pod returns 301 if is attempted to read a folder url without '/' at the end (from buildFileUrl)\r\n        return removeFolderRecursively(path, itemName);\r\n    }\r\n    else if (response.status === 404) {\r\n        // Don't throw if the item didn't exist\r\n        return response;\r\n    }\r\n    else {\r\n        assertSuccessfulResponse(response);\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents and folder itself recursively\r\n */\r\nexport async function removeFolderRecursively(path: string, folderName: string): Promise<Response> {\r\n    await removeFolderContents(path, folderName);\r\n    return removeItem(path, folderName);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents of one folder recursively\r\n */\r\nexport async function removeFolderContents(path: string, folderName: string): Promise<Response> {\r\n    const folderPath = `${path}/${folderName}`;\r\n\r\n    const { files, folders } = await readFolder(path, folderName);\r\n    const promises = [\r\n        ...files.map(({ name }) => removeItem(folderPath, name)),\r\n        ...folders.map(({ name }) => removeFolderRecursively(folderPath, name))\r\n    ];\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to check if a folder exists\r\n */\r\nexport async function folderExists(path: string, folderName: string): Promise<boolean> {\r\n    try {\r\n        await fetchFolder(path, folderName);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Response && error.status === 404)\r\n            return false;\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a folder name\r\n */\r\nfunction buildFolderUrl(path: string, folderName?: string): string {\r\n    return buildFileUrl(path, folderName) + '/';\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a fileName\r\n */\r\nfunction buildFileUrl(path: string, fileName?: string): string {\r\n    let url = `${config.getHost()}${path}/${fileName || ''}`;\r\n    while (url.slice(-1) === '/')\r\n        url = url.slice(0, -1);\r\n\r\n    return url;\r\n}\r\n\r\n\r\n/**\r\n * Throw response if fetch response was unsuccessful\r\n * @param {Response} response\r\n * @returns {Response}\r\n */\r\nfunction assertSuccessfulResponse(response: Response): Response {\r\n    if (!response.ok)\r\n        throw response;\r\n    return response;\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { Item } from './Item';\r\n\r\nexport default class ApiCache {\r\n    _data: Record<string, Item[]> = {};\r\n\r\n    /**\r\n     * Add data to the cache\r\n     */\r\n    add(path: string, itemList: Item[]): Item[] {\r\n        this._data[path] = itemList;\r\n        return itemList;\r\n    }\r\n\r\n    /**\r\n     * Return true if the url is already cached\r\n     */\r\n    contains(path: string): boolean {\r\n        return this._data.hasOwnProperty(path);\r\n    }\r\n\r\n    /**\r\n     * Get the cached data\r\n     */\r\n    get(path: string): Item[] {\r\n        return this._data[path];\r\n    }\r\n\r\n    /**\r\n     * Remove paths from the cache\r\n     */\r\n    remove(...paths: string[]) {\r\n        paths.filter(path => this.contains(path))\r\n            .forEach(path => delete this._data[path]);\r\n    }\r\n\r\n    /**\r\n     * Clear the whole cache\r\n     */\r\n    clear() {\r\n        this._data = {};\r\n    }\r\n}\r\n","import { Meta, MetaTag } from './MetaUtils';\r\n\r\n\r\ninterface CouchDbRowKeyValue {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport interface FoundTags {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\n\r\nexport default class CouchDb {\r\n\r\n  static couchDbServerUrl = `http://127.0.0.1:5984`\r\n  static couchDbDatabaseName = `solidfilemanager`\r\n  static couchDbBaseUrl = `${CouchDb.couchDbServerUrl}/${CouchDb.couchDbDatabaseName}`\r\n\r\n  // unused.\r\n  static getMetaById(id: string) {\r\n    const xhr = this.createCORSRequest('GET', `${this.couchDbBaseUrl}/${id}`);\r\n    if (xhr) {\r\n      xhr.onload = function () {\r\n        const text = xhr.responseText;//=> ToDo return object\r\n        return text;\r\n      };\r\n      xhr.onerror = function () {\r\n        alert('Error calling request to CouchDb.');\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  /*\r\n  static viewNames = { \"MetasByTags\": \"MetasByTags\", \"MetaById\": \"MetaById\", \"GroupedTags\": \"GroupedTags\", }\r\n  static getItemsByView(viewName: string, key: string): Promise<string> {\r\n    //const view = this.viewNames.[{viewName}]\r\n    //const view: string = Object.keys(this.viewNames).find((name: string) => this.viewNames[name] === viewName)\r\n    let param: string = ''\r\n    key === ''\r\n      ? param = `_design/DesignDoc/_view/${viewName}`\r\n      : param = `_design/DesignDoc/_view/${viewName}?key=\"${key}\"`\r\n\r\n    //http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/GroupedTags?reduce=true&group=true\r\n    const url: string = `${this.couchDbBaseUrl}/${param}?reduce=true&group=true`\r\n    return await this.executeQueryonCouch(url)\r\n  }\r\n*/\r\n\r\n  static async getItemsByViewGroupedTags(): Promise<Array<any>> {\r\n    //   http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/GroupedTags?reduce=true&group=true\r\n    const url: string = `${this.couchDbBaseUrl}/_design/DesignDoc/_view/GroupedTags?reduce=true&group=true`\r\n    let json = await this.executeQueryonCouch(url) as string\r\n    let response = JSON.parse(json)\r\n    let usedTag = [] as MetaTag[]\r\n    if (response.rows) {\r\n      response.rows.forEach((row: CouchDbRowKeyValue) => {\r\n        const tag = ({ tagType: row.key[0], value: row.key[1], published: true }) as MetaTag\r\n        usedTag.push(tag)\r\n      })\r\n    }\r\n    return usedTag\r\n  }\r\n\r\n  static executeQueryonCouch(url: string): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = this.createCORSRequest('GET', url);\r\n      if (xhr) {\r\n        xhr.onload = () => {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            resolve(xhr.response)\r\n          } else {\r\n            reject(xhr.statusText);\r\n          }\r\n        };\r\n        xhr.onerror = () => reject(xhr.statusText);\r\n        xhr.send();\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  //Need a callback to handle error (rollback on Local?)\r\n  static updateMeta(meta: Meta) {\r\n    const xhr = this.createCORSRequest('GET', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      xhr.onload = function () {\r\n        const oldMeta = JSON.parse(xhr.responseText)\r\n        if (oldMeta && oldMeta._rev) meta._rev = oldMeta._rev\r\n        CouchDb.writeMeta(meta)\r\n      }\r\n      xhr.onerror = function () {\r\n        alert('Error reading original Meta when updating.');\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  //\"private\", only called by previous updateMeta\r\n  static writeMeta(meta: Meta) {\r\n    const xhr = this.createCORSRequest('PUT', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      // Response handlers.\r\n      xhr.onload = function () { };\r\n      xhr.onerror = function () {\r\n        alert('Error writing meta in CouchDb.');\r\n      };\r\n      xhr.send(JSON.stringify(meta));\r\n    }\r\n  }\r\n\r\n  // Create the XHR object.\r\n  static createCORSRequest(method: string, url: string) {\r\n    let xhr = new XMLHttpRequest();\r\n\r\n    if (\"withCredentials\" in xhr) {\r\n      // XHR for Chrome/Firefox/Opera/Safari.\r\n      xhr.open(method, url, true); //false to be sync\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      //} else if (typeof XDomainRequest != \"undefined\") {\r\n      //XDomainRequest for IE.\r\n      //Error: 'XDomainRequest' is not defined  no-undef\r\n      //xhr = new XDomainRequest();\r\n      //xhr.open(method, url);\r\n    } else {\r\n      alert('CORS not supported');\r\n    }\r\n    return xhr;\r\n  }\r\n\r\n  static createIdFromMeta(meta: Meta) {\r\n    const reg = new RegExp(\"[/]\", \"g\")\r\n    return (meta.hostName + meta.pathName).replace(reg, '.')\r\n  }\r\n}\r\n","import SolidFileClientUtils from './FileUtils';\r\nimport lodash from 'lodash'\r\nimport { Item } from './Item';\r\nimport CouchDb from './CouchDb';\r\nimport config from '../config';\r\n\r\nconst tagDir = '/public'\r\nconst tagFileName = '_Meta.json'\r\nexport const onServerColor = 'rebeccapurple'\r\n\r\n//Same as Tag without description for Meta\r\nexport interface MetaTag {\r\n    tagType: string,\r\n    value: string,\r\n    published: boolean\r\n}\r\n\r\nexport interface Meta {\r\n    hostName: string,\r\n    pathName: string,\r\n    mimeType: string,\r\n    creationDate: Date,\r\n    tags: MetaTag[],\r\n    _rev?: string //CouchDb field \r\n}\r\n\r\nexport default class MetaUtils {\r\n\r\n    static allLocalMetas = [] as Meta[];\r\n    static currentMeta = {} as Meta;\r\n    static currentItem = {} as Item\r\n    static currentLocalUsedTags = [] as MetaTag[]\r\n\r\n    static getTagIndexFullPath() {\r\n        return `${config.getHost()}${tagDir}/${tagFileName}`\r\n    }\r\n\r\n    //Local storage, read the file and get all metas in it\r\n    static async getAllMetas() {\r\n        const baseUrl = (await SolidFileClientUtils.getWebIdAndHost()).baseUrl\r\n        let allMetas = [] as Meta[]\r\n        if (this.allLocalMetas.length !== 0) allMetas = this.allLocalMetas\r\n        else {\r\n            var json: string = await SolidFileClientUtils.fileClientReadFileAsString(`${baseUrl}${tagDir}/${tagFileName}`)\r\n            if (json === '') SolidFileClientUtils.fileClientcreateFile(MetaUtils.getTagIndexFullPath())\r\n            else allMetas = JSON.parse(json)\r\n            this.allLocalMetas = allMetas\r\n        }\r\n        return allMetas\r\n    }\r\n\r\n    //List of Meta for selected tags\r\n    static async getLocalMetaList(selectedTags: MetaTag[]) {\r\n        const allMetas = await this.getAllMetas() as unknown as Meta[]\r\n        let filteredMetas = [] as Meta[]\r\n        //Create a list of copies of metas filtered by view selection and only wearing selected tags\r\n        if (false) {\r\n            //Filter: AND: ToDo\r\n        } else {\r\n            //Filter: OR   \r\n            selectedTags.forEach((testTag) => {\r\n                //get metas for current testTag and reset tags to its value\r\n                let havingTagMetas = this.filterByMetaTag(allMetas, testTag)\r\n                havingTagMetas.forEach(havingTagMeta => {\r\n                    //search already in filtered to add or update list\r\n                    let existingFilteredMeta =\r\n                        lodash.find(filteredMetas, function (meta) {\r\n                            return havingTagMeta.hostName + havingTagMeta.pathName === meta.hostName + meta.pathName\r\n                        })\r\n                    if (existingFilteredMeta !== undefined) {\r\n                        existingFilteredMeta.tags.push(testTag)\r\n                    } else {\r\n                        //filteredMetas: \"fakes\" Meta having only selected tags of the current view\r\n                        let havingTagMetaCopy = JSON.parse(JSON.stringify(havingTagMeta))\r\n                        havingTagMetaCopy.creationDate = new Date(0)\r\n                        havingTagMetaCopy.tags = [testTag]\r\n                        filteredMetas.push(havingTagMetaCopy)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        return filteredMetas\r\n    }\r\n\r\n    //getLocalMetaList() helper, returns Metas having testTag\r\n    static filterByMetaTag(metas: Meta[], testTag: MetaTag) {\r\n        return lodash.filter(metas, function (meta) {\r\n            return lodash.some(meta.tags, function (tag) {\r\n                return (\r\n                    tag.tagType === testTag.tagType\r\n                    && tag.value === testTag.value\r\n                    );\r\n            });\r\n        });\r\n    }\r\n\r\n    //Get or init the meta of a file\r\n    static async getOrInitMeta(item: Item) {\r\n        const url = new URL(item.getUrl())\r\n        //init in case no better foiund\r\n        let meta = {\r\n            hostName: url.hostname,\r\n            pathName: url.pathname,\r\n            mimeType: '',\r\n            creationDate: new Date(),\r\n            tags: []\r\n        } as Meta\r\n        //Already the current one?\r\n        if (this.currentMeta !== undefined\r\n            && this.currentMeta.hostName === url.hostname && this.currentMeta.pathName === url.pathname)\r\n            meta = this.currentMeta\r\n        else {\r\n            //Read in meta storage\r\n            const allMetas: Meta[] = await this.getAllMetas()\r\n            if (allMetas !== undefined) {\r\n                const existingMeta = allMetas.filter(el => el.hostName === url.hostname && el.pathName === url.pathname)[0]\r\n                if (existingMeta !== undefined) meta = existingMeta\r\n            }\r\n        }\r\n        this.currentMeta = meta\r\n        this.currentItem = item\r\n        return meta\r\n    }\r\n\r\n    static async updateMeta(meta: Meta) {\r\n        //FILE: remove old meta from list if exists and add the new one\r\n        let allLocalMetas: Meta[] = await this.getAllMetas() as unknown as Meta[]\r\n        allLocalMetas = allLocalMetas.filter(el => !(el.hostName === meta.hostName && el.pathName === meta.pathName));\r\n        allLocalMetas.push(meta)\r\n        SolidFileClientUtils.fileClientupdateFile(\r\n            MetaUtils.getTagIndexFullPath(),\r\n            JSON.stringify(allLocalMetas)\r\n        )\r\n\r\n        //COUCHDB:\r\n        let metaCopy = JSON.parse(JSON.stringify(meta)) as Meta\r\n        metaCopy.tags = metaCopy.tags.filter(tag => tag.published);\r\n        metaCopy.tags.forEach(function (tag) { delete tag.published });\r\n        CouchDb.updateMeta(metaCopy)\r\n\r\n        //FINALLY\r\n        this.currentMeta = meta\r\n        this.allLocalMetas = allLocalMetas\r\n        //update currentLocalUsedTags if already loaded\r\n        if (this.currentLocalUsedTags !== undefined) {\r\n            MetaUtils.getLocalUsedTags()\r\n                .then((foundTags: MetaTag[]) => {\r\n                    this.currentLocalUsedTags = foundTags\r\n                })\r\n        }\r\n    }\r\n\r\n    static async getLocalUsedTags() {\r\n        let usedTags = [] as MetaTag[]\r\n        if (this.currentLocalUsedTags.length !== 0) usedTags = this.currentLocalUsedTags\r\n        else {\r\n            let allMetas: Meta[] = await this.getAllMetas() as unknown as Meta[]\r\n            //get list of tags in meta\r\n            let foundTags = [] as MetaTag[]\r\n            if (allMetas) {\r\n                allMetas.forEach(meta => {\r\n                    if (meta.tags) {\r\n                        meta.tags.forEach(tag => {\r\n                            foundTags.push(tag)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            usedTags = lodash.uniqWith(foundTags, function (first, second) {\r\n                return first.tagType === second.tagType && first.value === second.value\r\n            });\r\n            usedTags = lodash.sortBy(usedTags, ['tagType', 'value']);\r\n        }\r\n        return usedTags\r\n    }\r\n\r\n    static async getCentralUsedTags(): Promise<Array<any>> {\r\n        return new Promise((resolve, reject) => {\r\n            CouchDb.getItemsByViewGroupedTags()\r\n                .then(\r\n                    (centralTags: MetaTag[]) => {\r\n                        //published prop temporarly used as \"server tag published on local?\"\r\n                        centralTags.forEach(centralTag => { centralTag.published = false })\r\n                        MetaUtils.getLocalUsedTags()\r\n                            .then((localTags: MetaTag[]) => {\r\n                                //refresh cache as we have the value\r\n                                this.currentLocalUsedTags = localTags\r\n                                localTags.forEach(localTag => {\r\n                                    if (localTag.published === true) {\r\n                                        this.markCentralFromLocal(centralTags, localTag)\r\n                                    }\r\n                                })\r\n                                resolve(centralTags)\r\n                            })\r\n                    }\r\n                )\r\n        })\r\n\r\n    }\r\n\r\n    //getCentralUsedTags() helper, marks published=true to central tags found in local tags\r\n    static markCentralFromLocal(centralTags: MetaTag[], localTag: MetaTag) {\r\n        let publishedTags: MetaTag[] = lodash.filter(\r\n            centralTags,\r\n            function (tag) { return (tag.value === localTag.value) }\r\n        )\r\n        //publishedTags.length should be 0 or 1\r\n        publishedTags.forEach((tag: MetaTag) => tag.published = true)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import * as API from './Api';\r\nimport JSZip from 'jszip';\r\nimport { FileItem, FolderItem, Item } from './Item';\r\nimport ApiCache from './ApiCache';\r\nimport MetaUtils, { Meta, MetaTag } from './MetaUtils';\r\n\r\nconst cache = new ApiCache();\r\n\r\n/**\r\n * Log a fetch response error and throw it again\r\n * @param {*} error \r\n */\r\nconst handleFetchError = async (error: Error | Response | string) => {\r\n    let detailedErrorMessage = '';\r\n    let displayErrorMessage: string | undefined;\r\n\r\n    console.group('handleFetchError');\r\n    if (error instanceof Response) {\r\n        detailedErrorMessage = await error.text();\r\n\r\n        console.error(`url: ${error.url}`);\r\n        console.error(`status: ${error.status}`);\r\n\r\n        const displayMessages: Record<string, string> = {\r\n            '401': `The ressource at ${error.url} requires you to login.`,\r\n            '403': `You don't have permission to access the ressource at ${error.url}.\r\n            Please make sure that you are logged in with the correct account.\r\n            If the server runs with version 5.0.0 or higher, make sure you gave this app read/write permission`,\r\n            '404': `The ressource at ${error.url} was not found`,\r\n            '500': `An internal server error occured...\r\n            ${detailedErrorMessage}`,\r\n        };\r\n        if (error.status in displayMessages)\r\n            displayErrorMessage = displayMessages[error.status];\r\n    }\r\n    else if (error instanceof Error) {\r\n        detailedErrorMessage = error.message;\r\n        console.error(error.stack);\r\n    }\r\n    else if (typeof error === 'string') {\r\n        detailedErrorMessage = error;\r\n    }\r\n    else {\r\n        detailedErrorMessage = JSON.stringify(error);\r\n    }\r\n    console.error(`errorMessage: ${detailedErrorMessage}`);\r\n    console.error(`error: ${error}`);\r\n    console.groupEnd();\r\n\r\n    throw new Error((displayErrorMessage) ? displayErrorMessage : detailedErrorMessage);\r\n}\r\n\r\n/**\r\n * Clean path string removing double slashes and prepending a slash if non-empty\r\n */\r\nconst fixPath = (path: string): string => {\r\n    if (path === \"\")\r\n        return path;\r\n    return ('/' + path).replace(/\\/\\//g, '/');\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving item list\r\n * itemList is cached automatically\r\n * @param {String} path\r\n * @returns {Promise<API.FolderItems>}\r\n */\r\nexport const getItemList = (path: string): Promise<Item[]> => {\r\n    path = fixPath(path);\r\n    if (cache.contains(path))\r\n        return Promise.resolve(cache.get(path));\r\n    return API.readFolder(path)\r\n        .then(({ files, folders }) => [...files, ...folders])\r\n        .then(itemList => cache.add(path, itemList))\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const clearCacheForFolder = (path: string) => cache.remove(fixPath(path));\r\nexport const clearCache = () => cache.clear();\r\n\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileBlob = (path: string, filename: string): Promise<Blob> => {\r\n    path = fixPath(path);\r\n    return API.fetchFile(path, filename)\r\n        .then(response => response.blob())\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for taging a file\r\n */\r\nexport const editTags = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.editTags(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a file\r\n */\r\nexport const renameFile = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFile(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a folder\r\n */\r\nexport const renameFolder = (path: string, folderName: string, newFolderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFolder(path, folderName, newFolderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for creating a folder\r\n */\r\nexport const createFolder = (path: string, folderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!(folderName || '').trim()) {\r\n        return Promise.reject('Invalid folder name');\r\n    }\r\n    return API.createFolder(path, folderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for removing a file or folder\r\n */\r\nexport const removeItems = (path: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to remove');\r\n    }\r\n    return API.removeItems(path, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for moving a file or folder\r\n */\r\nexport const moveItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to move');\r\n    }\r\n    return API.moveItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for copying a file or folder\r\n */\r\nexport const copyItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to copy');\r\n    }\r\n    return API.copyItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading files\r\n */\r\nexport const uploadFiles = (path: string, fileList: FileList): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n\r\n    if (!fileList.length) {\r\n        return Promise.reject('No files to upload');\r\n    }\r\n    return API.upload(path, fileList)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading a file\r\n */\r\nexport const updateFile = (path: string, fileName: string, content: Blob|string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateFile(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for save Meta definition (including its tags)\r\n */\r\nexport const updateMeta = (meta: Meta) => {\r\n    MetaUtils.updateMeta(meta)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API to load metas of selectedTags\r\n */\r\nexport const getMetaList = (selectedTags: MetaTag[]): Promise<Meta[]> => {\r\n    return MetaUtils.getLocalMetaList(selectedTags)\r\n        .then()\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for zipping multiple items\r\n */\r\nexport const getAsZip = (path: string, itemList: Item[]): Promise<JSZip> => {\r\n    path = fixPath(path);\r\n    const zip = new JSZip();\r\n\r\n    return addItemsToZip(zip, path, itemList)\r\n        .then(() => zip);\r\n}\r\n\r\n/**\r\n * Add items to a zip object recursively\r\n */\r\nconst addItemsToZip = (zip: JSZip, path: string, itemList: Item[]): Promise<void[]> => {\r\n    const promises = itemList.map(async item => {\r\n        if (item instanceof FolderItem) {\r\n            const zipFolder = zip.folder(item.name);\r\n            const folderPath = `${path}/${item.name}`;\r\n            const folderItems = await getItemList(folderPath);\r\n            await addItemsToZip(zipFolder, folderPath, folderItems);\r\n        }\r\n        else if (item instanceof FileItem) {\r\n            const blob = await getFileBlob(path, item.name);\r\n            zip.file(item.name, blob, { binary: true });\r\n        }\r\n    });\r\n\r\n    return Promise.all(promises);\r\n}\r\n\r\n/**\r\n * Wrap API response for extracting a zip archive\r\n */\r\nexport const extractZipArchive = async (path: string, destination: string = path, fileName: string) => {\r\n    const blob = await getFileBlob(path, fileName);\r\n    const zip = await JSZip.loadAsync(blob);\r\n\r\n    return uploadExtractedZipArchive(zip, destination);\r\n};\r\n\r\n/**\r\n * Recursively upload all files and folders from an extracted zip archive\r\n */\r\nasync function uploadExtractedZipArchive(zip: JSZip, destination: string, curFolder = ''): Promise<void[]> {\r\n    const promises = getItemsInZipFolder(zip, curFolder)\r\n        .map(async item => {\r\n            const relativePath = item.name;\r\n            const itemName = getItemNameFromPath(relativePath);\r\n            const path = getParentPathFromPath(`${destination}/${relativePath}`);\r\n\r\n            if (item.dir) {\r\n                await createFolder(path, itemName);\r\n                await uploadExtractedZipArchive(zip, destination, relativePath);\r\n            }\r\n            else {\r\n                const blob = await item.async('blob');\r\n                await updateFile(path, itemName, blob);\r\n            }\r\n        });\r\n\r\n    return Promise.all(promises);\r\n};\r\n\r\nfunction getItemsInZipFolder(zip: JSZip, folderPath: string): JSZip.JSZipObject[] {\r\n    return Object.keys(zip.files)\r\n        .filter(fileName => {\r\n            // Only items in the current folder and subfolders\r\n            const relativePath = fileName.slice(folderPath.length, fileName.length);\r\n            if (!relativePath || fileName.slice(0, folderPath.length) !== folderPath)\r\n                return false;\r\n            \r\n            // No items from subfolders\r\n            if (relativePath.includes('/') && relativePath.slice(0, -1).includes('/'))\r\n                return false;\r\n\r\n            return true;\r\n        })\r\n        .map(key => zip.files[key]);\r\n};\r\n\r\nfunction getItemNameFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    return path.substr(path.lastIndexOf('/') + 1);\r\n}\r\n\r\nfunction getParentPathFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    path = path.substr(0, path.lastIndexOf('/'));\r\n    return path;\r\n}\r\n","import * as APIHandler from '../Api/ApiHandler';\r\nimport * as solidAuth from 'solid-auth-client';\r\n//import { createBrowserHistory, History } from 'history';\r\nimport { Item, FileItem, FolderItem } from '../Api/Item';\r\n//removed ENTER_FOLDER, \r\nimport { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_ITEMS, SET_METAS, SET_WEB_ID, SELECT_ITEMS, TOGGLE_SELECTED_ITEM, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, DISPLAY_LOADING, STOP_LOADING, DIALOGS, OPEN_DIALOG, CLOSE_DIALOG, SET_LOADED_BLOB, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS, SET_PATH, MOVE_FOLDER_UPWARDS, RESET_LOADED_BLOB, RESET_HOST, RESET_WEB_ID, SET_ERROR_MESSAGE, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from './actionTypes';\r\nimport { AppState } from '../Reducers/reducer';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { Meta, MetaTag } from '../Api/MetaUtils';\r\n\r\nexport type MyThunk = ThunkAction<void, AppState, null, Action<any>>;\r\nexport type MyDispatch = ThunkDispatch<AppState, null, Action<any>>;\r\n\r\nexport const initApp = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(updateLoginStatus());\r\n    dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n};\r\n\r\n\r\nexport const solidLogin = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(displayLoading());\r\n\r\n    solidPopupLogin()\r\n        .then(session => dispatch(updateLoginStatus(session)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const updateLoginStatus = (session?: Session | null): MyThunk => async (dispatch, getState) => {\r\n    session = session || await solidAuth.currentSession();\r\n    if (!session) {\r\n        dispatch(setLoggedOut());\r\n        dispatch(resetWebId());\r\n    }\r\n    else {\r\n        dispatch(setWebId(session.webId));\r\n        dispatch(setLoggedIn());\r\n    }\r\n}\r\n\r\nasync function solidPopupLogin() {\r\n    return solidAuth.popupLogin({ popupUri: './vendor/solid-auth-client/popup.html' });\r\n}\r\n\r\n\r\nexport const solidLogout = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(displayLoading());\r\n\r\n    solidAuth.logout()\r\n        .then(() => {\r\n            dispatch(resetPath());\r\n            dispatch(resetItems());\r\n            dispatch(resetSelectedItems());\r\n            dispatch(setLoggedOut());\r\n            dispatch(resetWebId());\r\n\r\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const clearCache = (): MyThunk => (dispatch, getState) => APIHandler.clearCache();\r\n\r\n\r\n/**\r\n * Request API to get file list for the selected path then refresh UI\r\n */\r\nexport const uploadFiles = (): MyThunk => (dispatch, getState) => {\r\n    const { path, upload: { fileList } } = getState();\r\n\r\n    if (fileList === null)\r\n        return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n    dispatch(displayLoading());\r\n    dispatch(resetSelectedItems());\r\n    dispatch(setFileUploadProgress(50));\r\n\r\n    APIHandler.uploadFiles(path.join('/'), fileList)\r\n        .then(r => {\r\n            dispatch(setFileUploadProgress(100));\r\n            setTimeout(f => {\r\n                dispatch(resetFileUploader());\r\n            }, 300);\r\n            dispatch(displayCurrentItemList());\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const createFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.updateFile(path.join('/'), fileName, new Blob())\r\n        .then(r => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(loadAndEditFile(fileName));\r\n            return APIHandler.getItemList(path.join('/'));\r\n        })\r\n        .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n        .then(item => {\r\n            if (!item)\r\n                throw new Error(\"Couldn't load created file for editing\");\r\n            dispatch(selectItem(item));\r\n            dispatch(getFileContent(item.name));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const updateTextFile = (fileName: string, content: Blob | string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.updateFile(path.join('/'), fileName, content)\r\n        .then(r => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n            dispatch(displayCurrentItemList());\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\n/**\r\n * Request API to get file tags  and display them\r\n */\r\nexport const loadAndEditTags = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.EDITTAGS));\r\n};\r\n\r\nexport const updateMeta = (meta: Meta): MyThunk => (dispatch, getState) => {\r\n    APIHandler.updateMeta(meta)\r\n    dispatch(closeDialog(DIALOGS.EDITTAGS));\r\n}\r\n\r\n/**\r\n * Request API to display Meta list for the selected tag\r\n */\r\nexport const getMetaList = (selectedTags: MetaTag[]): MyThunk => (dispatch, getState) => {\r\n        dispatch(displayLoading());\r\n        APIHandler.getMetaList(selectedTags)\r\n            .then(items => dispatch(setMetas(items)))\r\n            .catch(r => dispatch(setErrorMessage(String(r))))\r\n            .finally(() => dispatch(stopLoading())); \r\n};\r\n\r\n/**\r\n * Request API to display file list for the selected path\r\n */\r\nexport const displayCurrentItemList = (): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n    dispatch(resetSelectedItems());\r\n    APIHandler.getItemList(path.join('/'))\r\n        .then(items => dispatch(setItems(items)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to reload the file list and then refresh UI\r\n */\r\nexport const refreshItemList = (): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    APIHandler.clearCacheForFolder(path.join('/'));\r\n    return dispatch(displayCurrentItemList());\r\n};\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFile = (fileName: string, newFileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.renameFile(path.join('/'), fileName, newFileName)\r\n        .then(() => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to rename folder then dispatch defined events\r\n */\r\nexport const renameFolder = (folderName: string, newFolderName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.renameFolder(path.join('/'), folderName, newFolderName)\r\n        .then(() => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to download the specified items\r\n */\r\nexport const downloadItems = (items: Item[]): MyThunk => async (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    try {\r\n        let blob;\r\n        let downloadName = items[0].name;\r\n        if (items.length === 1 && items[0] instanceof FileItem) {\r\n            blob = await APIHandler.getFileBlob(path.join('/'), items[0].name);\r\n        }\r\n        else {\r\n            const zip = await APIHandler.getAsZip(path.join('/'), items);\r\n            blob = await zip.generateAsync({ type: 'blob' });\r\n\r\n            if (items.length > 1)\r\n                downloadName = 'Archive';\r\n            downloadName = `${downloadName}.zip`;\r\n        }\r\n\r\n        promptDownload(blob, downloadName);\r\n    }\r\n    catch (e) {\r\n        dispatch(setErrorMessage(String(e)));\r\n    }\r\n    dispatch(stopLoading());\r\n};\r\n\r\n/**\r\n * Request API to upload the items as zip archive\r\n */\r\nexport const zipAndUpload = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const archiveName = (items.length === 1 && items[0] instanceof FolderItem) ?\r\n        `${items[0].name}.zip`\r\n        : 'Archive.zip';\r\n\r\n    APIHandler.getAsZip(path.join('/'), items)\r\n        .then(zip => zip.generateAsync({ type: 'blob' }))\r\n        .then(blob => APIHandler.updateFile(path.join('/'), archiveName, blob))\r\n        .then(() => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API for extracting a zip archive\r\n */\r\nexport const extractZipFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.extractZipArchive(path.join('/'), path.join('/'), fileName)\r\n        .then(r => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n// code based on https://stackoverflow.com/a/30832210/6548154\r\nfunction promptDownload(file: Blob, fileName: string) {\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, fileName);\r\n    else { // Others\r\n        const a = document.createElement(\"a\");\r\n        const url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(() => {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }, 0);\r\n    }\r\n}\r\n\r\n/**\r\n * Opens the item in a new tab\r\n */\r\nexport const openInNewTab = (item: Item): MyThunk => (dispatch, getState) => {\r\n    window.open(item.url, '_blank');\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content then dispatch defined events\r\n */\r\nexport const getFileContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n    dispatch(resetFileContent());\r\n\r\n    APIHandler.getFileBlob(path.join('/'), fileName)\r\n        .then(blob => dispatch(setFileContent(blob)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndEditFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.EDIT));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and display it\r\n */\r\nexport const loadAndDisplayFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.CONTENT));\r\n};\r\n\r\n/**\r\n * Request API to display an audio or video file\r\n */\r\nexport const displaySelectedMediaFile = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(openDialog(DIALOGS.MEDIA));\r\n};\r\n\r\n\r\n/**\r\n * Request API to create a folder then dispatch defined events\r\n */\r\nexport const createNewFolder = (folderName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.createFolder(path.join('/'), folderName)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to remove multiple items\r\n */\r\nexport const removeItems = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.removeItems(path.join('/'), itemNames)\r\n        .then(r => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to move multiple items\r\n */\r\nexport const moveItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n\r\n    const destination = targetPath.join('/');\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to copy an item then dispatch defined events\r\n */\r\nexport const copyItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const destination = targetPath.join('/');\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.copyItems(path.join('/'), destination, itemNames)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * This handles multiple selection by using shift key\r\n */\r\nexport const setSelectedItemsFromLastTo = (lastFile: Item): MyThunk => (dispatch, getState) => {\r\n    const { items: { inCurFolder: items, selected: selectedItems } } = getState();\r\n\r\n    const lastPreviouslySelected = [...selectedItems].pop();\r\n    if (!lastPreviouslySelected)\r\n        return dispatch(setErrorMessage(\"Couldn't enlarge selection because no items were previously selected\"));\r\n\r\n    const lastPreviouslySelectedIndex = items.indexOf(lastPreviouslySelected);\r\n    const lastSelectedIndex = items.indexOf(lastFile);\r\n\r\n    const isInRange = (num: number, start: number, end: number) => start <= num && num <= end;\r\n    const toAdd = lastSelectedIndex > lastPreviouslySelectedIndex ?\r\n        items.filter((item, index) => isInRange(index, lastPreviouslySelectedIndex, lastSelectedIndex))\r\n        : items.filter((item, index) => isInRange(index, lastSelectedIndex, lastPreviouslySelectedIndex));\r\n\r\n    dispatch(selectItems([...selectedItems, ...toAdd]));\r\n};\r\n\r\nexport const resetFileUploader = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(setFileUploadProgress(0));\r\n    dispatch(closeDialog(DIALOGS.UPLOAD_FILE));\r\n    dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const enterFolder = (path: string[]): MyThunk => (dispatch, getState) => {\r\n    dispatch(setPath(path));\r\n    dispatch(resetFilter());\r\n    dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const enterFolderByItem = (item: Item): MyThunk => (dispatch, getState) => {\r\n    const path = item.path;\r\n    // Open containing folder if it is a file\r\n    dispatch(enterFolder(item instanceof FileItem ? path : [...path, item.name]));\r\n};\r\n\r\nexport const moveFolderUpwardsAndRefresh = (n: number): MyThunk => (dispatch, getState) => {\r\n    dispatch(moveFolderUpwards(n));\r\n    dispatch(refreshItemList());\r\n};\r\n\r\nexport const rightClickOnFile = (item: Item): MyThunk => (dispatch, getState) => {\r\n    const { items: { selected } } = getState();\r\n    const isSelected = selected.includes(item);\r\n\r\n    !isSelected && dispatch(selectItem(item));\r\n};\r\n\r\n// Create action which can be dispatched\r\nconst makeActionCreator: <VALUE = void>(type: string) => (value: VALUE) => Action<VALUE> = <VALUE = void>(type: string) => (value: VALUE) => {\r\n    return {\r\n        type,\r\n        value\r\n    };\r\n};\r\n\r\nexport const moveFolderUpwards = makeActionCreator<number>(MOVE_FOLDER_UPWARDS);\r\nexport const setPath = makeActionCreator<string[]>(SET_PATH);\r\nexport const resetPath = () => setPath([]);\r\n\r\nexport const setLoggedIn = makeActionCreator(SET_LOGGED_IN);\r\nexport const setLoggedOut = makeActionCreator(SET_LOGGED_OUT);\r\nexport const setHost = makeActionCreator<string>(SET_HOST);\r\nexport const resetHost = makeActionCreator(RESET_HOST);\r\nexport const setWebId = makeActionCreator<string>(SET_WEB_ID);\r\nexport const resetWebId = makeActionCreator(RESET_WEB_ID);\r\n\r\nexport const setItems = makeActionCreator<Item[]>(SET_ITEMS);\r\nexport const resetItems = () => setItems([]);\r\n\r\nexport const setMetas = makeActionCreator<Meta[]>(SET_METAS);\r\n\r\nexport const selectItems = makeActionCreator<Item[]>(SELECT_ITEMS);\r\nexport const selectItem = (item: Item) => selectItems([item]);\r\nexport const resetSelectedItems = () => selectItems([]);\r\nexport const toggleSelectedItem = makeActionCreator<Item>(TOGGLE_SELECTED_ITEM);\r\nexport const deselectItem = makeActionCreator<Item>(DESELECT_ITEM);\r\n\r\nexport const filterItems = makeActionCreator<string>(FILTER_ITEMS);\r\nexport const resetFilter = makeActionCreator(RESET_FILTER);\r\n\r\n\r\nexport const displayLoading = makeActionCreator(DISPLAY_LOADING);\r\nexport const stopLoading = makeActionCreator(STOP_LOADING);\r\n\r\nexport const resetFileContent = makeActionCreator(RESET_LOADED_BLOB);\r\nexport const setFileContent = makeActionCreator<Blob>(SET_LOADED_BLOB);\r\nexport const setFileUploadList = makeActionCreator<FileList | null>(SET_UPLOAD_FILE_LIST);\r\nexport const resetFileUploadList = () => setFileUploadList(null);\r\nexport const setFileUploadProgress = makeActionCreator<number>(SET_UPLOAD_FILE_PROGRESS);\r\n\r\nexport const openDialog = makeActionCreator<DIALOGS>(OPEN_DIALOG);\r\nexport const closeDialog = makeActionCreator<DIALOGS>(CLOSE_DIALOG);\r\nexport const openContextMenu = makeActionCreator<{ x: number, y: number }>(OPEN_CONTEXT_MENU);\r\nexport const closeContextMenu = makeActionCreator(CLOSE_CONTEXT_MENU);\r\n\r\nexport const setErrorMessage = makeActionCreator<string>(SET_ERROR_MESSAGE);\r\nexport const resetErrorMessage = () => setErrorMessage('');\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport { styled } from '@material-ui/styles';\r\n\r\nimport { enterFolderByItem, MyDispatch } from '../../Actions/Actions';\r\n\r\nimport { Item } from '../../Api/Item';\r\n\r\ninterface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    alreadyReadSubFolders?: boolean;//details of sub folders are read\r\n}\r\n\r\ninterface IState {\r\n    [index: string]: boolean;\r\n}\r\n\r\nconst MyListItem =  styled(ListItem)({\r\n    padding: '0 16px 0px 16px',\r\n});\r\n\r\nconst MyListItemText = styled(ListItemText)({\r\n    fontSize: '0.8em',\r\n    padding: '0 0px',\r\n});\r\n\r\nclass TreeViewItem extends React.Component<TreeViewProps> {\r\n\r\n    state = {} as IState;\r\n    colNumber = 2;\r\n\r\n    render() {\r\n        //handleClick to show details on other view, from Redux\r\n        //itemHandleCkick from parent to expand/collapse\r\n        const { item, handleClick, colNumber, itemHandleClick } = this.props\r\n\r\n        return (\r\n            <MyListItem\r\n                button\r\n                key={item.name}\r\n                onClick={itemHandleClick.bind(this, item)}\r\n            >\r\n                {this.blanks(colNumber)}\r\n                <div\r\n                    key={item.name}\r\n                >\r\n                    {item.folders && item.folders.length !== 0 ? (\r\n                        this.props.expColl\r\n                            ? (<ExpandLess key={item.name} />)\r\n                            : (<ExpandMore key={item.name} />)\r\n                    ) : (this.Blank())}\r\n                </div>\r\n\r\n                <MyListItemText\r\n                    key={item.name + 'txt'}\r\n                    onClick={handleClick}\r\n                >\r\n                    {item.name}\r\n                </MyListItemText>\r\n\r\n            </MyListItem>\r\n        )\r\n    }\r\n\r\n    Blank = () =>\r\n        <svg\r\n            width=\"24px\"\r\n            height=\"24px\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n        >\r\n            <path d=\"\" fill=\"#fff\" />\r\n        </svg>;\r\n\r\n\r\n    blanks(colNumber: number) {\r\n        const blanks = [];\r\n        for (var it = 0; it < colNumber; it++) {\r\n            blanks.push(\r\n                this.Blank()\r\n            )\r\n        }\r\n        return blanks\r\n    }\r\n}\r\n\r\ninterface TreeViewOwnProps {\r\n    item: IFolder;\r\n    colNumber: number;\r\n    itemHandleClick(folder: IFolder): void;\r\n    expColl: boolean\r\n}\r\n\r\ninterface StateProps {\r\n}\r\ninterface DispatchProps {\r\n    handleClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface TreeViewProps extends TreeViewOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: TreeViewOwnProps): DispatchProps => {\r\n    return {\r\n        handleClick: () => {\r\n            const item = new Item(ownProps.item.url)\r\n            dispatch(enterFolderByItem(item));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TreeViewItem);\r\n","import React from 'react';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  progress: {\r\n    margin: theme.spacing.unit * 10,\r\n  },\r\n});\r\n\r\nfunction Loader(props: LoaderProps) {\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <CircularProgress className={props.classes.progress} color=\"secondary\" />\r\n        </Grid>\r\n    );\r\n}\r\n\r\ninterface LoaderProps extends WithStyles<typeof styles> {};\r\n\r\nexport default withStyles(styles)(Loader);\r\n","import React, { Component } from 'react';\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport { styled } from '@material-ui/styles';\r\n\r\nimport SolidFileClientUtils, { IFolder } from '../../Api/FileUtils';\r\nimport TreeViewItem from \"./TreeViewItem\";\r\nimport Loader from '../Loader/Loader'; \r\n\r\ninterface IState {\r\n    [index: string]: boolean;\r\n}\r\n\r\n\r\nconst MyList = styled(List)({\r\n    width: 'max-content',\r\n    flexShrink: 0\r\n});\r\n\r\nexport default class TreeView extends Component {\r\n    state = {} as IState;\r\n    folder = {} as IFolder;\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.itemHandleClick = this.itemHandleClick.bind(this)\r\n    }\r\n\r\n    //sent to TreeViewItem for expand/collapse handled here\r\n    itemHandleClick(folder: IFolder) {\r\n        this.updateFolder(folder)\r\n        this.setState({ [folder.url]: !this.state[folder.url] });\r\n    };\r\n\r\n    async initFolders() {\r\n        \r\n        const baseUrl = (await SolidFileClientUtils.getWebIdAndHost()).baseUrl\r\n        \r\n        if (baseUrl !== null) {\r\n            this.folder = await SolidFileClientUtils.fileClientReadFolder(baseUrl)\r\n\r\n            //get folders in the root\r\n            await this.updateFolder(this.folder)\r\n            this.forceUpdate()\r\n\r\n            //and then update those folders so that the arrows (if any) are visible\r\n            for (var i = 0; i < this.folder.folders.length; i++) {\r\n                await this.updateFolder(this.folder.folders[i])\r\n            }\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    //also called on folder icon click\r\n    async updateFolder(item: IFolder) {\r\n        for (var i = 0; i < item.folders.length; i++) {\r\n            if (item.folders[i].known !== true) {\r\n                item.folders[i] = await SolidFileClientUtils.fileClientReadFolder(item.folders[i].url)\r\n                item.folders[i].known = true\r\n            }\r\n            for (var j = 0; j < item.folders[i].folders.length; j++) {\r\n                try {\r\n                    if (item.folders[i].folders[j].known !== true) {\r\n                        item.folders[i].folders[j] =\r\n                            await SolidFileClientUtils.fileClientReadFolder(item.folders[i].folders[j].url)\r\n                            item.folders[i].folders[j].known = true\r\n                    }\r\n                } catch (err) {\r\n                    //Error on some damaged folders, skip ...\r\n                }\r\n            }\r\n        }\r\n     }\r\n\r\n    render() {\r\n        if (this.folder.name === undefined) {\r\n            this.initFolders()\r\n            return (<div><Loader/></div>)\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <MyList\r\n                        subheader={<ListSubheader></ListSubheader>}>\r\n                        {this.printRows(this.folder.folders, -1)}\r\n                    </MyList>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    };\r\n\r\n    printRows(items: IFolder[], colNumber: number) {\r\n        colNumber = colNumber + 1\r\n        if (items != null) {\r\n            return (\r\n                items.map((item: IFolder) => {\r\n                    return (\r\n                        <div key={item.name}>\r\n                            <TreeViewItem\r\n                                item={item}\r\n                                key={0}\r\n                                colNumber={colNumber}\r\n                                itemHandleClick={this.itemHandleClick}\r\n                                expColl={this.state[item.url]}\r\n                            />\r\n                            {item.folders != null ? (\r\n                                <Collapse\r\n                                    key={item.name + 'col'}\r\n                                    component=\"div\"\r\n                                    in={this.state[item.url]}\r\n                                    timeout=\"auto\"\r\n                                    unmountOnExit\r\n                                >\r\n                                    {this.printRows(item.folders, colNumber)}\r\n                                </Collapse>\r\n                            ) : (null)}\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            );\r\n        }\r\n        colNumber = colNumber - 1\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { styled } from '@material-ui/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { getMetaList, MyDispatch } from '../../Actions/Actions';\r\nimport MetaUtils, { MetaTag, onServerColor } from '../../Api/MetaUtils'\r\nimport lodash from 'lodash'\r\n\r\nconst MyList = styled(List)({\r\n    minWidth: 'max-content'\r\n});\r\n\r\nconst MyListItem = styled(ListItem)({\r\n    padding: '0 0 0 10px'\r\n});\r\n\r\nconst MyListItemText = styled(ListItemText)({\r\n    fontSize: '0.9em',\r\n    padding: '0 0 0 0',\r\n});\r\n\r\nconst MyCheckbox = styled(Checkbox)({\r\n    padding: '0 0 0 0'\r\n});\r\n\r\nexport class TagList extends Component<TagListProps> {\r\n\r\n    usedTags = [] as MetaTag[]\r\n    selectedTags = [] as MetaTag[]\r\n\r\n    state = {\r\n        showLocalOrCentral: true,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({showLocalOrCentral: false})\r\n        this.refreshView();\r\n    };\r\n\r\n    refreshView() {\r\n        this.usedTags = [] as MetaTag[]\r\n        if (this.state.showLocalOrCentral) {\r\n            MetaUtils.getLocalUsedTags()\r\n                .then(foundTags => {\r\n                    this.usedTags.push(...foundTags as MetaTag[]);\r\n                    this.setState({ loading: false })\r\n                })\r\n        }\r\n\r\n        if (!this.state.showLocalOrCentral) {\r\n            MetaUtils.getCentralUsedTags()\r\n                .then(foundTags => {\r\n                    if (foundTags !== undefined) {\r\n                        this.usedTags.push(...foundTags as MetaTag[]);\r\n                        this.setState({ loading: false })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    //Select a tag to load related Metas. Target is MetaUtils.getLocalMetaList\r\n    handleClick(metaTag: MetaTag) {\r\n        //event.preventDefault();\r\n        const i: number = this.selectedTags.indexOf(metaTag)\r\n        i !== -1\r\n            ? this.selectedTags.splice(i, 1)\r\n            : this.selectedTags.push(metaTag)\r\n        this.props.handleSubmit(this.selectedTags);\r\n        this.forceUpdate() //CheckBox update\r\n    }\r\n    \r\n\r\n    //local/central\r\n    onChange() {\r\n        this.selectedTags = []\r\n        this.setState({ showLocalOrCentral: !this.state.showLocalOrCentral });\r\n        this.setState({ loading: true })\r\n        this.refreshView()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    Local\r\n                    <Switch\r\n                        checked={this.state.showLocalOrCentral}\r\n                        onChange={() => { this.onChange() }}\r\n                        color=\"default\"\r\n                    />\r\n                    Central\r\n                </div>\r\n                {this.state.loading ? \"Loading ...\" : this.PrintList()}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    PrintList = () => {\r\n        if (!this.state.loading) {\r\n            this.usedTags = lodash.sortBy(this.usedTags, ['tagType', 'value']);\r\n            return (\r\n                < MyList className='leftPane' >\r\n                    {this.usedTags.map(tag => {\r\n                        const itemColor = {\r\n                            color: tag.published ? onServerColor : 'black'\r\n                        };\r\n                        return (\r\n                            <MyListItem\r\n                                key={tag.value}\r\n                                role={undefined}\r\n                                dense button\r\n                            >\r\n                                <MyCheckbox\r\n                                    color=\"primary\"\r\n                                    onChange={e => this.handleClick(tag)}\r\n                                    checked={this.selectedTags.find(elt => tag === elt) !== undefined}\r\n                                />\r\n                                <MyListItemText\r\n                                    id={tag.value}\r\n                                    onClick={e => this.handleClick(tag)}>\r\n                                    <span style={itemColor}>{`${tag.tagType}:${tag.value}`}</span>\r\n                                </MyListItemText>\r\n                            </MyListItem>\r\n                        )\r\n                    })\r\n                    }\r\n                </MyList >\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface TagListOwnProps {\r\n}\r\n\r\ninterface StateProps {\r\n    //loading: boolean\r\n}\r\n\r\ninterface DispatchProps {\r\n    handleSubmit(selectedTags: MetaTag[]): void;\r\n}\r\n\r\ninterface TagListProps extends TagListOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: TagListOwnProps): DispatchProps => {\r\n    return {\r\n        handleSubmit: (selectedTags: MetaTag[]) => {\r\n            dispatch(getMetaList(selectedTags));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TagList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './File.css';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport { styled } from '@material-ui/styles';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { FileItem, Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst MyListItem = styled(ListItem)({\r\n    padding: '0 16px 0px 16px',\r\n});\r\n\r\nconst MyListItemText = styled(ListItemText)({\r\n    fontSize: '4.5rem',\r\n});\r\n\r\n\r\nclass File extends Component<FileProps> {\r\n\r\n    render() {\r\n        //const classes = useStyles();\r\n        const { isSelected, item, handleClickOnName, handleClickOnFolder, handleDoubleClick, handleContextMenu } = this.props;\r\n        const iconStyle = {\r\n            backgroundColor: isSelected ? blue['A200'] : undefined\r\n        };\r\n        const realSize = (item instanceof FileItem) ? item.getDisplaySize() : null;\r\n        return (\r\n            <div className=\"File\" data-selected={isSelected}>\r\n                <MyListItem>\r\n                    <ListItemIcon>\r\n                        <div style={iconStyle} onClick={handleClickOnFolder} >\r\n                            {(item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </div>\r\n                    </ListItemIcon>\r\n                    <MyListItemText className=\"filename\" primary={item.getDisplayName()} secondary={realSize}\r\n                        onClick={handleClickOnName} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu} />\r\n                    <Divider absolute />\r\n                </MyListItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface FileOwnProps {\r\n    item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClickOnName(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleClickOnFolder(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface FileProps extends FileOwnProps, StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: FileOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.items.selected.includes(ownProps.item)\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: FileOwnProps): DispatchProps => {\r\n    return {\r\n\r\n        handleDoubleClick: () => {\r\n            const item = ownProps.item;\r\n\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(ownProps.item));\r\n            }\r\n\r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClickOnName: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([ownProps.item]));\r\n            }\r\n        },\r\n        handleClickOnFolder: () => {\r\n            const item = ownProps.item;\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(File);\r\n","import React from 'react';\r\nimport './FileListEmptyMessage.css';\r\n\r\nexport default function FileListEmptyMessage() {\r\n    return (\r\n        <div className=\"FileListEmptyMessage\">\r\n            No files in this folder\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport File from '../File/File'; \r\nimport FileListEmptyMessage from './FileListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\nimport './FileList.css';\r\nimport { Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass FileList extends Component<FileListProps> {\r\n    render() {\r\n        const { items, isLoading } = this.props;\r\n        const itemComponents = items.map((item, key) => {\r\n            return <File item={item} key={key} />;\r\n        });\r\n\r\n        return <div className=\"FileList\">\r\n            { isLoading ? \r\n                <Loader /> : \r\n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\ninterface FileListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const items = state.items.inCurFolder\r\n        .filter(item => filterMatch(item.getDisplayName(), state.items.filter));\r\n\r\n    return {\r\n        items,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileList);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './Meta.css';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { styled } from '@material-ui/styles';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport { FileItem, Item } from '../../Api/Item';\r\nimport { Meta, onServerColor } from '../../Api/MetaUtils';\r\n\r\n\r\nconst MyListItem = styled(ListItem)({\r\n    padding: '0 16px 0px 16px'\r\n});\r\n\r\nclass MetaRow extends Component<MetaProps> {\r\n\r\n    render() {\r\n        const { isSelected, meta, handleClickOnName, handleDoubleClick, handleContextMenu } = this.props;\r\n        let tagList = '' as string\r\n        let itemColor = { color: 'black' }\r\n        meta.tags.forEach(tag => {\r\n            tag.published && itemColor.color === 'black' \r\n            ? itemColor = { color: onServerColor } \r\n            : itemColor = { color: 'black' }\r\n\r\n            if (tagList !== '') tagList += ` - ` \r\n            tagList += `${tag.tagType}:${tag.value}`\r\n        })\r\n\r\n        tagList = ` (${tagList})`\r\n\r\n        return (\r\n            <div className=\"File\" data-selected={isSelected}>\r\n                <MyListItem>\r\n                    <ListItemText\r\n                        onClick={handleClickOnName} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu}\r\n                    >\r\n                        <span style={itemColor}>{`${meta.pathName.concat(tagList)}`}</span>\r\n                    </ListItemText>\r\n                </MyListItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface MetaOwnProps {\r\n    meta: Meta;\r\n    item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClickOnName(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface MetaProps extends MetaOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: MetaOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.metas.selected.includes(ownProps.meta)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: MetaOwnProps): DispatchProps => {\r\n    const meta = ownProps.meta;\r\n    const item = new Item('https://' + meta.hostName + meta.pathName);\r\n\r\n    return {\r\n        handleDoubleClick: () => {\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(item))//ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(item))//ownProps.item));\r\n            }\r\n\r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClickOnName: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(item))//ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(item))//ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([item]))//ownProps.item]));\r\n            }\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetaRow);\r\n","import React from 'react';\r\nimport './MetaListEmptyMessage.css';\r\n\r\nexport default function MetaListEmptyMessage() {\r\n    return (\r\n        <div className=\"MetaListEmptyMessage\">\r\n            No files or folders for the selected tags.\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MetaRow from './MetaRow'; \r\nimport FileListEmptyMessage from './MetaListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\n//import { getMetaList} from '../../Actions/Actions';\r\nimport './Meta.css';\r\nimport { Meta } from '../../Api/MetaUtils';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport './Meta.css';\r\n\r\nclass MetaList extends Component<MetaListProps> {\r\n    render() {\r\n        const { metas, isLoading } = this.props;\r\n        const itemComponents = metas.map((meta, key) => {\r\n            return <MetaRow \r\n                key ={meta.hostName + meta.pathName}\r\n                meta={meta}  />;\r\n        });\r\n\r\n        return <div className=\"MetaList\">\r\n            { isLoading ? \r\n                <Loader /> : \r\n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    metas: Meta[];\r\n    isLoading: boolean;\r\n}\r\ninterface MetaListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const metas = state.metas.inCurFolder\r\n        .filter(meta => filterMatch(meta.hostName + meta.pathName, state.metas.filter));\r\n\r\n    return {\r\n        metas,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetaList);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TreeView from './Components/TreeView/TreeView';\r\nimport TagList from './Components/TagList/TagList';\r\nimport FileList from './Components/FileList/FileList';\r\nimport MetaList from './Components/Meta/MetaList';\r\n\r\nimport './TreeAndTagList.css'\r\n\r\n\r\nexport default class TreeAndTagList extends Component<{}> {\r\n\r\n    state = {\r\n        showTreeOrTag: true\r\n    }\r\n\r\n    onChange() {\r\n        this.setState({\r\n            showTreeOrTag: !this.state.showTreeOrTag\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='treeAndTagHeader'>\r\n                    Tags\r\n                    <Switch\r\n                        checked={this.state.showTreeOrTag}\r\n                        onChange={() => { this.onChange() }}\r\n                        color=\"default\"\r\n                    />\r\n                    Tree\r\n                </div>\r\n                <div>\r\n                    {this.state.showTreeOrTag ?\r\n                        <div className='bodyPlace'>\r\n                            <div className='leftView'><TreeView /></div>\r\n                            <FileList />\r\n                        </div>\r\n                        :\r\n                        <div className='bodyPlace'>\r\n                            <div className='leftView'><TagList /></div>\r\n                            <MetaList />\r\n                        </div>\r\n                    }\r\n                </div >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFolderAction(props: CreateFolderActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CreateNewFolderIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create folder\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFolderActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FOLDER));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFolderAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFileAction(props: CreateFileActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <InsertDriveFileIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create file\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadFileAction(props: UploadFileActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload files\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FolderSharedIcon from '@material-ui/icons/FolderSharedOutlined';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction ChooseLocationAction(props: ChooseLocationActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <FolderSharedIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Choose root location\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ChooseLocationActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChooseLocationAction);\r\n","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { connect } from 'react-redux';\r\nimport CreateFolderAction from '../ContextMenu/ContextMenuActions/CreateFolderAction';\r\nimport CreateFileAction from '../ContextMenu/ContextMenuActions/CreateFileAction';\r\nimport UploadFileAction from '../ContextMenu/ContextMenuActions/UploadFileAction';\r\nimport ChooseLocationAction from '../ContextMenu/ContextMenuActions/ChooseLocationAction';\r\n\r\nclass ThreeDotsMenu extends React.Component {\r\n  state = {\r\n    anchorEl: null as HTMLElement|null,\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n\r\n    return (\r\n      <div style={{marginLeft:'1em'}}>\r\n        <IconButton color=\"inherit\" \r\n          aria-label=\"More\"\r\n          aria-owns={Boolean(anchorEl) ? 'long-menu' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={this.handleClick}>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n\r\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose}>\r\n          <CreateFolderAction handleClose={this.handleClose} />\r\n          <CreateFileAction handleClose={this.handleClose} />\r\n          <UploadFileAction handleClose={this.handleClose} />\r\n          <ChooseLocationAction handleClose={this.handleClose} />\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreeDotsMenu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport './BreadcrumbText.css';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  lastPath: {\r\n    display: 'block',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  paths: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }\r\n  }\r\n});\r\n\r\nclass BreadcrumbText extends Component<BreadcrumbTextProps> {\r\n\r\n    render() {\r\n        const { classes, handleClickPath, path, rootTitle, handleGoBack, canGoBack } = this.props;\r\n\r\n        const separator = <span>&gt;</span>;\r\n        const rootPath = <span onClick={() => handleClickPath(-1)} data-index={0}>\r\n            { rootTitle } { path.length ? separator : '' }\r\n        </span>;\r\n        const lastPath = [...path].pop() || rootTitle;\r\n\r\n        const directories = path.map((dir, index) => {\r\n            return <span key={index} data-index={index} onClick={(e) => handleClickPath(index)}>\r\n                <span>{dir}</span> { path.length -1 !== index ? separator : '' }&nbsp;\r\n            </span>\r\n        });\r\n\r\n        return (\r\n            <div className=\"BreadcrumbText\">\r\n                <div className={classes.lastPath}>\r\n                    <Button onClick={handleGoBack} color=\"inherit\" type=\"button\" style={{display: canGoBack ? 'inline-flex' : 'none'}}>\r\n                        <KeyboardArrowLeftIcon />\r\n                    </Button>\r\n                    {lastPath}\r\n                </div>\r\n                <div className={classes.paths}>{rootPath} {directories}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BreadcrumbTextProps extends WithStyles<typeof styles> {\r\n    handleClickPath(index: number): void;\r\n    handleGoBack(): void;\r\n    canGoBack: boolean;\r\n    path: string[];\r\n    rootTitle: string;\r\n\r\n}\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(BreadcrumbText));\r\n","import React, { ChangeEvent } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { connect } from 'react-redux';\r\nimport { refreshItemList, moveFolderUpwardsAndRefresh, filterItems, MyDispatch } from '../../Actions/Actions';\r\nimport ThreeDotsMenu from './ThreeDotsMenu';\r\nimport BreadcrumbText from '../Breadcrumb/BreadcrumbText';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: '4.3em'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'block', // was none\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n      display: 'block'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 100,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props: SearchAppBarProps) {\r\n  const { classes, path, filter, moveUpwards, canGoBack, handleChange, handleRefresh } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            <BreadcrumbText \r\n                path={path} \r\n                handleClickPath={index => moveUpwards(path.length - index - 1)} \r\n                handleGoBack={() => moveUpwards(1)}\r\n                canGoBack={canGoBack}\r\n                rootTitle=\"Root\"\r\n            />\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              value={filter}\r\n              onChange={handleChange}\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n            />\r\n          </div>\r\n          <IconButton color=\"inherit\" aria-label=\"Refresh\" onClick={handleRefresh}>\r\n            <RefreshIcon/>\r\n          </IconButton>\r\n          <ThreeDotsMenu />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface StateProps {\r\n  filter: string;\r\n  path: string[];\r\n  canGoBack: boolean; \r\n}\r\ninterface DispatchProps {\r\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\r\n  moveUpwards(n: number): void;\r\n  handleRefresh(): void;\r\n}\r\ninterface SearchAppBarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        filter: state.items.filter,\r\n        path: state.path,\r\n        canGoBack: state.path.length > 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleChange: (event) => {\r\n            dispatch(filterItems(event.currentTarget.value));\r\n        },\r\n        moveUpwards: (n) => {\r\n          dispatch(moveFolderUpwardsAndRefresh(n));\r\n        },\r\n        handleRefresh: () => dispatch(refreshItemList())\r\n    };\r\n};\r\n\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(SearchAppBar));\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndDisplayFile, displaySelectedMediaFile, loadAndEditFile, enterFolderByItem, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { FileItem, FolderItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            const item = selectedItems[0];\r\n\r\n            if (item instanceof FolderItem)\r\n                dispatch(enterFolderByItem(item));\r\n            else if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { removeItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction RemoveAction(props: RemoveActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <DeleteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Remove\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RemoveActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(removeItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Move\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.MOVE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n//import { DIALOGS, Action } from '../../../Actions/actionTypes';\r\nimport { DIALOGS} from '../../../Actions/actionTypes';\r\n\r\nfunction CopyAction(props: CopyActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <FileCopyIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Copy\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CopyActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.COPY));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditFile, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditTags, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction EditTagsAction(props: EditTagsActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit tags\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface EditTagsActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditTags(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTagsAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WrapTextIcon from '@material-ui/icons/WrapText';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <WrapTextIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Rename\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.RENAME));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport { zipAndUpload, MyDispatch } from '../../../Actions/Actions';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction ZipAction(props: ZipActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <ArchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Zip here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ZipActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(zipAndUpload(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\r\nimport { extractZipFile, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExtractAction(props: ExtractActionProps) {\r\n    const {handleClick, selectedItems} = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <UnarchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Extract here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExtractActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(extractZipFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { downloadItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction DownloadAction(props: DownloadActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudDownloadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                {(selectedItems.length === 1 && selectedItems[0] instanceof FileItem) ? \r\n                    'Download'\r\n                    : 'Download Zip'\r\n                }\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface DownloadActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(downloadItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { openInNewTab, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenInNewTabAction(props: OpenInNewTabActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <LinkIcon   />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open in new Tab\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenInNewTabActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(openInNewTab(selectedItems[0]));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenInNewTabAction);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ContextMenu.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport OpenAction from './ContextMenuActions/OpenAction';\r\nimport RemoveAction from './ContextMenuActions/RemoveAction';\r\nimport MoveAction from './ContextMenuActions/MoveAction';\r\nimport CopyAction from './ContextMenuActions/CopyAction';\r\nimport EditAction from './ContextMenuActions/EditAction';\r\nimport EditTagsAction from './ContextMenuActions/EditTagsAction';\r\nimport RenameAction from './ContextMenuActions/RenameAction';\r\nimport ZipAction from './ContextMenuActions/ZipAction';\r\nimport ExtractAction from './ContextMenuActions/ExtractAction';\r\nimport DownloadAction from './ContextMenuActions/DownloadAction';\r\nimport OpenInNewTabAction from './ContextMenuActions/OpenInNewTabAction';\r\nimport UploadFileAction from './ContextMenuActions/UploadFileAction';\r\nimport { Item, FileItem, FolderItem } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass ContextMenu extends Component<ContextMenuProps> {\r\n\r\n    render() {\r\n        const { acts, open, x, y } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={{ top: y, left: x }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    onClose={() => { }}\r\n                    PaperProps={{ style: { width: 190 } }}>\r\n                    {acts.includes('open') && <OpenAction />}\r\n                    {acts.includes('openInNewTab') && <OpenInNewTabAction />}\r\n                    {acts.includes('download') && <DownloadAction />}\r\n                    {acts.includes('upload') && <UploadFileAction />}\r\n                    {acts.includes('compress') && <ZipAction />}\r\n                    {acts.includes('extract') && <ExtractAction />}\r\n                    {acts.includes('edit') && <EditAction />}\r\n                    {acts.includes('editTags') && <EditTagsAction />}\r\n                    {acts.includes('copy') && <CopyAction />}\r\n                    {acts.includes('move') && <MoveAction />}\r\n                    {acts.includes('rename') && <RenameAction />}\r\n                    {acts.includes('remove') && <RemoveAction />}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    acts: string[];\r\n    open: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\ninterface ContextMenuProps extends StateProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        x: state.contextMenu.x,\r\n        y: state.contextMenu.y,\r\n        open: state.contextMenu.open,\r\n        acts: getActionsForMultipleItems(state.items.selected),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\n\r\n/**\r\n * Get available actions for multiple items\r\n */\r\nconst getActionsForMultipleItems = (items: Item[]): string[] => {\r\n    return items.length === 1 ?\r\n        getActionsForItem(items[0])\r\n        : [\r\n            'copy',\r\n            'move',\r\n            'remove',\r\n            'download',\r\n            'compress',\r\n        ];\r\n};\r\n\r\n/**\r\n * Get available actions for an item\r\n */\r\nconst getActionsForItem = (item: Item) => {\r\n    const commonActions = [\r\n        'openInNewTab',\r\n        'copy',\r\n        'move',\r\n        'rename',\r\n        'remove',\r\n        'download',\r\n        'editTags'\r\n    ];\r\n    return [\r\n        ...commonActions,\r\n        ...((item instanceof FileItem) ?\r\n            getActionsForFile(item)\r\n            : getActionsForFolder(item))\r\n    ];\r\n};\r\n\r\n/**\r\n * Get available file specific actions\r\n */\r\nconst getActionsForFile = (file: FileItem) => {\r\n    const actions = [];\r\n    file.isEditable() && actions.push('edit');\r\n    //actions.push('editTags');\r\n    file.isExtractable() && actions.push('extract');\r\n    (file.isImage() || file.isMedia()) && actions.push('open');\r\n\r\n    return actions;\r\n};\r\n\r\n/**\r\n * Get available folder specific actions\r\n */\r\nconst getActionsForFolder = (folder: FolderItem) => {\r\n    return [\r\n        'open',\r\n        'compress',\r\n        'upload'\r\n    ];\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContextMenu);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createBrowserHistory, History, Location } from \"history\";\r\nimport { MyDispatch, setHost, enterFolder } from \"../../Actions/Actions\";\r\nimport { AppState } from \"../../Reducers/reducer\";\r\n\r\nclass HistoryHandler extends Component<HistoryHandlerProps> {\r\n    private history: History<LocationState>;\r\n    private states: LocationState[];\r\n    private stateIndex: number;\r\n\r\n    constructor(props: HistoryHandlerProps) {\r\n        super(props);\r\n\r\n        this.states = [];\r\n        this.stateIndex = -1;\r\n        this.history = createBrowserHistory();\r\n        this.history.listen((location, action) => {\r\n            switch(action) {\r\n                case 'POP':\r\n                    this.handlePop(location);\r\n                    break;\r\n                case 'REPLACE':\r\n                    this.handleReplace(location);\r\n                    break;\r\n                case 'PUSH':\r\n                    this.handlePush(location);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { host, path } = this.props;\r\n\r\n        // Don't update history when the host is invalid\r\n        if (host === null)\r\n            return;\r\n        if (this.states.length === 0 || this.stateIndex < 0)\r\n            return this.updateBrowserHistory();\r\n        \r\n        const prevState = this.states[this.stateIndex];\r\n\r\n        if (!locationsEqual({ host, path }, prevState))\r\n            this.updateBrowserHistory();\r\n    }\r\n\r\n    updateBrowserHistory() {\r\n        const { host, path } = this.props;\r\n        const url = encodeURI(`${host}/${path.join('/')}`);\r\n        const newState = {\r\n            host: host || '',\r\n            path,\r\n            index: this.stateIndex + 1,\r\n        };\r\n\r\n        this.history.push(`?url=${url}`, newState);\r\n    }\r\n\r\n    handlePop(location: Location<LocationState>) {\r\n        this.stateIndex = location.state.index;\r\n        this.props.handlePop(location);\r\n    }\r\n\r\n    handleReplace(location: Location<LocationState>) {\r\n        this.states[this.stateIndex] = location.state;\r\n    }\r\n\r\n    handlePush(location: Location<LocationState>) {\r\n        this.states = [...this.states.slice(0, ++this.stateIndex), location.state];\r\n    }\r\n\r\n    render() {\r\n        // This Component doesn't provide anything to the DOM\r\n        // The only reason it is a component is to get access to the state and dispatch\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface LocationState extends MyLocation {\r\n    index: number;\r\n}\r\ninterface MyLocation {\r\n    host: string;\r\n    path: string[];\r\n}\r\n\r\n\r\ninterface StateProps {\r\n    host: string | null;\r\n    path: string[];\r\n}\r\ninterface DispatchProps {\r\n    handlePop(location: Location<LocationState>): void;\r\n}\r\ninterface HistoryHandlerProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => ({\r\n    host: state.account.host,\r\n    path: state.path\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handlePop: (location: Location<LocationState>) => {\r\n            let host = '';\r\n            let path: string[] = [];\r\n\r\n            if (location && typeof location.state !== typeof undefined) {\r\n                ({ host, path } = location.state);\r\n            }\r\n            else {\r\n                const params = new URLSearchParams(location.search.substr(1));\r\n                const url = params.get('url');\r\n                if (url !== null) {\r\n                    ({ host, path } = getLocationObjectFromUrl(url));\r\n                }\r\n            }\r\n            dispatch(setHost(host));\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport const getLocationObjectFromUrl = (urlString: string) => {\r\n    const url = new URL(urlString);\r\n    const host = url.origin;\r\n    const path = url.pathname.split('/').filter(val => val !== '');\r\n\r\n    return {\r\n        host,\r\n        path\r\n    };\r\n}\r\n\r\nconst locationsEqual = (first: MyLocation, second: MyLocation) => {\r\n    return first.host === second.host\r\n           && first.path.length === second.path.length\r\n           && first.path.every((val, index) => val === second.path[index]);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryHandler);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport { solidLogin, setHost, enterFolder, solidLogout, clearCache, MyDispatch, setErrorMessage, closeDialog } from '../../../Actions/Actions';\r\nimport { getLocationObjectFromUrl } from '../../HistoryHandler/HistoryHandler';\r\nimport { DialogButtonClickEvent, DialogDispatchProps, DialogStateProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ChooseLocationProps> {\r\n    state = {\r\n        location: '',\r\n    };\r\n\r\n    componentWillReceiveProps(props: ChooseLocationProps) {\r\n        const { isLoggedIn, webId } = props;\r\n        const params = new URLSearchParams(document.location.search.substr(1));\r\n        const encodedUrl = params.get('url');\r\n\r\n        if (encodedUrl !== null) {\r\n            const location = decodeURI(encodedUrl);\r\n            this.setState({ location });\r\n        }\r\n        else if (isLoggedIn && webId) {\r\n            const location = (new URL(webId)).origin;\r\n            this.setState({ location });\r\n        }\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\r\n        const targetForm = event.currentTarget.form;\r\n        if (targetForm) {\r\n            const input = targetForm.querySelector('input');\r\n            if (input) {\r\n                const location = input.value;\r\n                this.setState({ location });\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Couldn't find location input\");\r\n    }\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        this.props.handleSubmit(event, { location: this.state.location });\r\n    }\r\n\r\n    render() {\r\n        let { location } = this.state;\r\n        location = location ? location : '';\r\n        const { handleClose, handleLogin, handleLogout, open, isLoggedIn, webId } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-choose-location\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-choose-location\">Choose the storage location</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            {!isLoggedIn ?\r\n                                \"If you want to access private resources, please login with the button below.\"\r\n                                : \"Logged in as \" + webId + \".\"\r\n                            }\r\n                        </Typography>\r\n                        {!isLoggedIn ?\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLogin}>Login</Button>\r\n                            : <Button variant=\"outlined\" onClick={handleLogout}>Logout</Button>\r\n                        }\r\n\r\n                        <Typography variant=\"body1\">\r\n                            Please enter the directory you want to open below.\r\n                    </Typography>\r\n                        <TextField autoFocus fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Storage Location\"\r\n                            variant=\"outlined\"\r\n                            onChange={this.handleChange.bind(this)}\r\n                            value={location} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Open directory\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    webId: string | null;\r\n    isLoggedIn: boolean;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleLogin(event: DialogButtonClickEvent): void;\r\n    handleLogout(event: DialogButtonClickEvent): void;\r\n    handleSubmit(event: DialogButtonClickEvent, { location }: { location: string }): void;\r\n}\r\ninterface ChooseLocationProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CHOOSE_LOCATION,\r\n        webId: state.account.webId,\r\n        isLoggedIn: state.account.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n        },\r\n        handleLogin: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogin());\r\n        },\r\n        handleLogout: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogout());\r\n        },\r\n        handleSubmit: (event, { location }) => {\r\n            event.preventDefault();\r\n            if (!location)\r\n                return dispatch(setErrorMessage(\"Please enter the folder which should be opened\"));\r\n\r\n            const { host, path } = getLocationObjectFromUrl(location);\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n            dispatch(setHost(host));\r\n            dispatch(clearCache());\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { closeDialog, MyDispatch, openDialog } from '../../../Actions/Actions';\r\nimport { closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ContentProps> {\r\n\r\n    state = {\r\n        lastBlobUrl: null,\r\n        content: '...',\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n        return (\r\n          <div style={{marginLeft:'1em'}}>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-content\" fullWidth={true} maxWidth={'sm'}>\r\n              <DialogTitle id=\"form-dialog-content\">Viewing file </DialogTitle>\r\n              <DialogContent>\r\n                <img src={this.props.blobUrl} alt=\"\" style={{maxWidth: '100%'}}/>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    blobUrl: string | undefined;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {}\r\ninterface ContentProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CONTENT,\r\n        blobUrl: state.blob || undefined\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CONTENT));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport Plyr from 'react-plyr';\r\nimport 'plyr/dist/plyr.css';\r\nimport { FileItem } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<MediaProps> {\r\n    render() {\r\n        const { file, handleClose, open } = this.props;\r\n        const url = file ? file.url : undefined;\r\n        const type = file ? (file.isVideo() ? 'video' : 'audio') : undefined;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-display-media\" fullWidth={true} maxWidth={'lg'}>\r\n                <DialogTitle id=\"form-dialog-display-media\">Display Media</DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        file ?\r\n                            (\r\n                                <div>\r\n                                    <p>Playing {file.name}</p>\r\n                                    <Plyr type={type} /*TODO: provider={provider}*/ url={url} iconUrl=\"./vendor/plyr/plyr.svg\" />\r\n                                </div>\r\n                            )\r\n                            : <p>No media file opened</p>\r\n                            \r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    file?: FileItem;\r\n}\r\ninterface MediaProps extends StateProps, DialogDispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const open = state.visibleDialogs.MEDIA;\r\n\r\n    const file = state.items.selected[0];   \r\n\r\n    if (file instanceof FileItem) {\r\n            return {\r\n                open,\r\n                file,\r\n            };\r\n    }\r\n    return { open };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MEDIA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateTextFile, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nclass FormDialog extends Component<EditProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string|null,\r\n        content: null as string|null,\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(t => {\r\n                this.setState({\r\n                    content: t\r\n                });\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const content = textField.value;\r\n            this.props.handleSubmit(event, {\r\n                itemName: item.name,\r\n                content\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const itemName = item ? item.getDisplayName() : 'No item selected';\r\n        const textAreaStyle = {\r\n            width: '100%',\r\n            minHeight: '300px'\r\n        };\r\n        const textArea = <textarea style={textAreaStyle} defaultValue={this.state.content || ''} ref={this.textField} />;\r\n\r\n        return (\r\n            <div>\r\n              <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-edit\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-edit\">Editing file xx: {itemName} </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>\r\n                      {this.state.loading ? 'Loading...' : textArea}\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Close\r\n                    </Button>\r\n                    <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                      Update\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, content }: { itemName: string, content: string }): void;\r\n}\r\ninterface EditProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDIT, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || ''\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n        },\r\n        handleSubmit: (event, { itemName, content }) => {\r\n            dispatch(updateTextFile(itemName, content));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","export default function CallJsonP(callback1, searchedString) {\r\n    const autoComplete = `http://suggestqueries.google.com/complete/search?client=firefox&q=${searchedString}`\r\n    jsonp(\r\n        autoComplete,\r\n        (response) => callback1(response)\r\n    );\r\n}\r\n\r\nconst jsonp = (url, callback2) => {\r\n    const callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\r\n    window[callbackName] = function (data) {\r\n        delete window[callbackName];\r\n        document.body.removeChild(script);\r\n        callback2(data);\r\n    };\r\n\r\n    var script = document.createElement('script');\r\n    script.src =\r\n        url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\r\n    document.body.appendChild(script);\r\n};\r\n","import React from 'react';\r\nimport MetaUtils, { Meta, MetaTag, onServerColor } from '../../../Api/MetaUtils';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport CallJsonP from '../../../Api/jsonp';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { styled } from '@material-ui/styles';\r\nimport './Autocomplete.css'\r\n\r\ninterface MultiValueLabelProps {\r\n    children: {},\r\n    data: MetaTag\r\n}\r\n\r\n//Each tag is a MultiValueLabel in Autocomplete componennt\r\nclass MultiValueLabel extends React.Component<MultiValueLabelProps> {\r\n    //Click a tag to publish it\r\n    tagHandleClick() {\r\n        this.props.data.published = !this.props.data.published\r\n        this.forceUpdate()\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        const styles = {\r\n            color: data.published ? onServerColor : 'black'\r\n        };\r\n\r\n        return (\r\n            <div id={data.value}\r\n                style={styles}\r\n                onClick={this.tagHandleClick.bind(this)}>\r\n                {data.tagType}:{data.value}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst MyCheckbox = styled(Checkbox)({\r\n    padding: '0 0 0 0'\r\n});\r\n\r\nconst MyFormControlLabel = styled(FormControlLabel)({\r\n    padding: '0 15px 5px 0'\r\n});\r\nconst MyRadio = styled(Radio)({\r\n    padding: '0 20px 5px 0px'\r\n});\r\n\r\ninterface PopupProps {\r\n    [x: string]: any,\r\n    meta: Meta,\r\n    setSaveText(saveTextLevel: number): void;\r\n}\r\n\r\ninterface PopupState {\r\n    suggests: Suggestion[]\r\n}\r\n//Suggestions (options in component) need label additional property\r\ninterface Suggestion extends MetaTag {\r\n    label: string\r\n}\r\n\r\nexport default class AutocompleteTag extends React.Component<PopupProps, PopupState> {\r\n\r\n    constructor(props: PopupProps) {\r\n        super(props);\r\n        this.state = { suggests: [] };\r\n        this.creatableSelect = React.createRef();\r\n        this.focusCreatableSelect = this.focusCreatableSelect.bind(this);\r\n    }\r\n\r\n    creatableSelect = {} as React.RefObject<PopupProps>\r\n    source = 'local'\r\n    lastStr = ''\r\n\r\n    focusCreatableSelect() {\r\n        if (this.creatableSelect.current) this.creatableSelect.current.focus();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.focusCreatableSelect()\r\n    }\r\n\r\n    //select a suggestion or delete a tag: items parameter is the list of ALL selected values\r\n    handleChangeTagList(items: Suggestion[]) {\r\n        this.props.meta.tags = items\r\n        this.setSaveTextParameter()\r\n        this.forceUpdate()\r\n    }\r\n\r\n    //Called from here when modifying the list of tags and send to parent\r\n    setSaveTextParameter() {\r\n        let saveTextLevel = 0\r\n        if (this.props.meta.tags) {\r\n            this.props.meta.tags.forEach((tag) => {\r\n                if (saveTextLevel === 0) {\r\n                    if (tag.published) saveTextLevel = 3\r\n                    if (!tag.published) saveTextLevel = 1\r\n                }\r\n                if ((saveTextLevel === 1 && tag.published)\r\n                    || (saveTextLevel === 3 && !tag.published)) {\r\n                    saveTextLevel = 2\r\n                }\r\n            })\r\n        }\r\n        this.props.setSaveText(saveTextLevel)\r\n    }\r\n\r\n    //Change source of suggestions for tags\r\n    handleRadioChange = (event: React.ChangeEvent<{}>, value: string) => {\r\n        this.source = value\r\n        this.handleChange(this.lastStr)\r\n        this.forceUpdate()\r\n    };\r\n\r\n    //type a letter. items in suggestions are Metatag\r\n    handleChange(str: string) {\r\n        if (str !== \"\") {\r\n            this.lastStr = str\r\n            let retVal = [] as Suggestion[]\r\n            if (this.source === 'google') {\r\n                CallJsonP((suggests: any[]) => {\r\n                    //suggests[1] creates a new Io\r\n                    suggests[1].forEach((item: string) => {\r\n                        const suggestion: Suggestion = { 'tagType': 'FreeTag', 'value': item, published: false, 'label': item }\r\n                        retVal.push(suggestion)\r\n                    })\r\n                    this.setState({ suggests: retVal })\r\n                }\r\n                    , str);\r\n            }\r\n\r\n            if (this.source === 'local') {\r\n                MetaUtils.getLocalUsedTags()\r\n                    .then((foundTags: MetaTag[]) => {\r\n                        foundTags.forEach(tag => {\r\n                            const suggestion: Suggestion = { 'tagType': 'FreeTag', 'value': tag.value, published: false, 'label': tag.value }\r\n                            retVal.push(suggestion);\r\n                        })\r\n                        this.setState({ suggests: retVal })\r\n                    })\r\n            }\r\n\r\n            if (this.source === 'central') {\r\n                MetaUtils.getCentralUsedTags()\r\n                    .then((foundTags: MetaTag[]) => {\r\n                        foundTags.forEach(tag => {\r\n                            const suggestion: Suggestion = { 'tagType': 'FreeTag', 'value': tag.value, published: false, 'label': tag.value }\r\n                            retVal.push(suggestion);\r\n                        })\r\n                        this.setState({ suggests: retVal })\r\n                    })\r\n            }\r\n        }\r\n        //Also trigered when clikcing on item to make it published/not\r\n        this.setSaveTextParameter()\r\n    }\r\n\r\n    //set all to published\r\n    selectAllToCentral(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.props.meta.tags.forEach((tag) => {\r\n            tag.published = event.target.checked\r\n        })\r\n        this.setSaveTextParameter()\r\n        this.forceUpdate()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='bodyPlace'>\r\n                <div className='leftplace'>\r\n                    <FormControl>\r\n                        <RadioGroup aria-label=\"gender\" value={this.source} onChange={this.handleRadioChange}>\r\n                            <MyFormControlLabel value=\"local\" control={<MyRadio color=\"primary\" />} label=\"Local\" labelPlacement=\"start\" />\r\n                            <MyFormControlLabel value=\"central\" control={<MyRadio color=\"primary\" />} label=\"Central\" labelPlacement=\"start\" />\r\n                            <MyFormControlLabel value=\"google\" control={<MyRadio color=\"primary\" />} label=\"Google\" labelPlacement=\"start\" />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </div>\r\n                <div className='rightplace'>\r\n                    <div>\r\n                        <CreatableSelect\r\n                            ref={this.creatableSelect}\r\n                            components={{ MultiValueLabel }}\r\n                            options={this.state.suggests}\r\n                            value={this.props.meta.tags}\r\n                            isMulti\r\n                            className='creatableSelect'\r\n                            onChange={this.handleChangeTagList.bind(this)}\r\n                            onInputChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <MyCheckbox\r\n                            color=\"primary\"\r\n                            onChange={e => this.selectAllToCentral(e)}\r\n                        /> Publish all tags to central\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateMeta, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport MetaUtils, { Meta, MetaTag } from '../../../Api/MetaUtils';\r\nimport AutocompleteTag from './AutocompleteTag'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nclass FormDialog extends Component<EditTagsProps> {\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.setSaveText = this.setSaveText.bind(this)\r\n    }\r\n\r\n    //sent to TreeViewItem for expand/collapse handled here\r\n    setSaveText(saveTextLevel: number) {\r\n        if (saveTextLevel === 1) this.saveText = 'Save all to local'\r\n        if (saveTextLevel === 2) this.saveText = 'Save all to local and some to central'\r\n        if (saveTextLevel === 3) this.saveText = 'Save all to local and central'\r\n        this.setState({ saveText: this.saveText });\r\n    };\r\n\r\n    //Init mandatory as render sn invoked on left click on item, even before Edit tag is choosed\r\n    currentMeta = {} as Meta;\r\n    currentItem = {} as Item;\r\n    saveText = ''\r\n\r\n    componentDidUpdate() {\r\n        const itemUrl = new URL(this.currentItem.getUrl())\r\n        //In case this called on a item = file\r\n        //else we directly get the Meta\r\n        if (this.props.item\r\n            && (\r\n                this.currentMeta.hostName !== itemUrl.hostname\r\n                || this.currentMeta.pathName !== itemUrl.pathname\r\n            )) {\r\n            this.currentItem = this.props.item as Item\r\n            MetaUtils.getOrInitMeta(this.currentItem)\r\n                .then(response => {\r\n                    this.currentMeta = response;\r\n                })\r\n        }\r\n    }\r\n\r\n    //target function is MetaUtils.updateMeta\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        //cleanup new tags created with autocomplete properties (label and source)\r\n        let cleanedTags = [] as MetaTag[]\r\n        if (this.currentMeta.tags) {\r\n            this.currentMeta.tags.forEach(tag => {\r\n                cleanedTags.push({ 'tagType': 'FreeTag', 'value': tag.value, published: tag.published })\r\n            })\r\n        }\r\n        this.currentMeta.tags = cleanedTags\r\n        this.props.handleSubmit(event, this.currentMeta);\r\n        this.setState({ item: null })\r\n    }\r\n\r\n    handleClose = {}\r\n\r\n    //changes on mimeType\r\n    handleChange = (name: string) => (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (name === 'mimeType') this.currentMeta.mimeType = event.target.value\r\n        this.forceUpdate()\r\n    };\r\n\r\n    render() {\r\n        //handle close: Rdux, sent by store\r\n        const { handleClose, open, item } = this.props;\r\n\r\n        if (item) {\r\n            this.currentItem = item\r\n            this.handleClose = handleClose\r\n            let extension = '' as string\r\n            if (this.currentMeta && this.currentMeta.pathName) {\r\n                const spl = this.currentMeta.pathName.split('.') as string[]\r\n                if (spl.length > 1) extension = spl[1]\r\n            }\r\n\r\n            return (\r\n                <div id='1'>\r\n                    <Dialog id='2'\r\n                        fullScreen={false}\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"form-dialog-edit\"\r\n                        fullWidth={true} maxWidth={'sm'}\r\n                        PaperProps={{\r\n                            style: {\r\n                                overflow: 'visible'\r\n                            }\r\n                        }}\r\n                    >\r\n                        <form id='3 '>\r\n                            <DialogTitle\r\n                                id=\"form-dialog-edit\">Editing TAGS V2 : {this.currentItem.getDisplayName()}\r\n                            </DialogTitle>\r\n                            <DialogContent\r\n                                style={{ overflow: 'visible' }}\r\n                            >\r\n                                <AutocompleteTag\r\n                                    meta={this.currentMeta}\r\n                                    setSaveText={this.setSaveText}\r\n\r\n                                />\r\n\r\n                                {extension === ''\r\n                                    ? (\r\n                                        <div><br />\r\n                                            File has no extension, enter file type:&nbsp;\r\n                                            <FormControl>\r\n\r\n                                                <Select\r\n                                                    native\r\n                                                    value={this.currentMeta.mimeType}\r\n                                                    onChange={this.handleChange('mimeType')}\r\n                                                >\r\n                                                    <option value=\"\" />\r\n                                                    <option value={'text-plain'}>text-plain</option>\r\n                                                    <option value={'multipart/mixed'}>mixed</option>\r\n                                                    <option value={'image/jpeg}'}>image</option>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </div>\r\n                                    ) : (<div><br />Extension file : {extension}</div>)}\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                    Close\r\n                                </Button>\r\n                                <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                                    {this.saveText}\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    </Dialog>\r\n                </div >\r\n            );\r\n        } else return (null)\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    meta: Meta\r\n    item: Item\r\n    saveText: string\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, meta: Meta): void;\r\n}\r\n\r\ninterface EditTagsProps extends StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDITTAGS, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        meta: state.metas.selected[0],\r\n        item: state.items.selected[0],\r\n        saveText: ''\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDITTAGS));\r\n        },\r\n        handleSubmit: (event, meta) => {\r\n            dispatch(updateMeta(meta));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { createNewFolder, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { createNewFolder, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFolderProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const folderName = textField.value;\r\n            this.props.handleSubmit(event, { folderName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const { handleClose, handleSubmit, open } = this.props;\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-folder\">Create folder</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"Folder name\" type=\"text\" inputRef={this.textField} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { folderName }: { folderName: string }): void;\r\n}\r\ninterface CreateFolderProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FOLDER\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        },\r\n        handleSubmit: (event, { folderName }) => {\r\n            event.preventDefault();\r\n            dispatch(createNewFolder(folderName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { createFile, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { createFile, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFileProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const fileName = textField.value;\r\n            this.props.handleSubmit(event, { fileName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-file\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-file\">Create file</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"File name\" type=\"text\" inputRef={this.textField}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { fileName }: { fileName: string }): void;\r\n}\r\ninterface CreateFileProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FILE\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n        },\r\n        handleSubmit: (event, { fileName }) => {\r\n            event.preventDefault();\r\n            dispatch(createFile(fileName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","//import React, { Component, ChangeEvent, createRef } from 'react';\r\nimport React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { renameFile, renameFolder, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { FolderItem, Item } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nclass FormDialog extends Component<RenameProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const newName = textField.value;\r\n            this.props.handleSubmit(event, { item, newName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const previousName = item ? item.name : '';\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-create-folder\">Rename</DialogTitle>\r\n                  <DialogContent>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Item name\" type=\"text\" inputRef={this.textField} defaultValue={previousName} />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                      Save\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item?: Item;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item, newName }: { item: Item, newName: string }): void;\r\n}\r\ninterface RenameProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.RENAME,\r\n        item: state.items.selected[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        },\r\n        handleSubmit: (event, { item, newName }) => {\r\n            event.preventDefault();\r\n            if (item instanceof FolderItem) // TODO: Create renameItem\r\n                dispatch(renameFolder(item.name, newName));\r\n            else\r\n                dispatch(renameFile(item.name, newName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n//import ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport '../File.css';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\n\r\n// TODO: Check main differences between normal File.tsx component\r\nfunction FileSublist(props: OwnProps) {\r\n    const { item, isSelected, handleClick, handleDoubleClick } = props;\r\n    const iconStyle = {\r\n        backgroundColor: isSelected ? blue['A200'] : undefined\r\n    };\r\n    return (\r\n        <div className=\"File\" onClick={handleClick} data-selected={isSelected} onDoubleClick={handleDoubleClick}>\r\n        <h1>fileSublist.tsx</h1>\r\n            <ListItem>\r\n            <ListItemIcon>\r\n                        <div style={iconStyle}>\r\n                            { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </div>\r\n                    </ListItemIcon>\r\n                <ListItemText primary={item.name} secondary=\"\" />\r\n                <Divider absolute />\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface OwnProps {\r\n    item: Item;\r\n    isSelected: boolean;\r\n    handleClick(): void;\r\n    handleDoubleClick(): void;\r\n}\r\n\r\nexport default FileSublist;\r\n\r\n","import React from 'react';\r\nimport FileSublist from '../../File/FileSublist/FileSublist'; \r\nimport Loader from '../../Loader/Loader'; \r\nimport FileListEmptyMessage from '../FileListEmptyMessage';\r\nimport './FileListSublist.css'; \r\nimport { FolderItem } from '../../../Api/Item';\r\n\r\nfunction FileListSublist(props: OwnProps) {\r\n    const { items, isLoading, handleOpenFolder } = props;\r\n    \r\n    const itemComponents = items.map((item, key) => {\r\n        return <FileSublist\r\n            item={item}\r\n            isSelected={false}\r\n            handleClick={() => handleOpenFolder(item)}\r\n            handleDoubleClick={() => handleOpenFolder(item)}\r\n            key={key} />\r\n    });\r\n\r\n    return <div className=\"FileListSublist\">\r\n        { isLoading ? \r\n            <Loader /> : \r\n            itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n        }\r\n    </div>\r\n}\r\n\r\ninterface OwnProps {\r\n    items: FolderItem[];\r\n    isLoading: boolean;\r\n    handleOpenFolder(folder: FolderItem): void;\r\n}\r\n\r\nexport default FileListSublist;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileListSublist from '../../FileList/FileListSublist/FileListSublist'; \r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport { Item, FolderItem } from '../../../Api/Item';\r\nimport * as ApiHandler from '../../../Api/ApiHandler';\r\n\r\nclass FormDialog extends Component<OwnProps, OwnState> {\r\n    private host: string;\r\n    private path: string[];\r\n\r\n    constructor(props: OwnProps) {\r\n        super(props);\r\n        const { initialPath, initialHost } = props;\r\n        this.host = initialHost;\r\n        this.path = initialPath;\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoading: true,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: OwnProps) {\r\n        if (prevProps.initialHost !== this.props.initialHost\r\n            || prevProps.initialPath.join('') !== this.props.initialPath.join('')) {\r\n            this.host = this.props.initialHost;\r\n            this.path = this.props.initialPath;\r\n            this.updateItems();\r\n        }\r\n    }\r\n\r\n    handleGoBack() {\r\n        this.path = this.path.slice(0, -1);\r\n        this.updateItems();\r\n    }\r\n\r\n    handleOpenFolder(folder: FolderItem) {\r\n        this.path = [...folder.path, folder.name];\r\n        this.updateItems();\r\n    }\r\n\r\n    async updateItems() {\r\n        this.setState({ isLoading: true });\r\n        const items = (await ApiHandler.getItemList(this.path.join('/')))\r\n            .filter(item => item instanceof FolderItem);\r\n\r\n        this.setState({ isLoading: false, items });\r\n    }\r\n\r\n    render() {\r\n        const { open, handleClose, handleSubmit, actionName } = this.props;\r\n        const { items, isLoading } = this.state;\r\n        const host = this.host;\r\n        const path = this.path;\r\n        const url = `${host}/${path.join('/')}`;\r\n        const canGoBack = path.length > 0;\r\n        \r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-move\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-move\">\r\n                        {actionName} items to <small style={{color: 'grey'}}>{ url }</small>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileListSublist items={items} isLoading={isLoading} handleOpenFolder={this.handleOpenFolder.bind(this)}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleGoBack.bind(this)} color=\"primary\" type=\"button\" disabled={!canGoBack}>\r\n                            <KeyboardArrowLeftIcon /> Go back directory\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={(e) => handleSubmit({ host, path })} type=\"submit\">\r\n                            {actionName}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface OwnProps {\r\n    open: boolean;\r\n    actionName: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    handleSubmit({ host, path }: { host: string, path: string[] }): void;\r\n    handleClose(): void;\r\n}\r\n\r\ninterface OwnState {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default FormDialog;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { moveItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction MoveDialog(props: MoveProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, move } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Move\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => move(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    move(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface MoveProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.MOVE,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        },\r\n        move: (selectedItems, targetLocation) => {\r\n            dispatch(moveItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { copyItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction CopyDialog(props: CopyProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, copy } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Copy\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => copy(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    copy(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface CopyProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.COPY,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        },\r\n        copy: (selectedItems, targetLocation) => {\r\n            dispatch(copyItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyDialog);\r\n","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { getHumanFileSize } from '../../Api/Item';\r\n\r\nfunction UploadFileList(props: UploadFileListProps) {\r\n    const { files } = props;\r\n    const list = Array.from(files).map((f, i) =>\r\n        <ListItem dense key={i}>\r\n            <ListItemIcon>\r\n                <FileIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${f.name} (${getHumanFileSize(f.size)})`} />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <List component=\"nav\">\r\n                {list}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface UploadFileListProps {\r\n    files: FileList;\r\n}\r\n\r\nexport default UploadFileList;\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport UploadFileList from './UploadFileList';\r\n\r\nclass FileUploader extends Component<FileUploadProps> {\r\n    inputRef: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void {\r\n        const inputElement = this.inputRef.current;\r\n        if (inputElement) {\r\n            inputElement.value = '';\r\n            this.props.handleReset(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fileList, handleSelectedFiles } = this.props;\r\n        const styles = {\r\n            inputfile: {\r\n                // TODO: Change this to display none as soon, as the label button works\r\n                // display: 'none'\r\n            }, inputreset: {\r\n                display: (fileList && fileList.length) ? 'inline-flex' : 'none'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"button-file\">\r\n                    <input style={styles.inputfile} id=\"button-file\" ref={this.inputRef} multiple type=\"file\" onChange={handleSelectedFiles} />\r\n                    {/*<Button component=\"span\" variant=\"contained\" color=\"primary\">\r\n                        Select Files\r\n                    </Button>*/}\r\n                </label>\r\n\r\n                <Button style={styles.inputreset} component=\"span\" type=\"reset\" onClick={this.handleReset.bind(this)}>\r\n                    Clear\r\n                </Button>\r\n\r\n                { fileList && <UploadFileList files={fileList} /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface FileUploadProps {\r\n    fileList: FileList|null;\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n}\r\n\r\nexport default FileUploader;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\n//import { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage } from '../../../Actions/Actions';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    render() {\r\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Upload files\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset}/>\r\n                        {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList|null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.UPLOAD_FILE,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetFileUploader());\r\n        },\r\n        handleSubmit: (event) => {\r\n            event.preventDefault();\r\n            dispatch(uploadFiles());\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport DialogMenu from './Menu/Menu';\r\nimport DialogContent from './Content/Content';\r\nimport DialogMedia from './Media/Media';\r\nimport DialogEdit from './Edit/Edit';\r\nimport DialogEditTags from './EditTags/EditTags';\r\nimport DialogCreateFolder from './CreateFolder/CreateFolder';\r\nimport DialogCreateFile from './CreateFile/CreateFile';\r\nimport DialogRename from './Rename/Rename';\r\nimport DialogMove from './Move/Move';\r\nimport DialogCopy from './Copy/Copy';\r\nimport DialogUploadFile from './UploadFile/UploadFile';\r\n\r\n// TODO: Consider moving the visibility logic here\r\nfunction Dialogs() {\r\n    return (\r\n        <div className=\"Dialogs\">\r\n            <DialogMenu />\r\n            <DialogContent />\r\n            <DialogMedia />\r\n            <DialogEdit />\r\n            <DialogEditTags />\r\n            <DialogCreateFolder />\r\n            <DialogCreateFile />\r\n            <DialogMove />\r\n            <DialogCopy />\r\n            <DialogRename />\r\n            <DialogUploadFile />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, resetErrorMessage } from '../../Actions/Actions';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  close: {\r\n    padding: theme.spacing.unit / 2,\r\n  },\r\n});\r\n\r\nclass DynamicSnackbar extends React.Component<DynamicSnackbarProps> {\r\n  render() {\r\n    const { classes, errorMsg, handleClose, open, notificationDuration } = this.props;\r\n    return (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={open}\r\n          autoHideDuration={notificationDuration}\r\n          onClose={handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{errorMsg}</span>}\r\n          action={[\r\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" className={classes.close} onClick={handleClose} >\r\n              <CloseIcon />\r\n            </IconButton>,\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface StateProps {\r\n  open: boolean;\r\n  errorMsg: string;\r\n  notificationDuration: number;\r\n}\r\ninterface DispatchProps {\r\n  handleClose(): void;\r\n}\r\ninterface DynamicSnackbarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: !!state.errorMessage,\r\n        errorMsg: state.errorMessage,\r\n        notificationDuration: 60000\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n          dispatch(resetErrorMessage());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DynamicSnackbar));\r\n\r\n","import React, { Component } from 'react';\r\nimport TreeAndTagList from './TreeAndTagList';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport ContextMenu from './Components/ContextMenu/ContextMenu';\r\nimport Dialogs from './Components/Dialogs/Dialogs';\r\nimport { MuiThemeProvider as MaterialUI, createMuiTheme } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { initApp, MyDispatch, closeContextMenu } from './Actions/Actions';\r\nimport DynamicSnackbar from './Components/Notification/DynamicSnackbar';\r\nimport HistoryHandler from './Components/HistoryHandler/HistoryHandler';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        //primary: blue,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    }\r\n});\r\n\r\nclass App extends Component<AppProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.init();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <MaterialUI theme={theme}>\r\n                    <div onClick={this.props.handleHideContextMenu} onContextMenu={this.props.handleHideContextMenu}>\r\n                        <Navbar />\r\n                        <TreeAndTagList />\r\n                        <ContextMenu />\r\n                        <DynamicSnackbar />\r\n                        <Dialogs />\r\n                    </div>\r\n                </MaterialUI>\r\n                <HistoryHandler />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    init(): void;\r\n    handleHideContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\n\r\ninterface AppProps extends DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        init: () => {\r\n            dispatch(initApp());\r\n        },\r\n\r\n        handleHideContextMenu: (event) => {\r\n            const element = event.target as HTMLElement;\r\n            if (!(element.tagName === 'INPUT' || /label/i.test(element.className))) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(closeContextMenu());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport reducer from './Reducers/reducer'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'typeface-roboto';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n    onUpdate: (config) => {\r\n        console.group('serviceWorker.onUpdate');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    },\r\n    onSuccess: (config) => {\r\n        console.group('serviceWorker.onSuccess');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    }\r\n});"],"sourceRoot":""}