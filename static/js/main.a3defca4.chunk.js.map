{"version":3,"sources":["../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/n3/lib sync /^/N3.*$","Actions/actionTypes.ts","config.ts","Reducers/accountReducer.ts","Reducers/dialogsReducer.ts","Reducers/itemsReducer.ts","Reducers/metasReducer.ts","Reducers/pathReducer.ts","Reducers/uploadReducer.ts","Reducers/reducer.ts","Reducers/currentBlobReducer.ts","Reducers/errorReducer.ts","Reducers/loadingReducer.ts","serviceWorker.ts","Api/FileUtils.ts","Api/Item.ts","Api/folderUtils.ts","Api/Api.ts","Api/ApiCache.ts","Api/CouchDb.ts","Api/MetaUtils.ts","Api/ApiHandler.ts","Actions/Actions.ts","Components/TreeView/TreeViewItem.tsx","Components/Loader/Loader.tsx","Components/TreeView/TreeView.tsx","Components/TagList/TagList.tsx","Components/File/File.tsx","Components/FileList/FileListEmptyMessage.tsx","Components/FileList/FileList.tsx","Components/Meta/MetaRow.tsx","Components/Meta/MetaListEmptyMessage.tsx","Components/Meta/MetaList.tsx","TreeAndTagList.tsx","Components/ContextMenu/ContextMenuActions/CreateFolderAction.tsx","Components/ContextMenu/ContextMenuActions/CreateFileAction.tsx","Components/ContextMenu/ContextMenuActions/UploadFileAction.tsx","Components/ContextMenu/ContextMenuActions/ChooseLocationAction.tsx","Components/Navbar/ThreeDotsMenu.tsx","Components/Breadcrumb/BreadcrumbText.tsx","Components/Navbar/Navbar.tsx","Components/ContextMenu/ContextMenuActions/OpenAction.tsx","Components/ContextMenu/ContextMenuActions/RemoveAction.tsx","Components/ContextMenu/ContextMenuActions/MoveAction.tsx","Components/ContextMenu/ContextMenuActions/CopyAction.tsx","Components/ContextMenu/ContextMenuActions/EditAction.tsx","Components/ContextMenu/ContextMenuActions/EditTagsAction.tsx","Components/ContextMenu/ContextMenuActions/RenameAction.tsx","Components/ContextMenu/ContextMenuActions/ZipAction.tsx","Components/ContextMenu/ContextMenuActions/ExtractAction.tsx","Components/ContextMenu/ContextMenuActions/DownloadAction.tsx","Components/ContextMenu/ContextMenuActions/OpenInNewTabAction.tsx","Components/ContextMenu/ContextMenu.tsx","Components/HistoryHandler/HistoryHandler.tsx","Components/Dialogs/Menu/Menu.tsx","Components/Dialogs/Content/Content.tsx","Components/Dialogs/Media/Media.tsx","Components/Dialogs/Edit/Edit.tsx","Api/jsonp.js","Components/Dialogs/EditTags/AutocompleteTag.tsx","Components/Dialogs/EditTags/EditTags.tsx","Components/Dialogs/CreateFolder/CreateFolder.tsx","Components/Dialogs/CreateFile/CreateFile.tsx","Components/Dialogs/Rename/Rename.tsx","Components/File/FileSublist/FileSublist.tsx","Components/FileList/FileListSublist/FileListSublist.tsx","Components/Dialogs/ChooseLocation/ChooseLocation.tsx","Components/Dialogs/Move/Move.tsx","Components/Dialogs/Copy/Copy.tsx","Components/FileUploader/UploadFileList.tsx","Components/FileUploader/FileUploader.tsx","Components/Dialogs/UploadFile/UploadFile.tsx","Components/Dialogs/Dialogs.tsx","Components/Notification/DynamicSnackbar.tsx","App.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","map","webpackContext","webpackContextResolve","__webpack_require__","o","Object","DIALOGS","host","getHost","setHost","newHost","endsWith","slice","initialState","loggedIn","webId","initialVisibleDialogs","values","name","reduce","prev","cur","initialContextMenuState","open","x","y","initialItemsState","inCurFolder","filter","selected","removeItem","items","item","selectedItem","equals","addItem","initialMetasState","initialPath","initialUploadState","fileList","progress","rootReducer","combineReducers","account","state","action","type","config","value","blob","URL","createObjectURL","revokeObjectURL","contextMenu","visibleDialogs","errorMessage","includes","loading","path","upload","metas","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","FileClient","require","FileUtils","popupLogin","serverId","split","err","ms","Promise","setTimeout","this","userIdAndHost","userId","baseUrl","sleep","solidAuth","session","url","fileName","loadUserIdAndHost","infos","res","readFolder","content","decodeURI","folders","forEach","f","alert","readFile","body","createFile","newContent","updateFile","Item","size","_name","_path","_url","_size","getPathFromUrl","pop","length","every","val","index","getHumanFileSize","FileItem","patterns","image","test","media","editable","extractable","video","FolderItem","byteString","bytes","parseInt","Math","pow","toFixed","urlString","pathname","getFolderItems","graph","subj","files","each","rdflib","undefined","subjectName","subjectNode","nsSize","any","getSizeByGraph","folderNode","isAnInstanceOfClass","types","some","isFolder","push","text2graph","text","a","contentType","guessFileType","reject","ext","replace","fetchFile","buildFileUrl","assertSuccessfulResponse","fetchFolder","folderName","buildFolderUrl","headers","response","folderRDF","folderUtils","folderItems","destination","itemNames","copyItems","removeItems","oldName","newName","copyFile","oldFolderName","newFolderName","copyFolder","removeFolderRecursively","promises","all","Response","originPath","originName","destinationPath","destinationName","fileResponse","createFolder","Array","from","file","folderExists","createItem","Blob","itemName","link","request","method","slug","status","removeFolderContents","folderPath","ok","ApiCache","_data","itemList","hasOwnProperty","paths","contains","CouchDb","xhr","createCORSRequest","couchDbBaseUrl","onload","responseText","onerror","send","executeQueryonCouch","json","JSON","parse","usedTag","rows","row","tag","tagType","key","published","selectedTags","tagsAsString","tagArrayTotring","foundMeta","meta","self","findIndex","t","_id","createIdFromMeta","oldMeta","_rev","writeMeta","statusText","stringify","XMLHttpRequest","setRequestHeader","reg","RegExp","hostName","pathName","tags","tagsAsAstring","comma","couchDbServerUrl","couchDbDatabaseName","onServerColor","MetaUtils","allMetas","allLocalMeta","fileClientReadFileAsString","fileClientcreateFile","getTagIndexFullPath","localOrCentral","getSelectedLocalMeta","getSelectedCentralMeta","getAllLocalMetas","allLocalMetas","filteredMetas","testTag","filterByMetaTag","havingTagMeta","existingFilteredMeta","lodash","find","havingTagMetaCopy","creationDate","Date","getMetaFromTags","foundMetas","localMeta","centralMeta","centralTag","localTag","getUrl","mimeType","currentMeta","existingMeta","el","currentItem","fileClientupdateFile","metaCopy","updateMeta","refreshCurrentUsedTags","getLocalUsedTags","getCentralUsedTags","usedTags","currentLocalUsedTags","foundTags","uniqWith","first","second","sortBy","currentCentralUsedTags","getItemsByViewGroupedTags","centralTags","localTags","markCentralFromLocal","cache","handleFetchError","detailedErrorMessage","group","displayMessages","displayErrorMessage","message","stack","groupEnd","fixPath","getItemList","get","API","add","getFileBlob","filename","renameFile","newFileName","remove","renameFolder","trim","moveItems","filenames","uploadFiles","getAsZip","zip","JSZip","addItemsToZip","zipFolder","folder","binary","extractZipArchive","loadAsync","uploadExtractedZipArchive","curFolder","getItemsInZipFolder","relativePath","getItemNameFromPath","getParentPathFromPath","dir","async","substr","lastIndexOf","solidLogin","dispatch","getState","displayLoading","solidPopupLogin","updateLoginStatus","r","setErrorMessage","String","finally","stopLoading","setWebId","setLoggedIn","setLoggedOut","resetWebId","popupUri","clearCache","clear","APIHandler","closeDialog","EDITTAGS","getMetaList","setMetas","displayCurrentItemList","resetSelectedItems","join","setItems","refreshItemList","promptDownload","msSaveOrOpenBlob","document","createElement","href","download","appendChild","click","removeChild","getFileContent","resetFileContent","setFileContent","loadAndEditFile","openDialog","EDIT","loadAndDisplayFile","CONTENT","displaySelectedMediaFile","MEDIA","targetPath","COPY","setSelectedItemsFromLastTo","lastFile","selectedItems","lastPreviouslySelected","lastPreviouslySelectedIndex","indexOf","lastSelectedIndex","isInRange","num","start","end","toAdd","selectItems","resetFileUploader","setFileUploadProgress","UPLOAD_FILE","resetFileUploadList","enterFolder","setPath","resetFilter","enterFolderByItem","rightClickOnFile","selectItem","makeActionCreator","moveFolderUpwards","resetPath","resetItems","toggleSelectedItem","filterItems","setFileUploadList","openContextMenu","closeContextMenu","TreeViewItem","colNumber","Blank","width","height","viewBox","xmlns","xmlnsXlink","d","fill","props","handleClick","itemHandleClick","style","padding","button","onClick","bind","blanks","expColl","fontSize","it","React","Component","connect","ownProps","withStyles","theme","createStyles","margin","spacing","unit","container","justify","className","classes","color","TreeView","updateFolder","setState","fileClientReadFolder","forceUpdate","i","known","j","initFolders","flexShrink","subheader","printRows","component","in","timeout","unmountOnExit","TagList","LC","PrintList","minWidth","itemColor","role","dense","onChange","checked","elt","refreshView","getUsedTags","handleSubmit","metaTag","splice","File","isSelected","handleClickOnName","handleClickOnFolder","handleDoubleClick","handleContextMenu","iconStyle","backgroundColor","blue","realSize","getDisplaySize","data-selected","primary","getDisplayName","secondary","onDoubleClick","onContextMenu","absolute","isEditable","isImage","isMedia","event","preventDefault","stopPropagation","nativeEvent","MouseEvent","clientX","clientY","TouchEvent","touches","pageX","pageY","warn","shiftKey","ctrlKey","FileListEmptyMessage","FileList","isLoading","itemComponents","filterMatch","toLocaleLowerCase","MetaRow","prevChars","shift","loadAndEditFileFromTag","loadAndDisplayFileFromTag","displaySelectedMediaFileFromTag","MetaListEmptyMessage","MetaList","TreeAndTagList","showTreeOrTag","CREATE_FOLDER","callback","handleClose","variant","CREATE_FILE","CHOOSE_LOCATION","ThreeDotsMenu","anchorEl","currentTarget","marginLeft","aria-label","aria-owns","aria-haspopup","onClose","BreadcrumbText","handleClickPath","rootTitle","handleGoBack","canGoBack","separator","rootPath","data-index","lastPath","directories","display","breakpoints","up","root","marginBottom","grow","flexGrow","menuButton","marginRight","title","search","position","borderRadius","shape","fade","palette","common","white","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","handleChange","moveUpwards","n","moveFolderUpwardsAndRefresh","handleRefresh","noWrap","placeholder","input","MOVE","RENAME","archiveName","generateAsync","downloadName","ContextMenu","acts","anchorReference","anchorPosition","top","left","transformOrigin","vertical","horizontal","PaperProps","EditAction","RenameAction","getActionsForMultipleItems","getActionsForItem","getActionsForFile","getActionsForFolder","actions","isExtractable","HistoryHandler","history","states","stateIndex","createBrowserHistory","listen","handlePop","handleReplace","handlePush","updateBrowserHistory","prevState","locationsEqual","encodeURI","newState","getLocationObjectFromUrl","origin","URLSearchParams","FormDialog","isLoggedIn","encodedUrl","targetForm","form","querySelector","handleLogin","handleLogout","aria-labelledby","fullWidth","maxWidth","gutterBottom","autoFocus","label","lastBlobUrl","blobUrl","src","alt","isVideo","iconUrl","textField","createRef","fetch","current","textArea","minHeight","defaultValue","ref","handleSave","updateTextFile","jsonp","callback2","callbackName","round","random","data","script","MultiValueLabel","styles","tagHandleClick","Suggestion","AutocompleteTag","creatableSelect","source","lastStr","handleRadioChange","suggests","focusCreatableSelect","focus","str","retVal","callback1","searchedString","autoComplete","CallJsonP","suggestion","target","control","labelPlacement","components","options","isMulti","handleChangeTagList","onInputChange","selectAllToCentral","saveButtonText","cleanedTags","getOrInitMeta","extension","spl","fullScreen","overflow","native","saveText","inputRef","createNewFolder","previousName","FileSublist","FileListSublist","handleOpenFolder","initialHost","prevProps","updateItems","ApiHandler","actionName","disabled","move","targetLocation","ChooseLocation","copy","UploadFileList","list","FileUploader","inputElement","handleReset","handleSelectedFiles","inputfile","inputreset","htmlFor","multiple","canUpload","Dialogs","DynamicSnackbar","errorMsg","notificationDuration","anchorOrigin","autoHideDuration","ContentProps","close","createMuiTheme","typography","useNextVariants","App","init","handleHideContextMenu","Navbar","element","tagName","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","getElementById","process","addEventListener","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3defca4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 588;","var map = {\n\t\"./N3Lexer\": 199,\n\t\"./N3Lexer.js\": 199,\n\t\"./N3Parser\": 200,\n\t\"./N3Parser.js\": 200,\n\t\"./N3Store\": 307,\n\t\"./N3Store.js\": 307,\n\t\"./N3StreamParser\": 308,\n\t\"./N3StreamParser.js\": 308,\n\t\"./N3StreamWriter\": 309,\n\t\"./N3StreamWriter.js\": 309,\n\t\"./N3Util\": 201,\n\t\"./N3Util.js\": 201,\n\t\"./N3Writer\": 202,\n\t\"./N3Writer.js\": 202\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 611;","//import { Item } from \"../Api/Item\";\r\n\r\nexport interface Action<V> {\r\n    type: string;\r\n    value: V;\r\n};\r\n\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nexport const ENTER_FOLDER = 'ENTER_FOLDER';\r\nexport const MOVE_FOLDER_UPWARDS = 'MOVE_FOLDER_UPWARDS';\r\nexport const SET_PATH = 'SET_PATH';\r\n\r\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\r\nexport const SET_LOGGED_OUT = 'SET_LOGGED_OUT';\r\nexport const RESET_HOST = 'RESET_HOST';\r\nexport const SET_HOST = 'SET_HOST'; // TODO: Consider renaming to BASE_URL\r\nexport const RESET_WEB_ID = 'RESET_WEB_ID';\r\nexport const SET_WEB_ID = 'SET_WEB_ID';\r\n\r\nexport const SET_ITEMS = 'SET_ITEMS';\r\nexport const SET_METAS = 'SET_METAS';\r\n\r\nexport const SELECT_ITEMS = 'SELECT_ITEMS';\r\nexport const TOGGLE_SELECTED_ITEM = 'TOGGLE_SELECTED_ITEM';\r\nexport const DESELECT_ITEM = 'DESELECT_ITEM';\r\n\r\nexport const FILTER_ITEMS = 'FILTER_ITEMS';\r\nexport const RESET_FILTER = 'REMOVE_FILTER';\r\n\r\nexport const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const STOP_LOADING = 'STOP_LOADING';\r\n\r\nexport const RESET_LOADED_BLOB = 'RESET_LOADED_BLOB';\r\nexport const SET_LOADED_BLOB = 'SET_LOADED_BLOB';\r\n\r\nexport const SET_UPLOAD_FILE_PROGRESS = 'SET_UPLOAD_FILE_PROGRESS';\r\nexport const SET_UPLOAD_FILE_LIST = 'SET_UPLOAD_FILE_LIST';\r\n\r\nexport const OPEN_CONTEXT_MENU = 'OPEN_CONTEXT_MENU';\r\nexport const CLOSE_CONTEXT_MENU = 'CLOSE_CONTEXT_MENU';\r\n\r\nexport const OPEN_DIALOG = 'OPEN_DIALOG';\r\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';\r\n\r\nexport enum DIALOGS {\r\n    CHOOSE_LOCATION = 'CHOOSE_LOCATION',\r\n    CREATE_FOLDER = 'CREATE_FOLDER',\r\n    CREATE_FILE = 'CREATE_FILE',\r\n    UPLOAD_FILE = 'UPLOAD_FILE',\r\n    RENAME = 'RENAME',\r\n    EDITTAGS = 'EDITTAGS',\r\n    MOVE = 'MOVE',\r\n    COPY = 'COPY',\r\n    CONTENT = 'CONTENT',\r\n    MEDIA = 'MEDIA',\r\n    EDIT = 'EDIT',\r\n    CONTEXT_MENU = 'CONTEXT_MENU',\r\n};","let host: string | null = null;\r\n\r\nexport default {\r\n    getHost() {\r\n        return host;\r\n    },\r\n    setHost(newHost: string) {\r\n        host = newHost;\r\n        while (host.endsWith('/'))\r\n            host = host.slice(0, -1);\r\n    }\r\n};\r\n","import { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_WEB_ID, RESET_HOST, RESET_WEB_ID } from \"../Actions/actionTypes\";\r\nimport config from \"../config\";\r\n\r\ninterface AccountState {\r\n    loggedIn: boolean;\r\n    host: string | null;\r\n    webId: string | null;\r\n}\r\n\r\nconst initialState: AccountState = {\r\n    loggedIn: false,\r\n    host: null,\r\n    webId: null\r\n};\r\n\r\nexport const account = (state = initialState, action: Action<string|null|void>): AccountState => {\r\n    switch(action.type) {\r\n        case SET_LOGGED_IN:\r\n            return { ...state, loggedIn: true };\r\n        case SET_LOGGED_OUT:\r\n            return { ...state, loggedIn: false };\r\n        case SET_HOST:\r\n            config.setHost(action.value as string); // TODO\r\n            return { ...state, host: action.value as string };\r\n        case RESET_HOST:\r\n            return { ...state, host: null };\r\n        case SET_WEB_ID:\r\n            return { ...state, webId: action.value as string|null };\r\n        case RESET_WEB_ID:\r\n            return { ...state, webId: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { DIALOGS, Action, OPEN_DIALOG, CLOSE_DIALOG, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from \"../Actions/actionTypes\";\r\n\r\n// Initialize state with values of DIALOGS as keys and false (closed) as value\r\nconst initialVisibleDialogs: Record<DIALOGS, boolean> = Object.values(DIALOGS)\r\n    .map((name: DIALOGS) => ({ [name]: false } as Record<DIALOGS, boolean>))\r\n    .reduce((prev, cur) => ({ ...prev, ...cur })) as Record<DIALOGS, boolean>;\r\n\r\nexport const visibleDialogs = (state = initialVisibleDialogs, action: Action<DIALOGS>): typeof initialVisibleDialogs => {\r\n    switch (action.type) {\r\n        case OPEN_DIALOG:\r\n            return { ...state, [action.value]: true };\r\n        case CLOSE_DIALOG:\r\n            return { ...state, [action.value]: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialContextMenuState = {\r\n    open: false,\r\n    x: 0,\r\n    y: 0,\r\n};\r\n\r\nexport const contextMenu = (state = initialContextMenuState, action: Action<any>): typeof initialContextMenuState => {\r\n    switch (action.type) {\r\n        case OPEN_CONTEXT_MENU:\r\n            return {\r\n                ...state,\r\n                open: true,\r\n                x: action.value.x,\r\n                y: action.value.y\r\n            };\r\n        case CLOSE_CONTEXT_MENU:\r\n            return { ...state, open: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Item } from \"../Api/Item\";\r\n\r\nimport { Action, SET_ITEMS, SELECT_ITEMS, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, TOGGLE_SELECTED_ITEM } from \"../Actions/actionTypes\";\r\n\r\ninterface ItemsState {\r\n    inCurFolder: Item[];\r\n    filter: string;\r\n    selected: Item[];\r\n}\r\n\r\nconst initialItemsState: ItemsState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const items = (state = initialItemsState, action: Action<any>): ItemsState => {\r\n    switch (action.type) {\r\n        case SET_ITEMS:\r\n            return { ...state, inCurFolder: action.value as Item[] };\r\n        case SELECT_ITEMS:\r\n            return { ...state, selected: action.value as Item[] };\r\n        case DESELECT_ITEM:\r\n            return { ...state, selected: removeItem(state.selected, action.value as Item) };\r\n        case TOGGLE_SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                selected: state.selected.includes(action.value) ?\r\n                    removeItem(state.selected, action.value as Item)\r\n                    : addItem(state.selected, action.value as Item)\r\n            };\r\n        case FILTER_ITEMS:\r\n            return { ...state, filter: action.value as string };\r\n        case RESET_FILTER:\r\n            return { ...state, filter: '' };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst removeItem = (items: Item[], item: Item) => {\r\n    return items.filter(selectedItem => !selectedItem.equals(item));\r\n}\r\n\r\nconst addItem = (items: Item[], item: Item) => {\r\n    return [...items, item];\r\n}\r\n","import { Meta } from \"../Api/MetaUtils\";\r\nimport { Action, SET_METAS } from \"../Actions/actionTypes\";\r\n\r\ninterface MetasState {\r\n    inCurFolder: Meta[];\r\n    filter: string;\r\n    selected: Meta[];\r\n}\r\n\r\nconst initialMetasState: MetasState = {\r\n    inCurFolder: [],\r\n    filter: '',\r\n    selected: [],\r\n};\r\n\r\nexport const metas = (state = initialMetasState, action: Action<any>): MetasState => {\r\n    switch (action.type) {\r\n        case SET_METAS:\r\n            return { ...state, inCurFolder: action.value as Meta[] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, ENTER_FOLDER, SET_PATH, MOVE_FOLDER_UPWARDS } from \"../Actions/actionTypes\";\r\n\r\n\r\nconst initialPath: string[] = [];\r\n\r\nexport const path = (state = initialPath, action: Action<any>): typeof initialPath => {\r\n    switch(action.type) {\r\n        case ENTER_FOLDER:\r\n            return [...state, action.value];\r\n        case MOVE_FOLDER_UPWARDS:\r\n            return action.value > 0 ?\r\n                state.slice(0, -action.value)\r\n                : state;\r\n        case SET_PATH:\r\n            return [...action.value];\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS } from \"../Actions/actionTypes\";\r\n\r\nconst initialUploadState = {\r\n    fileList: null as FileList|null,\r\n    progress: 0,\r\n};\r\n\r\nexport const upload = (state = initialUploadState, action: Action<FileList|number>): typeof initialUploadState => {\r\n    switch(action.type) {\r\n        case SET_UPLOAD_FILE_LIST:\r\n            return { ...state, fileList: action.value as FileList };\r\n        case SET_UPLOAD_FILE_PROGRESS:\r\n            return { ...state, progress: action.value as number };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { account } from './accountReducer';\r\nimport { blob } from './currentBlobReducer';\r\nimport { visibleDialogs, contextMenu } from './dialogsReducer';\r\nimport { errorMessage } from './errorReducer';\r\nimport { items } from './itemsReducer';\r\nimport { metas } from './metasReducer';\r\nimport { loading } from './loadingReducer';\r\nimport { path } from './pathReducer';\r\nimport { upload } from './uploadReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    account,\r\n    blob,\r\n    contextMenu,\r\n    visibleDialogs,\r\n    errorMessage,\r\n    items,\r\n    loading,\r\n    path,\r\n    upload,\r\n    metas\r\n});\r\n\r\nexport default rootReducer;\r\nexport type AppState = ReturnType<typeof rootReducer>;","import { Action, SET_LOADED_BLOB, RESET_LOADED_BLOB } from \"../Actions/actionTypes\";\r\n\r\nexport const blob = (state: string|null = null, action: Action<Blob>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_LOADED_BLOB:\r\n            return URL.createObjectURL(action.value);\r\n        case RESET_LOADED_BLOB:\r\n            if (state !== null)\r\n                URL.revokeObjectURL(state);\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, SET_ERROR_MESSAGE } from \"../Actions/actionTypes\";\r\n\r\nexport const errorMessage = (state = '', action: Action<string>): typeof state => {\r\n    switch(action.type) {\r\n        case SET_ERROR_MESSAGE:\r\n            return action.value;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Action, DISPLAY_LOADING, STOP_LOADING } from \"../Actions/actionTypes\";\r\n\r\nconst initialLoadingState: boolean = false;\r\n\r\nexport const loading = (state = initialLoadingState, action: Action<void>): boolean => {\r\n    switch(action.type) {\r\n        case DISPLAY_LOADING:\r\n            return true;\r\n        case STOP_LOADING:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: ServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport interface ServiceWorkerConfig {\r\n  onUpdate(registration: ServiceWorkerRegistration): void;\r\n  onSuccess(registration: ServiceWorkerRegistration): void;\r\n}","import config from '../config';\r\nimport * as solidAuth from 'solid-auth-client';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    known?: boolean;//details of sub folders are read (in treeview)\r\n}\r\n\r\nexport default class FileUtils {\r\n\r\n    static serverId: string = ''\r\n    static webId: string = ''\r\n\r\n    //Interface method for FileClient.popupLogin\r\n    static async fileClientPopupLogin() {\r\n        await FileClient.popupLogin()\r\n            .then(\r\n                (webId: string) => {\r\n                    const serverId = webId.split(\"/card\")[0];\r\n                    this.serverId = serverId\r\n                    this.webId = webId\r\n                    console.log(`Logged in as ${webId} on ${serverId}.`);\r\n                }\r\n                , (err: any) => console.log('Error while loging' + err)\r\n            )\r\n    }\r\n\r\n    static sleep(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    static userIdAndHost = {userId: '', baseUrl: ''}\r\n    static async loadUserIdAndHost() {\r\n        if (this.userIdAndHost.userId === '') {\r\n            let baseUrl = config.getHost()\r\n            while (baseUrl === null) {\r\n                await this.sleep(1000)\r\n                baseUrl = config.getHost()\r\n            }\r\n            const session = await solidAuth.currentSession()\r\n            let userId = ''\r\n            if (session) {\r\n                const url = new URL(session.webId)\r\n                userId = url.hostname\r\n            }\r\n            this.userIdAndHost = { userId: userId, baseUrl: baseUrl }\r\n        }\r\n        return this.userIdAndHost\r\n    }\r\n\r\n    static async fileClientReadFolder(fileName: string) {\r\n        const infos = await this.loadUserIdAndHost()\r\n        let res = {} as IFolder;\r\n        await FileClient.readFolder(fileName).then((content: IFolder) => {\r\n            content.name = decodeURI(content.name)\r\n            content.folders.forEach((f: IFolder) => {\r\n                f.name = decodeURI(f.name)\r\n                f.folders = []\r\n            })\r\n            res = content\r\n        }, (err: any) => {\r\n            alert(`User ${infos.userId} is not able to read folder ${fileName} on Pod ${infos.baseUrl}`)\r\n        });\r\n        return res\r\n    }\r\n\r\n    //Interface method for FileClient.readFile\r\n    static async fileClientReadFileAsString(url: string) {\r\n        let res: string = ''\r\n        await FileClient.readFile(url).then(\r\n            (body: string) => {\r\n                res = body\r\n            }\r\n            , (err: any) => {\r\n                console.log(`Error when reading file ${url}, returning blank`)\r\n                //throw new Error(\"read error  \" + err)\r\n            });\r\n        return res as string\r\n    }\r\n\r\n    //Interface method for FileClient.createFile\r\n    static async fileClientcreateFile(url: string) {\r\n        FileClient.createFile(url)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while creating file ' + url)\r\n            )\r\n    }\r\n\r\n    //Interface method for FileClient.updateFile\r\n    static async fileClientupdateFile(url: string, newContent: string) {\r\n        FileClient.updateFile(url, newContent)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while updating file ' + url)\r\n            )\r\n    }\r\n}","/**\r\n * Class for an arbitrary item from a solid pod\r\n */\r\nexport class Item {\r\n    _name: string;\r\n    _path: string[];\r\n    _url: string;\r\n    _size?: string\r\n\r\n    constructor(url: string, size?: string) {\r\n        const path = getPathFromUrl(url);\r\n\r\n        this._name = path.pop() || '';\r\n        this._path = path;\r\n        this._url = url;\r\n        this._size = size;\r\n    }\r\n\r\n    // Make properties readonly\r\n    get name() { return this._name; }\r\n    get path() { return this._path; }\r\n    get url() { return this._url; }\r\n    get size() { return this._size; }\r\n\r\n    equals(item: Item) {\r\n        return this.name === item.name\r\n            && this.path.length === item.path.length\r\n            && this.path.every((val, index) => val === item.path[index]);\r\n    }\r\n\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n    \r\n    getDisplayName() {\r\n        return decodeURI(this.name);\r\n    }\r\n\r\n    getDisplaySize() {\r\n        return this._size ? getHumanFileSize(this._size) : 'Unknown size';\r\n    }\r\n}\r\n\r\nexport class FileItem extends Item {\r\n    isImage() {\r\n        return patterns.image.test(this.name);\r\n    }\r\n\r\n    isMedia() {\r\n        return patterns.media.test(this.name);\r\n    }\r\n\r\n    isEditable() {\r\n        return patterns.editable.test(this.name);\r\n    }\r\n\r\n    isExtractable() {\r\n        return patterns.extractable.test(this.name);\r\n    }\r\n\r\n    isVideo() {\r\n        return patterns.video.test(this.name);\r\n    }\r\n}\r\n\r\nexport class FolderItem extends Item { }\r\n\r\n\r\n// regex patterns for testing if a file is of a specific type\r\nconst patterns = {\r\n    editable: /\\.(txt|diff?|patch|svg|asc|cnf|cfg|conf|html?|cfm|cgi|aspx?|ini|pl|py|md|css|cs|jsx?|jsp|log|htaccess|htpasswd|gitignore|gitattributes|env|json|atom|eml|rss|markdown|sql|xml|xslt?|sh|rb|as|bat|cmd|cob|for|ftn|frm|frx|inc|lisp|scm|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb|tmpl|lock|go|yml|yaml|tsv|lst|ttl)$/i,\r\n    image: /\\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,\r\n    media: /\\.(mp3|ogg|wav|mp4|webm)$/i,\r\n    video: /\\.(mp4|webm|ogg)$/i,\r\n    extractable: /\\.(zip)$/i\r\n};\r\n\r\n/**\r\n * Calculate file size by bytes in human readable format\r\n */\r\nexport const getHumanFileSize = (byteString: string|number): string => {\r\n    const bytes = typeof byteString === 'string' ?\r\n        parseInt(byteString)\r\n        : byteString;\r\n    const e = (Math.log(bytes) / Math.log(1e3)) | 0;\r\n    return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\r\n};\r\n\r\n\r\n/**\r\n * Get path including the last element (e.g. [public, test, index.html])\r\n */\r\nconst getPathFromUrl = (urlString: string): string[] => {\r\n    const url = new URL(urlString);\r\n    return url.pathname.split('/').filter(val => val !== '');\r\n}","// Based on https://github.com/jeff-zucker/solid-file-client/blob/master/src/folderUtils\r\nimport * as rdflib from 'rdflib';\r\nimport { FileItem, FolderItem } from './Item';\r\nimport { FolderItems } from './types';\r\n\r\nexport function getSizeByGraph(graph: rdflib.IndexedFormula, subjectName: string): string | undefined {\r\n    const subjectNode = rdflib.sym(subjectName);\r\n    const nsSize = rdflib.sym('http://www.w3.org/ns/posix/stat#size');\r\n    const size = graph.any(subjectNode, nsSize, undefined, undefined);\r\n\r\n    return (size && 'value' in size) ? size.value : undefined;\r\n}\r\n\r\n/**\r\n * @param {rdflib.IndexedFormula} graph a rdflib.graph() database instance\r\n * @param {string} baseUrl location of the folder\r\n * @returns {boolean}\r\n */\r\nexport function isFolder(graph: rdflib.IndexedFormula, baseUrl: string): boolean {\r\n    const folderNode = rdflib.sym(baseUrl);\r\n    const isAnInstanceOfClass = rdflib.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\r\n    const types = graph.each(folderNode, isAnInstanceOfClass, undefined, undefined);\r\n    return Object.values(types)\r\n        .some(({ value }) => value.match('ldp#BasicContainer') !== null);\r\n}\r\n\r\nexport function getFolderItems(graph: rdflib.IndexedFormula, subj: string): FolderItems {\r\n    const files: FileItem[] = [];\r\n    const folders: FolderItem[] = [];\r\n\r\n    graph.each(\r\n        rdflib.sym(subj),\r\n        rdflib.sym('http://www.w3.org/ns/ldp#contains'),\r\n        undefined,\r\n        undefined\r\n    ).forEach(item => {\r\n        const url = item.value;\r\n        const size = getSizeByGraph(graph, url);\r\n\r\n        if (isFolder(graph, url))\r\n            folders.push(new FolderItem(url, size));\r\n        else\r\n            files.push(new FileItem(url, size));\r\n    });\r\n\r\n    return { files, folders };\r\n}\r\n\r\n/**\r\n * @param {string} text RDF text that can be passed to $rdf.parse()\r\n * @param {string} baseUrl the base url of the item\r\n * @param {string} contentType Content-Type of the request\r\n * @returns {Promise<rdflib.IndexedFormula>} a rdfilb.graph() database instance with parsed RDF\r\n */\r\nexport async function text2graph(text: string, baseUrl: string, contentType: string = ''): Promise<rdflib.IndexedFormula> {\r\n    contentType = contentType || guessFileType(baseUrl);\r\n    const graph = rdflib.graph();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        rdflib.parse(text, graph, baseUrl, contentType, () => {});\r\n        resolve(graph);\r\n    });\r\n}\r\n\r\nfunction guessFileType(url: string): string {\r\n    const ext = url.replace(/.*\\./, '');\r\n    if (ext.match(/\\/$/)) return 'dir';\r\n    if (ext.match(/(md|markdown)/)) return 'text/markdown';\r\n    if (ext.match(/html/)) return 'text/html';\r\n    if (ext.match(/xml/)) return 'text/xml';\r\n    if (ext.match(/ttl/)) return 'text/turtle';\r\n    if (ext.match(/n3/)) return 'text/n3';\r\n    if (ext.match(/rq/)) return 'application/sparql';\r\n    if (ext.match(/css/)) return 'text/css';\r\n    if (ext.match(/txt/)) return 'text/plain';\r\n    if (ext.match(/json/)) return 'application/json';\r\n    if (ext.match(/js/)) return 'application/javascript';\r\n    if (ext.match(/(png|gif|jpeg|tif)/)) return 'image';\r\n    if (ext.match(/(mp3|aif|ogg)/)) return 'audio';\r\n    if (ext.match(/(avi|mp4|mpeg)/)) return 'video';\r\n    /* default */ return 'text/turtle';\r\n}\r\n","import config from './../config';\r\nimport * as folderUtils from './folderUtils';\r\nimport * as solidAuth from 'solid-auth-client';\r\nimport { FolderItems } from './types';\r\n\r\n\r\n/**\r\n * Fetch API to get item\r\n */\r\nexport async function fetchFile(path: string, fileName?: string): Promise<Response>  {\r\n    console.log(path)\r\n    console.log(fileName)\r\n    const url = buildFileUrl(path, fileName);\r\n    console.log(url)\r\n    return solidAuth.fetch(url)\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to get folder\r\n */\r\nexport async function fetchFolder(path: string, folderName?: string): Promise<Response> {\r\n    const url = buildFolderUrl(path, folderName);\r\n    return solidAuth.fetch(url, { headers: { \"Accept\": \"text/turtle\" } })\r\n        .then(assertSuccessfulResponse);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to retrieve object containing a files and folders array\r\n */\r\nexport async function readFolder(path: string, folderName?: string): Promise<FolderItems> {\r\n    const url = buildFolderUrl(path, folderName);\r\n\r\n    const response = await fetchFolder(path, folderName);\r\n    const folderRDF = await response.text();\r\n    const graph = await folderUtils.text2graph(folderRDF, url, 'text/turtle');\r\n    const folderItems = folderUtils.getFolderItems(graph, url);\r\n\r\n    return folderItems;\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to move items\r\n */\r\nexport async function moveItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    await copyItems(path, destination, itemNames);\r\n    return removeItems(path, itemNames);\r\n};\r\n\r\n/**\r\n * Fetch API to tag a file\r\n */\r\n\r\nexport async function editTags(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n/**\r\n * Fetch API to rename a file\r\n */\r\nexport async function renameFile(path: string, oldName: string, newName: string): Promise<Response> {\r\n    await copyFile(path, oldName, path, newName);\r\n    return removeItem(path, oldName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to rename a folder\r\n */\r\nexport async function renameFolder(path: string, oldFolderName: string, newFolderName: string): Promise<Response> {\r\n    await copyFolder(path, oldFolderName, path, newFolderName);\r\n    return removeFolderRecursively(path, oldFolderName);\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy files\r\n */\r\nexport async function copyItems(path: string, destination: string, itemNames: string[]): Promise<Response> {\r\n    let { files, folders } = await readFolder(path);\r\n\r\n    files = files.filter(({ name }) => itemNames.includes(name));\r\n    folders = folders.filter(({ name }) => itemNames.includes(name));\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(path, name, destination, name)),\r\n        ...folders.map(({ name }) => copyFolder(path, name, destination, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to copy a file\r\n */\r\nexport async function copyFile(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    const fileResponse = await fetchFile(originPath, originName);\r\n    const content = await fileResponse.blob();\r\n\r\n    return createFile(destinationPath, destinationName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to copy a folder recursively\r\n */\r\nexport async function copyFolder(originPath: string, originName: string, destinationPath: string, destinationName: string): Promise<Response> {\r\n    // TODO: Combine these two promises for better performance\r\n    await createFolder(destinationPath, destinationName);\r\n    const { files, folders } = await readFolder(originPath, originName);\r\n\r\n    const promises = [\r\n        ...files.map(({ name }) => copyFile(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name)),\r\n        ...folders.map(({ name }) => copyFolder(`${originPath}/${originName}`, name, `${destinationPath}/${destinationName}`, name))\r\n    ];\r\n\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to upload files\r\n */\r\nexport async function upload(path: string, fileList: FileList): Promise<Response> {\r\n    const promises = Array.from(fileList).map(file => updateFile(path, file.name, file));\r\n    await Promise.all(promises);\r\n    return new Response();\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to create a folder\r\n */\r\nexport async function createFolder(path: string, folderName: string): Promise<Response> {\r\n    if (await folderExists(path, folderName))\r\n        return new Response();\r\n\r\n    return createItem(path, folderName, new Blob(), '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to replace or create a new file\r\n */\r\nexport async function updateFile(path: string, fileName: string, content: Blob|string): Promise<Response> {\r\n    await removeItem(path, fileName);\r\n    return createFile(path, fileName, content);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create a new file\r\n */\r\nexport async function createFile(path: string, fileName: string, content: Blob|string): Promise<Response> {\r\n    return createItem(path, fileName, content, '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to create create an item\r\n */\r\nasync function createItem(path: string, itemName: string, content: Blob|string, link: string): Promise<Response> {\r\n    const baseUrl = `${config.getHost()}${path}`;\r\n    const request = {\r\n        method: 'POST',\r\n        headers: {\r\n            link,\r\n            slug: itemName,\r\n            'Content-Type': undefined as any // TODO: This hack can be removed if this issue is fixed: https://github.com/solid/node-solid-server/issues/1165\r\n        },\r\n        body: content\r\n    };\r\n\r\n    return solidAuth.fetch(baseUrl, request)\r\n        .then(assertSuccessfulResponse);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove multiple items\r\n */\r\nexport async function removeItems(path: string, itemNames: string[]): Promise<Response> {\r\n    return Promise.all(itemNames.map(itemName => removeItem(path, itemName)))\r\n        .then(() => new Response());\r\n};\r\n\r\n\r\n/**\r\n * Fetch API to remove one item\r\n */\r\nexport async function removeItem(path: string, itemName: string): Promise<Response> {\r\n    const url = buildFileUrl(path, itemName);\r\n\r\n    const response = await solidAuth.fetch(url, { method: 'DELETE' });\r\n    if (response.status === 409 || response.status === 301) {\r\n        // Solid pod returns 409 if the item is a folder and is not empty\r\n        // Solid pod returns 301 if is attempted to read a folder url without '/' at the end (from buildFileUrl)\r\n        return removeFolderRecursively(path, itemName);\r\n    }\r\n    else if (response.status === 404) {\r\n        // Don't throw if the item didn't exist\r\n        return response;\r\n    }\r\n    else {\r\n        assertSuccessfulResponse(response);\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents and folder itself recursively\r\n */\r\nexport async function removeFolderRecursively(path: string, folderName: string): Promise<Response> {\r\n    await removeFolderContents(path, folderName);\r\n    return removeItem(path, folderName);\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to remove contents of one folder recursively\r\n */\r\nexport async function removeFolderContents(path: string, folderName: string): Promise<Response> {\r\n    const folderPath = `${path}/${folderName}`;\r\n\r\n    const { files, folders } = await readFolder(path, folderName);\r\n    const promises = [\r\n        ...files.map(({ name }) => removeItem(folderPath, name)),\r\n        ...folders.map(({ name }) => removeFolderRecursively(folderPath, name))\r\n    ];\r\n    await Promise.all(promises);\r\n    return new Response();\r\n}\r\n\r\n\r\n/**\r\n * Fetch API to check if a folder exists\r\n */\r\nexport async function folderExists(path: string, folderName: string): Promise<boolean> {\r\n    try {\r\n        await fetchFolder(path, folderName);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Response && error.status === 404)\r\n            return false;\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a folder name\r\n */\r\nfunction buildFolderUrl(path: string, folderName?: string): string {\r\n    return buildFileUrl(path, folderName) + '/';\r\n}\r\n\r\n\r\n/**\r\n * Build up an url from a path relative to the storage location and a fileName\r\n */\r\nfunction buildFileUrl(path: string, fileName?: string): string {\r\n    let url = `${config.getHost()}${path}/${fileName || ''}`;\r\n    while (url.slice(-1) === '/')\r\n        url = url.slice(0, -1);\r\n\r\n    return url;\r\n}\r\n\r\n\r\n/**\r\n * Throw response if fetch response was unsuccessful\r\n * @param {Response} response\r\n * @returns {Response}\r\n */\r\nfunction assertSuccessfulResponse(response: Response): Response {\r\n    if (!response.ok)\r\n        throw response;\r\n    return response;\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { Item } from './Item';\r\n\r\nexport default class ApiCache {\r\n    _data: Record<string, Item[]> = {};\r\n\r\n    /**\r\n     * Add data to the cache\r\n     */\r\n    add(path: string, itemList: Item[]): Item[] {\r\n        this._data[path] = itemList;\r\n        return itemList;\r\n    }\r\n\r\n    /**\r\n     * Return true if the url is already cached\r\n     */\r\n    contains(path: string): boolean {\r\n        return this._data.hasOwnProperty(path);\r\n    }\r\n\r\n    /**\r\n     * Get the cached data\r\n     */\r\n    get(path: string): Item[] {\r\n        return this._data[path];\r\n    }\r\n\r\n    /**\r\n     * Remove paths from the cache\r\n     */\r\n    remove(...paths: string[]) {\r\n        paths.filter(path => this.contains(path))\r\n            .forEach(path => delete this._data[path]);\r\n    }\r\n\r\n    /**\r\n     * Clear the whole cache\r\n     */\r\n    clear() {\r\n        this._data = {};\r\n    }\r\n}\r\n","import { Meta, MetaTag } from './MetaUtils';\r\n\r\n\r\ninterface CouchDbRowKeyValue {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport interface FoundTags {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\n\r\nexport default class CouchDb {\r\n\r\n  static couchDbServerUrl = `http://91.186.9.6:5984`\r\n  static couchDbDatabaseName = `solid`\r\n  //static couchDbServerUrl = `http://127.0.0.1:5984`\r\n  //static couchDbDatabaseName = `solidfilemanager`\r\n  static couchDbBaseUrl = `${CouchDb.couchDbServerUrl}/${CouchDb.couchDbDatabaseName}`\r\n\r\n  // unused.\r\n  static getMetaById(id: string) {\r\n    const xhr = this.createCORSRequest('GET', `${this.couchDbBaseUrl}/${id}`);\r\n    if (xhr) {\r\n      xhr.onload = function () {\r\n        const text = xhr.responseText;//=> ToDo return object\r\n        return text;\r\n      };\r\n      xhr.onerror = function () {\r\n        alert('Error calling request to CouchDb.');\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  //List of unique used tags\r\n  static async getItemsByViewGroupedTags(): Promise<MetaTag[]> {\r\n    //   http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/GroupedTags?reduce=true&group=true\r\n    const url: string = `${this.couchDbBaseUrl}/_design/DesignDoc/_view/GroupedTags?reduce=true&group=true`\r\n    let json = await this.executeQueryonCouch(url) as string\r\n    let response = JSON.parse(json)\r\n    let usedTag = [] as MetaTag[]\r\n    if (response.rows) {\r\n      response.rows.forEach((row: CouchDbRowKeyValue) => {\r\n        const tag = ({ tagType: row.key[0], value: row.key[1], published: true }) as MetaTag\r\n        usedTag.push(tag)\r\n      })\r\n    }\r\n    return usedTag\r\n  }\r\n\r\n  //List of Meta for selected Tags\r\n  static async getMetaFromTags(selectedTags: MetaTag[]): Promise<Meta[]> {\r\n    let tagsAsString = this.tagArrayTotring(selectedTags)\r\n    //   http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/MetasByTags?keys=['tagValue'']\r\n    const url: string = `${this.couchDbBaseUrl}/_design/DesignDoc/_view/MetasByTags?keys=${tagsAsString}`\r\n    let json = await this.executeQueryonCouch(url) as string\r\n    let response = JSON.parse(json)\r\n    let foundMeta = [] as Meta[]\r\n    if (response.rows) {\r\n      response.rows.forEach((row: CouchDbRowKeyValue) => {\r\n        const meta = row.value as unknown as Meta\r\n        foundMeta.push(meta)\r\n      })\r\n      //get unique\r\n      foundMeta = foundMeta.filter((foundMeta, index, self) =>\r\n      index === self.findIndex((t) => (\r\n        t._id === foundMeta._id\r\n      ))\r\n    )\r\n    }\r\n\r\n    return foundMeta\r\n  }\r\n\r\n  //ToDo: callback to handle error (rollback on Local?)\r\n  static updateMeta(meta: Meta) {\r\n    const xhr = this.createCORSRequest('GET', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      xhr.onload = function () {\r\n        const oldMeta = JSON.parse(xhr.responseText)\r\n        if (oldMeta && oldMeta._rev) meta._rev = oldMeta._rev\r\n        CouchDb.writeMeta(meta)\r\n      }\r\n      xhr.onerror = function () {\r\n        alert('Error reading original Meta when updating.');\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  //\"privates\", only called by previous updateMeta =================================================\r\n\r\n  static executeQueryonCouch(url: string): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = this.createCORSRequest('GET', url);\r\n      if (xhr) {\r\n        xhr.onload = () => {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            resolve(xhr.response)\r\n          } else {\r\n            reject(xhr.statusText);\r\n          }\r\n        };\r\n        xhr.onerror = () => reject(xhr.statusText);\r\n        xhr.send();\r\n      }\r\n    })\r\n  }\r\n\r\n  static writeMeta(meta: Meta) {\r\n    const xhr = this.createCORSRequest('PUT', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      // Response handlers.\r\n      xhr.onload = function () { };\r\n      xhr.onerror = function () {\r\n        alert('Error writing meta in CouchDb.');\r\n      };\r\n      xhr.send(JSON.stringify(meta));\r\n    }\r\n  }\r\n\r\n  // Create the XHR object.\r\n  static createCORSRequest(method: string, url: string) {\r\n    let xhr = new XMLHttpRequest();\r\n\r\n    if (\"withCredentials\" in xhr) {\r\n      // XHR for Chrome/Firefox/Opera/Safari.\r\n      xhr.open(method, url, true); //false to be sync\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      //} else if (typeof XDomainRequest != \"undefined\") {\r\n      //XDomainRequest for IE.\r\n      //Error: 'XDomainRequest' is not defined  no-undef\r\n      //xhr = new XDomainRequest();\r\n      //xhr.open(method, url);\r\n    } else {\r\n      alert('CORS not supported');\r\n    }\r\n    return xhr;\r\n  }\r\n\r\n  static createIdFromMeta(meta: Meta) {\r\n    const reg = new RegExp(\"[/]\", \"g\")\r\n    return (meta.hostName + meta.pathName).replace(reg, '.')\r\n  }\r\n\r\n  static tagArrayTotring(tags: MetaTag[]) {\r\n    let tagsAsAstring = ''\r\n    let comma = ''\r\n    tags.forEach(tag => {\r\n      tagsAsAstring += `${comma}\"${tag.tagType}:${tag.value}\"`\r\n      comma = ','\r\n    })\r\n    return `[${tagsAsAstring}]`\r\n  }\r\n\r\n}\r\n","import FileUtils from './FileUtils';\r\nimport { FolderItem } from './Item'\r\n\r\nimport lodash from 'lodash'\r\nimport { Item } from './Item';\r\nimport CouchDb from './CouchDb';\r\nimport config from '../config';\r\n\r\nconst tagDir = '/public'\r\nconst tagFileName = 'Meta.json'\r\nexport const onServerColor = 'rebeccapurple'\r\n\r\n//Same as Tag without description for Meta\r\nexport interface MetaTag {\r\n    tagType: string,\r\n    value: string,\r\n    published: boolean\r\n}\r\n\r\nexport interface Meta {\r\n    hostName: string,\r\n    pathName: string,\r\n    mimeType: string,\r\n    creationDate: Date,\r\n    tags: MetaTag[],\r\n    _id?: string,//CouchDb field\r\n    _rev?: string //CouchDb field \r\n}\r\n\r\nexport default class MetaUtils {\r\n\r\n    static allLocalMeta = [] as Meta[];\r\n    static currentMeta = {} as Meta;\r\n    static currentItem = {} as Item\r\n    //used in TagList\r\n    static currentLocalUsedTags = [] as MetaTag[]\r\n    static currentCentralUsedTags = [] as MetaTag[]\r\n\r\n    static getTagIndexFullPath() {\r\n        return `${config.getHost()}${tagDir}/${tagFileName}`\r\n    }\r\n\r\n    //Local storage, read the file and get all metas in it\r\n    static async getAllLocalMetas() {\r\n        let allMetas = [] as Meta[]\r\n        if (this.allLocalMeta.length !== 0) allMetas = this.allLocalMeta\r\n        else {\r\n            const baseUrl = (await FileUtils.loadUserIdAndHost()).baseUrl\r\n            var json: string = await FileUtils.fileClientReadFileAsString(`${baseUrl}${tagDir}/${tagFileName}`)\r\n            if (json === '') FileUtils.fileClientcreateFile(MetaUtils.getTagIndexFullPath())\r\n            else allMetas = JSON.parse(json)\r\n            this.allLocalMeta = allMetas\r\n        }\r\n        return allMetas\r\n    }\r\n    //List of Meta for selected tags\r\n    static async getMetaList(selectedTags: MetaTag[], localOrCentral: boolean): Promise<Meta[]> {\r\n        if (localOrCentral)\r\n            return this.getSelectedLocalMeta(selectedTags)\r\n        else\r\n            return this.getSelectedCentralMeta(selectedTags)\r\n    }\r\n\r\n    //list of loval meta from selected tags\r\n    static async getSelectedLocalMeta(selectedTags: MetaTag[]): Promise<Meta[]> {\r\n        const allLocalMetas = await this.getAllLocalMetas() as unknown as Meta[]\r\n        let filteredMetas = [] as Meta[]\r\n        //Create a list of copies of metas filtered by view selection and only wearing selected tags\r\n        if (false) {\r\n            //Filter: AND: ToDo\r\n        } else {\r\n            //Filter: OR   \r\n            selectedTags.forEach((testTag) => {\r\n                //get metas for current testTag and reset tags to its value\r\n                let havingTagMetas = this.filterByMetaTag(allLocalMetas, testTag)\r\n                havingTagMetas.forEach(havingTagMeta => {\r\n                    //search already in filtered to add or update list\r\n                    let existingFilteredMeta =\r\n                        lodash.find(filteredMetas, function (meta) {\r\n                            return havingTagMeta.hostName + havingTagMeta.pathName === meta.hostName + meta.pathName\r\n                        })\r\n                    if (existingFilteredMeta !== undefined) {\r\n                        existingFilteredMeta.tags.push(testTag)\r\n                    } else {\r\n                        //filteredMetas: \"fakes\" Meta having only selected tags of the current view\r\n                        let havingTagMetaCopy = JSON.parse(JSON.stringify(havingTagMeta))\r\n                        havingTagMetaCopy.creationDate = new Date(0)\r\n                        havingTagMetaCopy.tags = [testTag]\r\n                        filteredMetas.push(havingTagMetaCopy)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        return filteredMetas\r\n    }\r\n\r\n    //getLocalMetaList() helper, returns Metas having testTag\r\n    static filterByMetaTag(metas: Meta[], testTag: MetaTag) {\r\n        return lodash.filter(metas, function (meta) {\r\n            return lodash.some(meta.tags, function (tag) {\r\n                return (\r\n                    tag.tagType === testTag.tagType\r\n                    && tag.value === testTag.value\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    static async getSelectedCentralMeta(selectedTags: MetaTag[]): Promise<Meta[]> {\r\n        let foundMetas = await CouchDb.getMetaFromTags(selectedTags) as Meta[]\r\n        //Set color (using (property \"published\") to tags if Meta + tag are also on local\r\n        const allLocalMetas = await this.getAllLocalMetas() as unknown as Meta[]\r\n        allLocalMetas.forEach(localMeta => {\r\n            foundMetas.forEach(centralMeta => {\r\n                //if (localMeta.hostName === centralMeta.hostName\r\n                //    && localMeta.pathName === centralMeta.pathName) {\r\n                    centralMeta.tags.forEach(centralTag => {\r\n                        localMeta.tags.forEach(localTag => {\r\n                            if (localTag.tagType === centralTag.tagType\r\n                                && localTag.value === centralTag.value) {\r\n                                centralTag.published = true\r\n                            }\r\n                        })\r\n                    })\r\n                //}\r\n            })\r\n        })\r\n        return foundMetas\r\n    }\r\n\r\n\r\n    //Get or init the meta of a file\r\n    static async getOrInitMeta(item: Item) {\r\n        const url = new URL(item.getUrl())\r\n        //init in case no better foiund\r\n        let meta = {\r\n            hostName: url.hostname,\r\n            pathName: url.pathname,\r\n            mimeType: item instanceof FolderItem ? 'FOLDER' : '',\r\n            creationDate: new Date(),\r\n            tags: []\r\n        } as unknown as Meta\r\n        //Already the current one?\r\n        if (this.currentMeta !== undefined\r\n            && this.currentMeta.hostName === url.hostname && this.currentMeta.pathName === url.pathname)\r\n            meta = this.currentMeta\r\n        else {\r\n            //Read in meta storage\r\n            const allMetas: Meta[] = await this.getAllLocalMetas()\r\n            if (allMetas !== undefined) {\r\n                const existingMeta = allMetas.filter(el => el.hostName === url.hostname && el.pathName === url.pathname)[0]\r\n                if (existingMeta !== undefined) meta = existingMeta\r\n            }\r\n        }\r\n        this.currentMeta = meta\r\n        this.currentItem = item\r\n        return meta\r\n    }\r\n\r\n    static async updateMeta(meta: Meta) {\r\n        //FILE: remove old meta from list if exists and add the new one\r\n        let allLocalMetas: Meta[] = await this.getAllLocalMetas() as unknown as Meta[]\r\n        allLocalMetas = allLocalMetas.filter(el => !(el.hostName === meta.hostName && el.pathName === meta.pathName));\r\n        allLocalMetas.push(meta)\r\n        FileUtils.fileClientupdateFile(\r\n            await MetaUtils.getTagIndexFullPath(),\r\n            JSON.stringify(allLocalMetas)\r\n        )\r\n\r\n        //COUCHDB:\r\n        let metaCopy = JSON.parse(JSON.stringify(meta)) as Meta\r\n        metaCopy.tags = metaCopy.tags.filter(tag => tag.published);\r\n        metaCopy.tags.forEach(function (tag) { delete tag.published });\r\n        CouchDb.updateMeta(metaCopy)\r\n\r\n        //FINALLY\r\n        this.currentMeta = meta\r\n        this.allLocalMeta = allLocalMetas\r\n\r\n        this.refreshCurrentUsedTags()\r\n    }\r\n\r\n    // ========================================================= TAGS\r\n\r\n    static async getUsedTags(localOrCentral: number) {\r\n        return (\r\n            localOrCentral === 0\r\n                ? this.getLocalUsedTags()\r\n                : this.getCentralUsedTags()\r\n        )\r\n    }\r\n\r\n    static async getLocalUsedTags() {\r\n        let usedTags = [] as MetaTag[]\r\n        if (this.currentLocalUsedTags.length !== 0) usedTags = this.currentLocalUsedTags\r\n        else {\r\n            let allMetas: Meta[] = await this.getAllLocalMetas()\r\n            //get list of tags in meta\r\n            let foundTags = [] as MetaTag[]\r\n            if (allMetas) {\r\n                allMetas.forEach(meta => {\r\n                    if (meta.tags) {\r\n                        meta.tags.forEach(tag => {\r\n                            foundTags.push(tag)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            usedTags = lodash.uniqWith(foundTags, function (first, second) {\r\n                return first.tagType === second.tagType && first.value === second.value\r\n            });\r\n            usedTags = lodash.sortBy(usedTags, ['tagType', 'value']);\r\n            this.currentLocalUsedTags = usedTags\r\n        }\r\n        return usedTags\r\n    }\r\n\r\n    //Get tags on Central and mark them \"also on local?\"\r\n    static async getCentralUsedTags(): Promise<Array<any>> {\r\n        if (this.currentCentralUsedTags.length !== 0) return this.currentCentralUsedTags\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                CouchDb.getItemsByViewGroupedTags()\r\n                    .then(\r\n                        (centralTags: MetaTag[]) => {\r\n                            //meta.published property fakely used as \"central tag not published on this local?\"\r\n                            centralTags.forEach(centralTag => { centralTag.published = false })\r\n                            MetaUtils.getLocalUsedTags()\r\n                                .then((localTags: MetaTag[]) => {\r\n                                    localTags.forEach(localTag => {\r\n                                        if (localTag.published === true) {\r\n                                            this.markCentralFromLocal(centralTags, localTag)\r\n                                        }\r\n                                    })\r\n                                    this.currentCentralUsedTags = centralTags\r\n                                    resolve(centralTags)\r\n                                })\r\n                        }\r\n                    )\r\n            })\r\n        }\r\n    }\r\n\r\n    //getCentralUsedTags() helper: marks published=true to central tags found in local tags\r\n    static markCentralFromLocal(centralTags: MetaTag[], localTag: MetaTag) {\r\n        let publishedTags: MetaTag[] = lodash.filter(\r\n            centralTags,\r\n            function (tag) { return (tag.value === localTag.value) }\r\n        )\r\n        //publishedTags.length should be 0 or 1\r\n        publishedTags.forEach((tag: MetaTag) => tag.published = true)\r\n    }\r\n\r\n    static refreshCurrentUsedTags() {\r\n        this.currentLocalUsedTags = []\r\n        this.currentCentralUsedTags = []\r\n        //No need to load localUsedTags, will be done when loading centralUsedTags\r\n        this.getCentralUsedTags()\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import * as API from './Api';\r\nimport JSZip from 'jszip';\r\nimport { FileItem, FolderItem, Item } from './Item';\r\nimport ApiCache from './ApiCache';\r\nimport MetaUtils, { Meta, MetaTag } from './MetaUtils';\r\n\r\nconst cache = new ApiCache();\r\n\r\n/**\r\n * Log a fetch response error and throw it again\r\n * @param {*} error \r\n */\r\nconst handleFetchError = async (error: Error | Response | string) => {\r\n    let detailedErrorMessage = '';\r\n    let displayErrorMessage: string | undefined;\r\n\r\n    console.group('handleFetchError');\r\n    if (error instanceof Response) {\r\n        detailedErrorMessage = await error.text();\r\n\r\n        console.error(`url: ${error.url}`);\r\n        console.error(`status: ${error.status}`);\r\n\r\n        const displayMessages: Record<string, string> = {\r\n            '401': `The ressource at ${error.url} requires you to login.`,\r\n            '403': `You don't have permission to access the ressource at ${error.url}.\r\n            Please make sure that you are logged in with the correct account.\r\n            If the server runs with version 5.0.0 or higher, make sure you gave this app read/write permission`,\r\n            '404': `The ressource at ${error.url} was not found`,\r\n            '500': `An internal server error occured...\r\n            ${detailedErrorMessage}`,\r\n        };\r\n        if (error.status in displayMessages)\r\n            displayErrorMessage = displayMessages[error.status];\r\n    }\r\n    else if (error instanceof Error) {\r\n        detailedErrorMessage = error.message;\r\n        console.error(error.stack);\r\n    }\r\n    else if (typeof error === 'string') {\r\n        detailedErrorMessage = error;\r\n    }\r\n    else {\r\n        detailedErrorMessage = JSON.stringify(error);\r\n    }\r\n    console.error(`errorMessage: ${detailedErrorMessage}`);\r\n    console.error(`error: ${error}`);\r\n    console.groupEnd();\r\n\r\n    throw new Error((displayErrorMessage) ? displayErrorMessage : detailedErrorMessage);\r\n}\r\n\r\n/**\r\n * Clean path string removing double slashes and prepending a slash if non-empty\r\n */\r\nconst fixPath = (path: string): string => {\r\n    if (path === \"\")\r\n        return path;\r\n    return ('/' + path).replace(/\\/\\//g, '/');\r\n};\r\n\r\n/**\r\n * Wrap API response for retrieving item list\r\n * itemList is cached automatically\r\n * @param {String} path\r\n * @returns {Promise<API.FolderItems>}\r\n */\r\nexport const getItemList = (path: string): Promise<Item[]> => {\r\n    path = fixPath(path);\r\n    if (cache.contains(path))\r\n        return Promise.resolve(cache.get(path));\r\n    return API.readFolder(path)\r\n        .then(({ files, folders }) => [...files, ...folders])\r\n        .then(itemList => cache.add(path, itemList))\r\n        .catch(handleFetchError);\r\n};\r\n\r\nexport const clearCacheForFolder = (path: string) => cache.remove(fixPath(path));\r\nexport const clearCache = () => cache.clear();\r\n\r\n/**\r\n * Wrap API response for retrieving file content\r\n */\r\nexport const getFileBlob = (path: string, filename: string): Promise<Blob> => {\r\n    path = fixPath(path);\r\n    return API.fetchFile(path, filename)\r\n        .then(response => response.blob())\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for taging a file\r\n */\r\nexport const editTags = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.editTags(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a file\r\n */\r\nexport const renameFile = (path: string, fileName: string, newFileName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFile(path, fileName, newFileName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for renaming a folder\r\n */\r\nexport const renameFolder = (path: string, folderName: string, newFolderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.renameFolder(path, folderName, newFolderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for creating a folder\r\n */\r\nexport const createFolder = (path: string, folderName: string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!(folderName || '').trim()) {\r\n        return Promise.reject('Invalid folder name');\r\n    }\r\n    return API.createFolder(path, folderName)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for removing a file or folder\r\n */\r\nexport const removeItems = (path: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to remove');\r\n    }\r\n    return API.removeItems(path, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for moving a file or folder\r\n */\r\nexport const moveItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to move');\r\n    }\r\n    return API.moveItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for copying a file or folder\r\n */\r\nexport const copyItems = (path: string, destination: string, filenames: string[]): Promise<Response> => {\r\n    path = fixPath(path);\r\n    destination = fixPath(destination);\r\n    cache.remove(path, destination);\r\n    if (!filenames.length) {\r\n        return Promise.reject('No files to copy');\r\n    }\r\n    return API.copyItems(path, destination, filenames)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading files\r\n */\r\nexport const uploadFiles = (path: string, fileList: FileList): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n\r\n    if (!fileList.length) {\r\n        return Promise.reject('No files to upload');\r\n    }\r\n    return API.upload(path, fileList)\r\n        .catch(handleFetchError)\r\n};\r\n\r\n/**\r\n * Wrap API response for uploading a file\r\n */\r\nexport const updateFile = (path: string, fileName: string, content: Blob|string): Promise<Response> => {\r\n    path = fixPath(path);\r\n    cache.remove(path);\r\n    return API.updateFile(path, fileName, content)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for save Meta definition (including its tags)\r\n */\r\nexport const updateMeta = (meta: Meta) => {\r\n    MetaUtils.updateMeta(meta)\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API to load metas of selectedTags\r\n */\r\nexport const getMetaList = (selectedTags: MetaTag[], localOrCentral: boolean): Promise<Meta[]> => {\r\n    return MetaUtils.getMetaList(selectedTags, localOrCentral)\r\n        .then()\r\n        .catch(handleFetchError);\r\n};\r\n\r\n/**\r\n * Wrap API response for zipping multiple items\r\n */\r\nexport const getAsZip = (path: string, itemList: Item[]): Promise<JSZip> => {\r\n    path = fixPath(path);\r\n    const zip = new JSZip();\r\n\r\n    return addItemsToZip(zip, path, itemList)\r\n        .then(() => zip);\r\n}\r\n\r\n/**\r\n * Add items to a zip object recursively\r\n */\r\nconst addItemsToZip = (zip: JSZip, path: string, itemList: Item[]): Promise<void[]> => {\r\n    const promises = itemList.map(async item => {\r\n        if (item instanceof FolderItem) {\r\n            const zipFolder = zip.folder(item.name);\r\n            const folderPath = `${path}/${item.name}`;\r\n            const folderItems = await getItemList(folderPath);\r\n            await addItemsToZip(zipFolder, folderPath, folderItems);\r\n        }\r\n        else if (item instanceof FileItem) {\r\n            const blob = await getFileBlob(path, item.name);\r\n            zip.file(item.name, blob, { binary: true });\r\n        }\r\n    });\r\n\r\n    return Promise.all(promises);\r\n}\r\n\r\n/**\r\n * Wrap API response for extracting a zip archive\r\n */\r\nexport const extractZipArchive = async (path: string, destination: string = path, fileName: string) => {\r\n    const blob = await getFileBlob(path, fileName);\r\n    const zip = await JSZip.loadAsync(blob);\r\n\r\n    return uploadExtractedZipArchive(zip, destination);\r\n};\r\n\r\n/**\r\n * Recursively upload all files and folders from an extracted zip archive\r\n */\r\nasync function uploadExtractedZipArchive(zip: JSZip, destination: string, curFolder = ''): Promise<void[]> {\r\n    const promises = getItemsInZipFolder(zip, curFolder)\r\n        .map(async item => {\r\n            const relativePath = item.name;\r\n            const itemName = getItemNameFromPath(relativePath);\r\n            const path = getParentPathFromPath(`${destination}/${relativePath}`);\r\n\r\n            if (item.dir) {\r\n                await createFolder(path, itemName);\r\n                await uploadExtractedZipArchive(zip, destination, relativePath);\r\n            }\r\n            else {\r\n                const blob = await item.async('blob');\r\n                await updateFile(path, itemName, blob);\r\n            }\r\n        });\r\n\r\n    return Promise.all(promises);\r\n};\r\n\r\nfunction getItemsInZipFolder(zip: JSZip, folderPath: string): JSZip.JSZipObject[] {\r\n    return Object.keys(zip.files)\r\n        .filter(fileName => {\r\n            // Only items in the current folder and subfolders\r\n            const relativePath = fileName.slice(folderPath.length, fileName.length);\r\n            if (!relativePath || fileName.slice(0, folderPath.length) !== folderPath)\r\n                return false;\r\n            \r\n            // No items from subfolders\r\n            if (relativePath.includes('/') && relativePath.slice(0, -1).includes('/'))\r\n                return false;\r\n\r\n            return true;\r\n        })\r\n        .map(key => zip.files[key]);\r\n};\r\n\r\nfunction getItemNameFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    return path.substr(path.lastIndexOf('/') + 1);\r\n}\r\n\r\nfunction getParentPathFromPath(path: string): string {\r\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\r\n    path = path.substr(0, path.lastIndexOf('/'));\r\n    return path;\r\n}\r\n","import * as APIHandler from '../Api/ApiHandler';\r\nimport * as solidAuth from 'solid-auth-client';\r\n//import { createBrowserHistory, History } from 'history';\r\nimport { Item, FileItem, FolderItem } from '../Api/Item';\r\n//removed ENTER_FOLDER, \r\nimport { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_ITEMS, SET_METAS, SET_WEB_ID, SELECT_ITEMS, TOGGLE_SELECTED_ITEM, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, DISPLAY_LOADING, STOP_LOADING, DIALOGS, OPEN_DIALOG, CLOSE_DIALOG, SET_LOADED_BLOB, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS, SET_PATH, MOVE_FOLDER_UPWARDS, RESET_LOADED_BLOB, RESET_HOST, RESET_WEB_ID, SET_ERROR_MESSAGE, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from './actionTypes';\r\nimport { AppState } from '../Reducers/reducer';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { Meta, MetaTag } from '../Api/MetaUtils';\r\n\r\nexport type MyThunk = ThunkAction<void, AppState, null, Action<any>>;\r\nexport type MyDispatch = ThunkDispatch<AppState, null, Action<any>>;\r\n\r\nexport const initApp = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(updateLoginStatus());\r\n    dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n};\r\n\r\n\r\nexport const solidLogin = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(displayLoading());\r\n\r\n    solidPopupLogin()\r\n        .then(session => dispatch(updateLoginStatus(session)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const updateLoginStatus = (session?: Session | null): MyThunk => async (dispatch, getState) => {\r\n    session = session || await solidAuth.currentSession();\r\n    if (!session) {\r\n        dispatch(setLoggedOut());\r\n        dispatch(resetWebId());\r\n    }\r\n    else {\r\n        dispatch(setWebId(session.webId));\r\n        dispatch(setLoggedIn());\r\n    }\r\n}\r\n\r\nasync function solidPopupLogin() {\r\n    return solidAuth.popupLogin({ popupUri: './vendor/solid-auth-client/popup.html' });\r\n}\r\n\r\n\r\nexport const solidLogout = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(displayLoading());\r\n\r\n    solidAuth.logout()\r\n        .then(() => {\r\n            dispatch(resetPath());\r\n            dispatch(resetItems());\r\n            dispatch(resetSelectedItems());\r\n            dispatch(setLoggedOut());\r\n            dispatch(resetWebId());\r\n\r\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\nexport const clearCache = (): MyThunk => (dispatch, getState) => APIHandler.clearCache();\r\n\r\n\r\n/**\r\n * Request API to get file list for the selected path then refresh UI\r\n */\r\nexport const uploadFiles = (): MyThunk => (dispatch, getState) => {\r\n    const { path, upload: { fileList } } = getState();\r\n\r\n    if (fileList === null)\r\n        return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\r\n\r\n    dispatch(displayLoading());\r\n    dispatch(resetSelectedItems());\r\n    dispatch(setFileUploadProgress(50));\r\n\r\n    APIHandler.uploadFiles(path.join('/'), fileList)\r\n        .then(r => {\r\n            dispatch(setFileUploadProgress(100));\r\n            setTimeout(f => {\r\n                dispatch(resetFileUploader());\r\n            }, 300);\r\n            dispatch(displayCurrentItemList());\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const createFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.updateFile(path.join('/'), fileName, new Blob())\r\n        .then(r => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(loadAndEditFile(fileName));\r\n            return APIHandler.getItemList(path.join('/'));\r\n        })\r\n        .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\r\n        .then(item => {\r\n            if (!item)\r\n                throw new Error(\"Couldn't load created file for editing\");\r\n            dispatch(selectItem(item));\r\n            dispatch(getFileContent(item.name));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\nexport const updateTextFile = (fileName: string, content: Blob | string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.updateFile(path.join('/'), fileName, content)\r\n        .then(r => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n            dispatch(displayCurrentItemList());\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n}\r\n\r\n/**\r\n * Request API to get file tags  and display them\r\n */\r\nexport const loadAndEditTags = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.EDITTAGS));\r\n};\r\n\r\nexport const updateMeta = (meta: Meta): MyThunk => (dispatch, getState) => {\r\n    APIHandler.updateMeta(meta)\r\n    dispatch(closeDialog(DIALOGS.EDITTAGS));\r\n}\r\n\r\n/**\r\n * Request API to display Meta list for the selected tag\r\n */\r\nexport const getMetaList = (selectedTags: MetaTag[], localOrCentral: boolean): MyThunk => (dispatch, getState) => {\r\n        dispatch(displayLoading());\r\n        APIHandler.getMetaList(selectedTags, localOrCentral)\r\n            .then(items => dispatch(setMetas(items)))\r\n            .catch(r => dispatch(setErrorMessage(String(r))))\r\n            .finally(() => dispatch(stopLoading())); \r\n};\r\n\r\n/**\r\n * Request API to display file list for the selected path\r\n */\r\nexport const displayCurrentItemList = (): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n    dispatch(resetSelectedItems());\r\n    APIHandler.getItemList(path.join('/'))\r\n        .then(items => dispatch(setItems(items)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to reload the file list and then refresh UI\r\n */\r\nexport const refreshItemList = (): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    APIHandler.clearCacheForFolder(path.join('/'));\r\n    return dispatch(displayCurrentItemList());\r\n};\r\n\r\n/**\r\n * Request API to rename file then dispatch defined events\r\n */\r\nexport const renameFile = (fileName: string, newFileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.renameFile(path.join('/'), fileName, newFileName)\r\n        .then(() => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to rename folder then dispatch defined events\r\n */\r\nexport const renameFolder = (folderName: string, newFolderName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.renameFolder(path.join('/'), folderName, newFolderName)\r\n        .then(() => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API to download the specified items\r\n */\r\nexport const downloadItems = (items: Item[]): MyThunk => async (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    try {\r\n        let blob;\r\n        let downloadName = items[0].name;\r\n        if (items.length === 1 && items[0] instanceof FileItem) {\r\n            blob = await APIHandler.getFileBlob(path.join('/'), items[0].name);\r\n        }\r\n        else {\r\n            const zip = await APIHandler.getAsZip(path.join('/'), items);\r\n            blob = await zip.generateAsync({ type: 'blob' });\r\n\r\n            if (items.length > 1)\r\n                downloadName = 'Archive';\r\n            downloadName = `${downloadName}.zip`;\r\n        }\r\n\r\n        promptDownload(blob, downloadName);\r\n    }\r\n    catch (e) {\r\n        dispatch(setErrorMessage(String(e)));\r\n    }\r\n    dispatch(stopLoading());\r\n};\r\n\r\n/**\r\n * Request API to upload the items as zip archive\r\n */\r\nexport const zipAndUpload = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const archiveName = (items.length === 1 && items[0] instanceof FolderItem) ?\r\n        `${items[0].name}.zip`\r\n        : 'Archive.zip';\r\n\r\n    APIHandler.getAsZip(path.join('/'), items)\r\n        .then(zip => zip.generateAsync({ type: 'blob' }))\r\n        .then(blob => APIHandler.updateFile(path.join('/'), archiveName, blob))\r\n        .then(() => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n/**\r\n * Request API for extracting a zip archive\r\n */\r\nexport const extractZipFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.extractZipArchive(path.join('/'), path.join('/'), fileName)\r\n        .then(r => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n// code based on https://stackoverflow.com/a/30832210/6548154\r\nfunction promptDownload(file: Blob, fileName: string) {\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, fileName);\r\n    else { // Others\r\n        const a = document.createElement(\"a\");\r\n        const url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(() => {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }, 0);\r\n    }\r\n}\r\n\r\n/**\r\n * Opens the item in a new tab\r\n */\r\nexport const openInNewTab = (item: Item): MyThunk => (dispatch, getState) => {\r\n    window.open(item.url, '_blank');\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content then dispatch defined events\r\n */\r\nexport const getFileContent = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n    dispatch(resetFileContent());\r\n\r\n    APIHandler.getFileBlob(path.join('/'), fileName)\r\n        .then(blob => dispatch(setFileContent(blob)))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and open the edit dialogue\r\n */\r\nexport const loadAndEditFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.EDIT));\r\n};\r\n\r\nexport const loadAndEditFileFromTag = (fileName: string, path: string[]): MyThunk => (dispatch, getState) => {\r\n    dispatch(setPath(path));\r\n    dispatch(loadAndEditFile(fileName));\r\n};\r\n\r\n\r\n/**\r\n * Request API to get file content and display it\r\n */\r\nexport const loadAndDisplayFile = (fileName: string): MyThunk => (dispatch, getState) => {\r\n    dispatch(getFileContent(fileName));\r\n    dispatch(openDialog(DIALOGS.CONTENT));\r\n};\r\n\r\nexport const loadAndDisplayFileFromTag = (fileName: string, path: string[]): MyThunk => (dispatch, getState) => {\r\n    dispatch(setPath(path));\r\n    dispatch(loadAndDisplayFile(fileName));\r\n};\r\n\r\n/**\r\n * Request API to display an audio or video file\r\n */\r\nexport const displaySelectedMediaFile = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(openDialog(DIALOGS.MEDIA));\r\n};\r\n\r\nexport const displaySelectedMediaFileFromTag = (path: string[]): MyThunk => (dispatch, getState) => {\r\n    dispatch(setPath(path));\r\n    dispatch(displaySelectedMediaFile());\r\n};\r\n\r\n\r\n/**\r\n * Request API to create a folder then dispatch defined events\r\n */\r\nexport const createNewFolder = (folderName: string): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    APIHandler.createFolder(path.join('/'), folderName)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to remove multiple items\r\n */\r\nexport const removeItems = (items: Item[]): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.removeItems(path.join('/'), itemNames)\r\n        .then(r => dispatch(displayCurrentItemList()))\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to move multiple items\r\n */\r\nexport const moveItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n\r\n    const destination = targetPath.join('/');\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.moveItems(path.join('/'), destination, itemNames)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * Request API to copy an item then dispatch defined events\r\n */\r\nexport const copyItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\r\n    const { path } = getState();\r\n    dispatch(displayLoading());\r\n\r\n    const destination = targetPath.join('/');\r\n    const itemNames = items.map(f => f.name);\r\n\r\n    APIHandler.copyItems(path.join('/'), destination, itemNames)\r\n        .then(r => {\r\n            dispatch(displayCurrentItemList());\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        })\r\n        .catch(r => dispatch(setErrorMessage(String(r))))\r\n        .finally(() => dispatch(stopLoading()));\r\n};\r\n\r\n\r\n/**\r\n * This handles multiple selection by using shift key\r\n */\r\nexport const setSelectedItemsFromLastTo = (lastFile: Item): MyThunk => (dispatch, getState) => {\r\n    const { items: { inCurFolder: items, selected: selectedItems } } = getState();\r\n\r\n    const lastPreviouslySelected = [...selectedItems].pop();\r\n    if (!lastPreviouslySelected)\r\n        return dispatch(setErrorMessage(\"Couldn't enlarge selection because no items were previously selected\"));\r\n\r\n    const lastPreviouslySelectedIndex = items.indexOf(lastPreviouslySelected);\r\n    const lastSelectedIndex = items.indexOf(lastFile);\r\n\r\n    const isInRange = (num: number, start: number, end: number) => start <= num && num <= end;\r\n    const toAdd = lastSelectedIndex > lastPreviouslySelectedIndex ?\r\n        items.filter((item, index) => isInRange(index, lastPreviouslySelectedIndex, lastSelectedIndex))\r\n        : items.filter((item, index) => isInRange(index, lastSelectedIndex, lastPreviouslySelectedIndex));\r\n\r\n    dispatch(selectItems([...selectedItems, ...toAdd]));\r\n};\r\n\r\nexport const resetFileUploader = (): MyThunk => (dispatch, getState) => {\r\n    dispatch(setFileUploadProgress(0));\r\n    dispatch(closeDialog(DIALOGS.UPLOAD_FILE));\r\n    dispatch(resetFileUploadList());\r\n};\r\n\r\n\r\nexport const enterFolder = (path: string[]): MyThunk => (dispatch, getState) => {\r\n    dispatch(setPath(path));\r\n    dispatch(resetFilter());\r\n    dispatch(displayCurrentItemList());\r\n};\r\n\r\nexport const enterFolderByItem = (item: Item): MyThunk => (dispatch, getState) => {\r\n    const path = item.path;\r\n    // Open containing folder if it is a file\r\n    dispatch(enterFolder(item instanceof FileItem ? path : [...path, item.name]));\r\n};\r\n\r\nexport const moveFolderUpwardsAndRefresh = (n: number): MyThunk => (dispatch, getState) => {\r\n    dispatch(moveFolderUpwards(n));\r\n    dispatch(refreshItemList());\r\n};\r\n\r\nexport const rightClickOnFile = (item: Item): MyThunk => (dispatch, getState) => {\r\n    const { items: { selected } } = getState();\r\n    const isSelected = selected.includes(item);\r\n\r\n    !isSelected && dispatch(selectItem(item));\r\n};\r\n\r\n// Create action which can be dispatched\r\nconst makeActionCreator: <VALUE = void>(type: string) => (value: VALUE) => Action<VALUE> = <VALUE = void>(type: string) => (value: VALUE) => {\r\n    return {\r\n        type,\r\n        value\r\n    };\r\n};\r\n\r\nexport const moveFolderUpwards = makeActionCreator<number>(MOVE_FOLDER_UPWARDS);\r\nexport const setPath = makeActionCreator<string[]>(SET_PATH);\r\nexport const resetPath = () => setPath([]);\r\n\r\nexport const setLoggedIn = makeActionCreator(SET_LOGGED_IN);\r\nexport const setLoggedOut = makeActionCreator(SET_LOGGED_OUT);\r\nexport const setHost = makeActionCreator<string>(SET_HOST);\r\nexport const resetHost = makeActionCreator(RESET_HOST);\r\nexport const setWebId = makeActionCreator<string>(SET_WEB_ID);\r\nexport const resetWebId = makeActionCreator(RESET_WEB_ID);\r\n\r\nexport const setItems = makeActionCreator<Item[]>(SET_ITEMS);\r\nexport const resetItems = () => setItems([]);\r\n\r\nexport const setMetas = makeActionCreator<Meta[]>(SET_METAS);\r\n\r\nexport const selectItems = makeActionCreator<Item[]>(SELECT_ITEMS);\r\nexport const selectItem = (item: Item) => selectItems([item]);\r\nexport const resetSelectedItems = () => selectItems([]);\r\nexport const toggleSelectedItem = makeActionCreator<Item>(TOGGLE_SELECTED_ITEM);\r\nexport const deselectItem = makeActionCreator<Item>(DESELECT_ITEM);\r\n\r\nexport const filterItems = makeActionCreator<string>(FILTER_ITEMS);\r\nexport const resetFilter = makeActionCreator(RESET_FILTER);\r\n\r\n\r\nexport const displayLoading = makeActionCreator(DISPLAY_LOADING);\r\nexport const stopLoading = makeActionCreator(STOP_LOADING);\r\n\r\nexport const resetFileContent = makeActionCreator(RESET_LOADED_BLOB);\r\nexport const setFileContent = makeActionCreator<Blob>(SET_LOADED_BLOB);\r\nexport const setFileUploadList = makeActionCreator<FileList | null>(SET_UPLOAD_FILE_LIST);\r\nexport const resetFileUploadList = () => setFileUploadList(null);\r\nexport const setFileUploadProgress = makeActionCreator<number>(SET_UPLOAD_FILE_PROGRESS);\r\n\r\nexport const openDialog = makeActionCreator<DIALOGS>(OPEN_DIALOG);\r\nexport const closeDialog = makeActionCreator<DIALOGS>(CLOSE_DIALOG);\r\nexport const openContextMenu = makeActionCreator<{ x: number, y: number }>(OPEN_CONTEXT_MENU);\r\nexport const closeContextMenu = makeActionCreator(CLOSE_CONTEXT_MENU);\r\n\r\nexport const setErrorMessage = makeActionCreator<string>(SET_ERROR_MESSAGE);\r\nexport const resetErrorMessage = () => setErrorMessage('');\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n//import { styled } from '@material-ui/styles';\r\n\r\nimport { enterFolderByItem, MyDispatch } from '../../Actions/Actions';\r\n\r\nimport { Item } from '../../Api/Item';\r\n\r\ninterface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    alreadyReadSubFolders?: boolean;//details of sub folders are read\r\n}\r\n\r\ninterface IState {\r\n    [index: string]: boolean;\r\n}\r\n\r\n/*\r\nconst MyListItem =  styled(ListItem)({\r\n    padding: '0 16px 0px 16px',\r\n});\r\n\r\nconst MyListItemText = styled(ListItemText)({\r\n    fontSize: '0.8em',\r\n    padding: '0 0px',\r\n});\r\n*/\r\n\r\nclass TreeViewItem extends React.Component<TreeViewProps> {\r\n\r\n    state = {} as IState;\r\n    colNumber = 2;\r\n\r\n    render() {\r\n        //handleClick to show details on other view, from Redux\r\n        //itemHandleCkick from parent to expand/collapse\r\n        const { item, handleClick, colNumber, itemHandleClick } = this.props\r\n\r\n        return (\r\n            <ListItem style={{ padding: '0 16px 0px 16px'}}\r\n                button\r\n                key={item.name}\r\n                onClick={itemHandleClick.bind(this, item)}\r\n            >\r\n                {this.blanks(colNumber)}\r\n                <div\r\n                    key={item.name}\r\n                >\r\n                    {item.folders && item.folders.length !== 0 ? (\r\n                        this.props.expColl\r\n                            ? (<ExpandLess key={item.name} />)\r\n                            : (<ExpandMore key={item.name} />)\r\n                    ) : (this.Blank())}\r\n                </div>\r\n\r\n                <ListItemText style={{ fontSize: '0.8em', padding: '0 0px',}}\r\n                    key={item.name + 'txt'}\r\n                    onClick={handleClick}\r\n                >\r\n                    {item.name}\r\n                </ListItemText>\r\n\r\n            </ListItem>\r\n        )\r\n    }\r\n\r\n    Blank = () =>\r\n        <svg\r\n            width=\"24px\"\r\n            height=\"24px\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n        >\r\n            <path d=\"\" fill=\"#fff\" />\r\n        </svg>;\r\n\r\n\r\n    blanks(colNumber: number) {\r\n        const blanks = [];\r\n        for (var it = 0; it < colNumber; it++) {\r\n            blanks.push(\r\n                this.Blank()\r\n            )\r\n        }\r\n        return blanks\r\n    }\r\n}\r\n\r\ninterface TreeViewOwnProps {\r\n    item: IFolder;\r\n    colNumber: number;\r\n    itemHandleClick(folder: IFolder): void;\r\n    expColl: boolean\r\n}\r\n\r\ninterface StateProps {\r\n}\r\ninterface DispatchProps {\r\n    handleClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface TreeViewProps extends TreeViewOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: TreeViewOwnProps): DispatchProps => {\r\n    return {\r\n        handleClick: () => {\r\n            const item = new Item(ownProps.item.url)\r\n            dispatch(enterFolderByItem(item));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TreeViewItem);\r\n","import React from 'react';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  progress: {\r\n    margin: theme.spacing.unit * 10,\r\n  },\r\n});\r\n\r\nfunction Loader(props: LoaderProps) {\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <CircularProgress className={props.classes.progress} color=\"secondary\" />\r\n        </Grid>\r\n    );\r\n}\r\n\r\ninterface LoaderProps extends WithStyles<typeof styles> {};\r\n\r\nexport default withStyles(styles)(Loader);\r\n","import React, { Component } from 'react';\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\n//import { styled } from '@material-ui/styles';\r\n\r\nimport FileUtils, { IFolder } from '../../Api/FileUtils';\r\nimport TreeViewItem from \"./TreeViewItem\";\r\nimport Loader from '../Loader/Loader'; \r\n\r\ninterface IState {\r\n    [index: string]: boolean;\r\n}\r\n\r\n/*\r\nconst MyList = styled(List)({\r\n    width: 'max-content',\r\n    flexShrink: 0\r\n});\r\n*/\r\n\r\nexport default class TreeView extends Component {\r\n    state = {} as IState;\r\n    folder = {} as IFolder;\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.itemHandleClick = this.itemHandleClick.bind(this)\r\n    }\r\n\r\n    //sent to TreeViewItem for expand/collapse handled here\r\n    itemHandleClick(folder: IFolder) {\r\n        this.updateFolder(folder)\r\n        this.setState({ [folder.url]: !this.state[folder.url] });\r\n    };\r\n\r\n    async initFolders() {\r\n        \r\n        const baseUrl = (await FileUtils.loadUserIdAndHost()).baseUrl\r\n        \r\n        if (baseUrl !== null) {\r\n            this.folder = await FileUtils.fileClientReadFolder(baseUrl)\r\n\r\n            //get folders in the root\r\n            await this.updateFolder(this.folder)\r\n            this.forceUpdate()\r\n\r\n            //and then update those folders so that the arrows (if any) are visible\r\n            for (var i = 0; i < this.folder.folders.length; i++) {\r\n                await this.updateFolder(this.folder.folders[i])\r\n            }\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    //also called on folder icon click\r\n    async updateFolder(item: IFolder) {\r\n        for (var i = 0; i < item.folders.length; i++) {\r\n            if (item.folders[i].known !== true) {\r\n                item.folders[i] = await FileUtils.fileClientReadFolder(item.folders[i].url)\r\n                item.folders[i].known = true\r\n            }\r\n            for (var j = 0; j < item.folders[i].folders.length; j++) {\r\n                try {\r\n                    if (item.folders[i].folders[j].known !== true) {\r\n                        item.folders[i].folders[j] =\r\n                            await FileUtils.fileClientReadFolder(item.folders[i].folders[j].url)\r\n                            item.folders[i].folders[j].known = true\r\n                    }\r\n                } catch (err) {\r\n                    //Error on some damaged folders, skip ...\r\n                }\r\n            }\r\n        }\r\n     }\r\n\r\n    render() {\r\n        if (this.folder.name === undefined) {\r\n            this.initFolders()\r\n            return (<div><Loader/></div>)\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <List style={{width: 'max-content', flexShrink: 0 }}\r\n                        subheader={<ListSubheader></ListSubheader>}>\r\n                        {this.printRows(this.folder.folders, -1)}\r\n                    </List>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    };\r\n\r\n    printRows(items: IFolder[], colNumber: number) {\r\n        colNumber = colNumber + 1\r\n        if (items != null) {\r\n            return (\r\n                items.map((item: IFolder) => {\r\n                    return (\r\n                        <div key={item.name}>\r\n                            <TreeViewItem\r\n                                item={item}\r\n                                key={0}\r\n                                colNumber={colNumber}\r\n                                itemHandleClick={this.itemHandleClick}\r\n                                expColl={this.state[item.url]}\r\n                            />\r\n                            {item.folders != null ? (\r\n                                <Collapse\r\n                                    key={item.name + 'col'}\r\n                                    component=\"div\"\r\n                                    in={this.state[item.url]}\r\n                                    timeout=\"auto\"\r\n                                    unmountOnExit\r\n                                >\r\n                                    {this.printRows(item.folders, colNumber)}\r\n                                </Collapse>\r\n                            ) : (null)}\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            );\r\n        }\r\n        colNumber = colNumber - 1\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n//import { styled } from '@material-ui/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { getMetaList, MyDispatch } from '../../Actions/Actions';\r\nimport MetaUtils, { MetaTag, onServerColor } from '../../Api/MetaUtils'\r\n\r\nexport class TagList extends Component<TagListProps> {\r\n\r\n    usedTags = [[]] as MetaTag[][]\r\n    selectedTags = [[]] as MetaTag[][]\r\n\r\n    localOrCentral = true as boolean\r\n    LC = 0 as number\r\n\r\n    //showLocal(true)OrCentral(false)\r\n    state = {\r\n        localOrCentral: true,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ localOrCentral: true })\r\n        this.selectedTags[0] = []\r\n        this.selectedTags[1] = []\r\n        this.refreshView();\r\n    };\r\n\r\n    refreshView() {\r\n        MetaUtils.getUsedTags(this.LC)\r\n            .then(foundTags => {\r\n                this.usedTags[this.LC] = foundTags;\r\n                this.setState({ loading: false })\r\n            })\r\n        this.props.handleSubmit(this.selectedTags[this.LC], this.localOrCentral);\r\n\r\n    }\r\n\r\n    //Select a tag to load related Metas. Target is MetaUtils.getMetaList\r\n    handleClick(metaTag: MetaTag) {\r\n        //event.preventDefault();\r\n        const i: number = this.selectedTags[this.LC].indexOf(metaTag)\r\n        i !== -1\r\n            ? this.selectedTags[this.LC].splice(i, 1)\r\n            : this.selectedTags[this.LC].push(metaTag)\r\n        this.props.handleSubmit(this.selectedTags[this.LC], this.localOrCentral);\r\n        this.forceUpdate() //CheckBox update\r\n    }\r\n\r\n\r\n    //local/central\r\n    onChange() {\r\n        this.localOrCentral = !this.localOrCentral\r\n        this.setState({ localOrCentral: this.localOrCentral });\r\n        this.LC = this.localOrCentral ? 0 : 1\r\n        this.setState({ loading: true })\r\n        this.refreshView()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    Local\r\n                    <Switch\r\n                        checked={!this.localOrCentral}\r\n                        onChange={() => { this.onChange() }}\r\n                        color=\"default\"\r\n                    />\r\n                    Central\r\n                </div>\r\n                {this.state.loading ? \"Loading ...\" : this.PrintList()}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    PrintList = () => {\r\n        if (!this.state.loading) {\r\n            return (\r\n                < List style={{ minWidth: 'max-content' }} className='leftPane' >\r\n                    {this.usedTags[this.LC].map(tag => {\r\n                        const itemColor = {\r\n                            color: tag.published ? onServerColor : 'black'\r\n                        };\r\n                        return (\r\n                            <ListItem style={{ padding: '0 0 0 10px' }}\r\n                                key={tag.value}\r\n                                role={undefined}\r\n                                dense button\r\n                            >\r\n                                <Checkbox style={{ padding: '0 0 0 0' }}\r\n                                    color=\"primary\"\r\n                                    onChange={e => this.handleClick(tag)}\r\n                                    checked={this.selectedTags[this.LC].find(elt => tag === elt) !== undefined}\r\n                                />\r\n                                <ListItemText style={{ padding: '0 0 0 0' }}\r\n                                    id={tag.value}\r\n                                    onClick={e => this.handleClick(tag)}>\r\n                                    <span style={itemColor}>{`${tag.tagType}: ${tag.value}`}</span>\r\n                                </ListItemText>\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                    }\r\n                </List >\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface TagListOwnProps {\r\n}\r\n\r\ninterface StateProps {\r\n    //loading: boolean\r\n}\r\n\r\ninterface DispatchProps {\r\n    handleSubmit(selectedTags: MetaTag[], localOrCentral: boolean): void;\r\n}\r\n\r\ninterface TagListProps extends TagListOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: TagListOwnProps): DispatchProps => {\r\n    return {\r\n        handleSubmit: (selectedTags: MetaTag[], localOrCentral: boolean) => {\r\n            dispatch(getMetaList(selectedTags, localOrCentral));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TagList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './File.css';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\n//import { styled } from '@material-ui/styles';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { FileItem, Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\n/*\r\nconst MyListItem = styled(ListItem)({\r\n    padding: '0 16px 0px 16px',\r\n});\r\n*/\r\n\r\nclass File extends Component<FileProps> {\r\n\r\n    render() {\r\n        //const classes = useStyles();\r\n        const { isSelected, item, handleClickOnName, handleClickOnFolder, handleDoubleClick, handleContextMenu } = this.props;\r\n        const iconStyle = {\r\n            backgroundColor: isSelected ? blue['A200'] : undefined\r\n        };\r\n        const realSize = (item instanceof FileItem) ? item.getDisplaySize() : null;\r\n        return (\r\n            <div className=\"File\" data-selected={isSelected}>\r\n                <ListItem style={{ padding: '0 16px 0px 16px'}}>\r\n                    <ListItemIcon>\r\n                        <div style={iconStyle} onClick={handleClickOnFolder} >\r\n                            {(item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </div>\r\n                    </ListItemIcon>\r\n                    <ListItemText className=\"filename\" primary={item.getDisplayName()} secondary={realSize}\r\n                        onClick={handleClickOnName} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu} />\r\n                    <Divider absolute />\r\n                </ListItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface FileOwnProps {\r\n    item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClickOnName(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleClickOnFolder(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface FileProps extends FileOwnProps, StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: FileOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.items.selected.includes(ownProps.item)\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: FileOwnProps): DispatchProps => {\r\n    return {\r\n\r\n        handleDoubleClick: () => {\r\n            const item = ownProps.item;\r\n\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(ownProps.item));\r\n            }\r\n\r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClickOnName: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([ownProps.item]));\r\n            }\r\n        },\r\n        handleClickOnFolder: () => {\r\n            const item = ownProps.item;\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(File);\r\n","import React from 'react';\r\nimport './FileListEmptyMessage.css';\r\n\r\nexport default function FileListEmptyMessage() {\r\n    return (\r\n        <div className=\"FileListEmptyMessage\">\r\n            No files in this folder\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport File from '../File/File'; \r\nimport FileListEmptyMessage from './FileListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\nimport './FileList.css';\r\nimport { Item } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass FileList extends Component<FileListProps> {\r\n    render() {\r\n        const { items, isLoading } = this.props;\r\n        const itemComponents = items.map((item, key) => {\r\n            return <File item={item} key={key} />;\r\n        });\r\n\r\n        return <div className=\"FileList\">\r\n            { isLoading ? \r\n                <Loader /> : \r\n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\ninterface FileListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const items = state.items.inCurFolder\r\n        .filter(item => filterMatch(item.getDisplayName(), state.items.filter));\r\n\r\n    return {\r\n        items,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileList);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setSelectedItemsFromLastTo, loadAndEditFileFromTag, loadAndDisplayFileFromTag, displaySelectedMediaFileFromTag,\r\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\r\n} from '../../Actions/Actions';\r\nimport './Meta.css';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport { FileItem, FolderItem, Item } from '../../Api/Item';\r\nimport { Meta, onServerColor } from '../../Api/MetaUtils';\r\nimport FileUtils from '../../Api/FileUtils';\r\n\r\nclass MetaRow extends Component<MetaProps> {\r\n\r\n    userId = FileUtils.userIdAndHost.userId\r\n\r\n    render() {\r\n        const { isSelected, meta, handleClickOnName, handleDoubleClick, handleContextMenu } = this.props;\r\n        let prevChars = ''\r\n        return (\r\n            meta.hostName === this.userId ? (\r\n                < div className=\"File\" data-selected={isSelected} >\r\n                    <ListItem style={{ padding: '0 16px 0px 16px' }}>\r\n                        <ListItemText\r\n                            onClick={handleClickOnName} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu}>\r\n                            <span>\r\n                                {meta.hostName} - {meta.pathName}\r\n                            </span>\r\n                            {meta.tags.map(tag => {\r\n                                const itemColor = tag.published ? { color: onServerColor } : { color: 'black' }\r\n                                prevChars = prevChars === '' ? ' (' : ' - '\r\n                                return (\r\n                                    <span style={itemColor}>\r\n                                        {prevChars}{tag.tagType}: {tag.value}\r\n                                    </span>\r\n                                )\r\n                            })}\r\n                            )\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                </div >\r\n            ) : (\r\n                    <div className=\"File\" data-selected={isSelected}>\r\n                        <ListItem style={{ padding: '0 16px 0px 16px' }}>\r\n                            <ListItemText\r\n                                onClick={handleClickOnName} onDoubleClick={handleDoubleClick} >\r\n                                {meta.hostName} - {meta.pathName}\r\n                                {meta.tags.map(tag => {\r\n                                    const itemColor = tag.published ? { color: onServerColor } : { color: 'black' }\r\n                                    prevChars = prevChars === '' ? ' (' : ' - '\r\n                                    return (\r\n                                        <span style={itemColor}>\r\n                                            {prevChars}{tag.tagType}: {tag.value}\r\n                                        </span>\r\n                                    )\r\n                                })}\r\n                                )\r\n                        </ListItemText>\r\n                        </ListItem>\r\n                    </div>\r\n\r\n                )\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface MetaOwnProps {\r\n    meta: Meta;\r\n    //item: Item;\r\n}\r\ninterface StateProps {\r\n    isSelected: boolean;\r\n}\r\ninterface DispatchProps {\r\n    handleClickOnName(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n    handleDoubleClick(): void;\r\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\ninterface MetaProps extends MetaOwnProps, StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: MetaOwnProps): StateProps => {\r\n    return {\r\n        isSelected: state.metas.selected.includes(ownProps.meta)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: MetaOwnProps): DispatchProps => {\r\n    const meta = ownProps.meta;\r\n    let path = meta.pathName.split('/') as string[]\r\n    path.shift()\r\n    path.pop()\r\n\r\n    let item = {} as Item\r\n    if (meta.mimeType === 'FOLDER') item = new FolderItem('https://' + meta.hostName + meta.pathName)\r\n    else item = new FileItem('https://' + meta.hostName + meta.pathName)\r\n\r\n    return {\r\n        handleDoubleClick: () => {\r\n            if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFileFromTag(item.name, path));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFileFromTag(item.name, path));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFileFromTag(path));\r\n            }\r\n            else\r\n                dispatch(enterFolderByItem(item));\r\n        },\r\n\r\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let x = 0;\r\n            let y = 0;\r\n\r\n            if (event.nativeEvent instanceof MouseEvent) {\r\n                x = event.nativeEvent.clientX;\r\n                y = event.nativeEvent.clientY;\r\n            }\r\n            else if (event.nativeEvent instanceof TouchEvent) {\r\n                x = event.nativeEvent.touches[0].pageX;\r\n                y = event.nativeEvent.touches[0].pageY;\r\n            }\r\n            else {\r\n                console.warn(\"Unknown click event\", event);\r\n            }\r\n\r\n            if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(item))//ownProps.item));\r\n            } else {\r\n                dispatch(rightClickOnFile(item))//ownProps.item));\r\n            }\r\n\r\n            dispatch(openContextMenu({ x, y }));\r\n        },\r\n\r\n        handleClickOnName: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) {\r\n                dispatch(toggleSelectedItem(item))//ownProps.item));\r\n            } else if (event.shiftKey) {\r\n                dispatch(setSelectedItemsFromLastTo(item))//ownProps.item));\r\n            } else {\r\n                dispatch(selectItems([item]))//ownProps.item]));\r\n            }\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetaRow);\r\n","import React from 'react';\r\nimport './MetaListEmptyMessage.css';\r\n\r\nexport default function MetaListEmptyMessage() {\r\n    return (\r\n        <div className=\"MetaListEmptyMessage\">\r\n            <div>No files or folders for the selected tags.</div>\r\n            <div><b>Tags: </b></div>\r\n            <div>- Switch set to Local: Black tags are only saved on Local, purple are on Local and Central.</div>\r\n            <div>- Switch set to Central: All tags found on Central, black one are from other users, purple one are created or used by you.</div>\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MetaRow from './MetaRow'; \r\nimport FileListEmptyMessage from './MetaListEmptyMessage';\r\nimport Loader from '../Loader/Loader'; \r\n//import { getMetaList} from '../../Actions/Actions';\r\nimport './Meta.css';\r\nimport { Meta } from '../../Api/MetaUtils';\r\nimport { AppState } from '../../Reducers/reducer';\r\nimport './Meta.css';\r\n\r\nclass MetaList extends Component<MetaListProps> {\r\n    render() {\r\n        const { metas, isLoading } = this.props;\r\n        const itemComponents = metas.map((meta, key) => {\r\n            return <MetaRow \r\n                key ={meta.hostName + meta.pathName}\r\n                meta={meta}  />;\r\n        });\r\n\r\n        return <div className=\"MetaList\">\r\n            { isLoading \r\n                ? <Loader /> \r\n                : itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    metas: Meta[];\r\n    isLoading: boolean;\r\n}\r\ninterface MetaListProps extends StateProps {};\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const metas = state.metas.inCurFolder\r\n        .filter(meta => filterMatch(meta.hostName + meta.pathName, state.metas.filter));\r\n\r\n    return {\r\n        metas,\r\n        isLoading: state.loading,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst filterMatch = (first: string, second: string) => {\r\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetaList);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TreeView from './Components/TreeView/TreeView';\r\nimport TagList from './Components/TagList/TagList';\r\nimport FileList from './Components/FileList/FileList';\r\nimport MetaList from './Components/Meta/MetaList';\r\n\r\nimport './TreeAndTagList.css'\r\n\r\n\r\nexport default class TreeAndTagList extends Component<{}> {\r\n\r\n    state = {\r\n        showTreeOrTag: true\r\n    }\r\n\r\n    onChange() {\r\n        this.setState({\r\n            showTreeOrTag: !this.state.showTreeOrTag\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='treeAndTagHeader'>\r\n                    Tags\r\n                    <Switch\r\n                        checked={this.state.showTreeOrTag}\r\n                        onChange={() => { this.onChange() }}\r\n                        color=\"default\"\r\n                    />\r\n                    Tree\r\n                </div>\r\n                <div>\r\n                    {this.state.showTreeOrTag ?\r\n                        <div className='bodyPlace'>\r\n                            <div className='leftView'><TreeView /></div>\r\n                            <FileList />\r\n                        </div>\r\n                        :\r\n                        <div className='bodyPlace'>\r\n                            <div className='leftView'><TagList /></div>\r\n                            <MetaList />\r\n                        </div>\r\n                    }\r\n                </div >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFolderAction(props: CreateFolderActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CreateNewFolderIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create folder\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFolderActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FOLDER));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFolderAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction CreateFileAction(props: CreateFileActionProps) {\r\n    const {handleClick, handleClose} = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <InsertDriveFileIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Create file\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CreateFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CREATE_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction UploadFileAction(props: UploadFileActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <CloudUploadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Upload files\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface UploadFileActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.UPLOAD_FILE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadFileAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FolderSharedIcon from '@material-ui/icons/FolderSharedOutlined';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction ChooseLocationAction(props: ChooseLocationActionProps) {\r\n    const { handleClick, handleClose } = props;\r\n\r\n    const handleCloseAfter = (callback: () => void) => () => {\r\n        callback();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\r\n            <ListItemIcon>\r\n                <FolderSharedIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Choose root location\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ChooseLocationActionProps {\r\n    handleClick(): void;\r\n    handleClose(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChooseLocationAction);\r\n","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { connect } from 'react-redux';\r\nimport CreateFolderAction from '../ContextMenu/ContextMenuActions/CreateFolderAction';\r\nimport CreateFileAction from '../ContextMenu/ContextMenuActions/CreateFileAction';\r\nimport UploadFileAction from '../ContextMenu/ContextMenuActions/UploadFileAction';\r\nimport ChooseLocationAction from '../ContextMenu/ContextMenuActions/ChooseLocationAction';\r\n\r\nclass ThreeDotsMenu extends React.Component {\r\n  state = {\r\n    anchorEl: null as HTMLElement|null,\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n\r\n    return (\r\n      <div style={{marginLeft:'1em'}}>\r\n        <IconButton color=\"inherit\" \r\n          aria-label=\"More\"\r\n          aria-owns={Boolean(anchorEl) ? 'long-menu' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={this.handleClick}>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n\r\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose}>\r\n          <CreateFolderAction handleClose={this.handleClose} />\r\n          <CreateFileAction handleClose={this.handleClose} />\r\n          <UploadFileAction handleClose={this.handleClose} />\r\n          <ChooseLocationAction handleClose={this.handleClose} />\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreeDotsMenu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport './BreadcrumbText.css';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  lastPath: {\r\n    display: 'block',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  paths: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }\r\n  }\r\n});\r\n\r\nclass BreadcrumbText extends Component<BreadcrumbTextProps> {\r\n\r\n    render() {\r\n        const { classes, handleClickPath, path, rootTitle, handleGoBack, canGoBack } = this.props;\r\n\r\n        const separator = <span>&gt;</span>;\r\n        const rootPath = <span onClick={() => handleClickPath(-1)} data-index={0}>\r\n            { rootTitle } { path.length ? separator : '' }\r\n        </span>;\r\n        const lastPath = [...path].pop() || rootTitle;\r\n\r\n        const directories = path.map((dir, index) => {\r\n            return <span key={index} data-index={index} onClick={(e) => handleClickPath(index)}>\r\n                <span>{dir}</span> { path.length -1 !== index ? separator : '' }&nbsp;\r\n            </span>\r\n        });\r\n\r\n        return (\r\n            <div className=\"BreadcrumbText\">\r\n                <div className={classes.lastPath}>\r\n                    <Button onClick={handleGoBack} color=\"inherit\" type=\"button\" style={{display: canGoBack ? 'inline-flex' : 'none'}}>\r\n                        <KeyboardArrowLeftIcon />\r\n                    </Button>\r\n                    {lastPath}\r\n                </div>\r\n                <div className={classes.paths}>{rootPath} {directories}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BreadcrumbTextProps extends WithStyles<typeof styles> {\r\n    handleClickPath(index: number): void;\r\n    handleGoBack(): void;\r\n    canGoBack: boolean;\r\n    path: string[];\r\n    rootTitle: string;\r\n\r\n}\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(BreadcrumbText));\r\n","import React, { ChangeEvent } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { connect } from 'react-redux';\r\nimport { refreshItemList, moveFolderUpwardsAndRefresh, filterItems, MyDispatch } from '../../Actions/Actions';\r\nimport ThreeDotsMenu from './ThreeDotsMenu';\r\nimport BreadcrumbText from '../Breadcrumb/BreadcrumbText';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: '4.3em'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'block', // was none\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n      display: 'block'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 100,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props: SearchAppBarProps) {\r\n  const { classes, path, filter, moveUpwards, canGoBack, handleChange, handleRefresh } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            <BreadcrumbText \r\n                path={path} \r\n                handleClickPath={index => moveUpwards(path.length - index - 1)} \r\n                handleGoBack={() => moveUpwards(1)}\r\n                canGoBack={canGoBack}\r\n                rootTitle=\"Root\"\r\n            />\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              value={filter}\r\n              onChange={handleChange}\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n            />\r\n          </div>\r\n          <IconButton color=\"inherit\" aria-label=\"Refresh\" onClick={handleRefresh}>\r\n            <RefreshIcon/>\r\n          </IconButton>\r\n          <ThreeDotsMenu />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface StateProps {\r\n  filter: string;\r\n  path: string[];\r\n  canGoBack: boolean; \r\n}\r\ninterface DispatchProps {\r\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\r\n  moveUpwards(n: number): void;\r\n  handleRefresh(): void;\r\n}\r\ninterface SearchAppBarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        filter: state.items.filter,\r\n        path: state.path,\r\n        canGoBack: state.path.length > 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleChange: (event) => {\r\n            dispatch(filterItems(event.currentTarget.value));\r\n        },\r\n        moveUpwards: (n) => {\r\n          dispatch(moveFolderUpwardsAndRefresh(n));\r\n        },\r\n        handleRefresh: () => dispatch(refreshItemList())\r\n    };\r\n};\r\n\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(SearchAppBar));\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndDisplayFile, displaySelectedMediaFile, loadAndEditFile, enterFolderByItem, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { FileItem, FolderItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            const item = selectedItems[0];\r\n\r\n            if (item instanceof FolderItem)\r\n                dispatch(enterFolderByItem(item));\r\n            else if (item instanceof FileItem) {\r\n                if (item.isEditable())\r\n                    dispatch(loadAndEditFile(item.name));\r\n                else if (item.isImage())\r\n                    dispatch(loadAndDisplayFile(item.name));\r\n                else if (item.isMedia())\r\n                    dispatch(displaySelectedMediaFile());\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { removeItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction RemoveAction(props: RemoveActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <DeleteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Remove\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface RemoveActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(removeItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick()}>\r\n            <ListItemIcon>\r\n                <HowToVoteIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Move\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.MOVE));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n//import { DIALOGS, Action } from '../../../Actions/actionTypes';\r\nimport { DIALOGS} from '../../../Actions/actionTypes';\r\n\r\nfunction CopyAction(props: CopyActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <FileCopyIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Copy\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface CopyActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.COPY));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditFile, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenAction(props: OpenActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { loadAndEditTags, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction EditTagsAction(props: EditTagsActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <OpenInBrowserIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Edit tags\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface EditTagsActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(loadAndEditTags(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTagsAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WrapTextIcon from '@material-ui/icons/WrapText';\r\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nfunction MoveAction(props: MoveActionProps) {\r\n    const { handleClick } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <WrapTextIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Rename\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface MoveActionProps {\r\n    handleClick(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch(openDialog(DIALOGS.RENAME));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport { zipAndUpload, MyDispatch } from '../../../Actions/Actions';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction ZipAction(props: ZipActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <ArchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Zip here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ZipActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(zipAndUpload(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\r\nimport { extractZipFile, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nfunction ExtractAction(props: ExtractActionProps) {\r\n    const {handleClick, selectedItems} = props;\r\n\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <UnarchiveIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Extract here\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface ExtractActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(extractZipFile(selectedItems[0].name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { downloadItems, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction DownloadAction(props: DownloadActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <CloudDownloadIcon />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                {(selectedItems.length === 1 && selectedItems[0] instanceof FileItem) ? \r\n                    'Download'\r\n                    : 'Download Zip'\r\n                }\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface DownloadActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(downloadItems(selectedItems));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadAction);\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from 'react-redux';\r\nimport { openInNewTab, MyDispatch } from '../../../Actions/Actions';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nfunction OpenInNewTabAction(props: OpenInNewTabActionProps) {\r\n    const { handleClick, selectedItems } = props;\r\n    return (\r\n        <MenuItem onClick={() => handleClick(selectedItems)}>\r\n            <ListItemIcon>\r\n                <LinkIcon   />\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\">\r\n                Open in new Tab\r\n            </Typography>\r\n        </MenuItem>        \r\n    );\r\n}\r\n\r\ninterface OpenInNewTabActionProps {\r\n    handleClick(selectedItems: Item[]): void;\r\n    selectedItems: Item[];\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        selectedItems: state.items.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\r\n    return {\r\n        handleClick: (selectedItems: Item[]) => {\r\n            dispatch(openInNewTab(selectedItems[0]));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenInNewTabAction);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ContextMenu.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport OpenAction from './ContextMenuActions/OpenAction';\r\nimport RemoveAction from './ContextMenuActions/RemoveAction';\r\nimport MoveAction from './ContextMenuActions/MoveAction';\r\nimport CopyAction from './ContextMenuActions/CopyAction';\r\nimport EditAction from './ContextMenuActions/EditAction';\r\nimport EditTagsAction from './ContextMenuActions/EditTagsAction';\r\nimport RenameAction from './ContextMenuActions/RenameAction';\r\nimport ZipAction from './ContextMenuActions/ZipAction';\r\nimport ExtractAction from './ContextMenuActions/ExtractAction';\r\nimport DownloadAction from './ContextMenuActions/DownloadAction';\r\nimport OpenInNewTabAction from './ContextMenuActions/OpenInNewTabAction';\r\nimport UploadFileAction from './ContextMenuActions/UploadFileAction';\r\nimport { Item, FileItem, FolderItem } from '../../Api/Item';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nclass ContextMenu extends Component<ContextMenuProps> {\r\n\r\n    render() {\r\n        const { acts, open, x, y } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={{ top: y, left: x }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    onClose={() => { }}\r\n                    PaperProps={{ style: { width: 190 } }}>\r\n                    {acts.includes('open') && <OpenAction />}\r\n                    {acts.includes('openInNewTab') && <OpenInNewTabAction />}\r\n                    {acts.includes('download') && <DownloadAction />}\r\n                    {acts.includes('upload') && <UploadFileAction />}\r\n                    {acts.includes('compress') && <ZipAction />}\r\n                    {acts.includes('extract') && <ExtractAction />}\r\n                    {acts.includes('edit') && <EditAction />}\r\n                    {acts.includes('editTags') && <EditTagsAction />}\r\n                    {acts.includes('copy') && <CopyAction />}\r\n                    {acts.includes('move') && <MoveAction />}\r\n                    {acts.includes('rename') && <RenameAction />}\r\n                    {acts.includes('remove') && <RemoveAction />}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps {\r\n    acts: string[];\r\n    open: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\ninterface ContextMenuProps extends StateProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        x: state.contextMenu.x,\r\n        y: state.contextMenu.y,\r\n        open: state.contextMenu.open,\r\n        acts: getActionsForMultipleItems(state.items.selected),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\n\r\n/**\r\n * Get available actions for multiple items\r\n */\r\nconst getActionsForMultipleItems = (items: Item[]): string[] => {\r\n    return items.length === 1 ?\r\n        getActionsForItem(items[0])\r\n        : [\r\n            'copy',\r\n            'move',\r\n            'remove',\r\n            'download',\r\n            'compress',\r\n        ];\r\n};\r\n\r\n/**\r\n * Get available actions for an item\r\n */\r\nconst getActionsForItem = (item: Item) => {\r\n    const commonActions = [\r\n        'openInNewTab',\r\n        'copy',\r\n        'move',\r\n        'rename',\r\n        'remove',\r\n        'download',\r\n        'editTags'\r\n    ];\r\n    return [\r\n        ...commonActions,\r\n        ...((item instanceof FileItem) ?\r\n            getActionsForFile(item)\r\n            : getActionsForFolder(item))\r\n    ];\r\n};\r\n\r\n/**\r\n * Get available file specific actions\r\n */\r\nconst getActionsForFile = (file: FileItem) => {\r\n    const actions = [];\r\n    file.isEditable() && actions.push('edit');\r\n    //actions.push('editTags');\r\n    file.isExtractable() && actions.push('extract');\r\n    (file.isImage() || file.isMedia()) && actions.push('open');\r\n\r\n    return actions;\r\n};\r\n\r\n/**\r\n * Get available folder specific actions\r\n */\r\nconst getActionsForFolder = (folder: FolderItem) => {\r\n    return [\r\n        'open',\r\n        'compress',\r\n        'upload'\r\n    ];\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContextMenu);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createBrowserHistory, History, Location } from \"history\";\r\nimport { MyDispatch, setHost, enterFolder } from \"../../Actions/Actions\";\r\nimport { AppState } from \"../../Reducers/reducer\";\r\n\r\nclass HistoryHandler extends Component<HistoryHandlerProps> {\r\n    private history: History<LocationState>;\r\n    private states: LocationState[];\r\n    private stateIndex: number;\r\n\r\n    constructor(props: HistoryHandlerProps) {\r\n        super(props);\r\n\r\n        this.states = [];\r\n        this.stateIndex = -1;\r\n        this.history = createBrowserHistory();\r\n        this.history.listen((location, action) => {\r\n            switch(action) {\r\n                case 'POP':\r\n                    this.handlePop(location);\r\n                    break;\r\n                case 'REPLACE':\r\n                    this.handleReplace(location);\r\n                    break;\r\n                case 'PUSH':\r\n                    this.handlePush(location);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { host, path } = this.props;\r\n\r\n        // Don't update history when the host is invalid\r\n        if (host === null)\r\n            return;\r\n        if (this.states.length === 0 || this.stateIndex < 0)\r\n            return this.updateBrowserHistory();\r\n        \r\n        const prevState = this.states[this.stateIndex];\r\n\r\n        if (!locationsEqual({ host, path }, prevState))\r\n            this.updateBrowserHistory();\r\n    }\r\n\r\n    updateBrowserHistory() {\r\n        const { host, path } = this.props;\r\n        const url = encodeURI(`${host}/${path.join('/')}`);\r\n        const newState = {\r\n            host: host || '',\r\n            path,\r\n            index: this.stateIndex + 1,\r\n        };\r\n\r\n        this.history.push(`?url=${url}`, newState);\r\n    }\r\n\r\n    handlePop(location: Location<LocationState>) {\r\n        this.stateIndex = location.state.index;\r\n        this.props.handlePop(location);\r\n    }\r\n\r\n    handleReplace(location: Location<LocationState>) {\r\n        this.states[this.stateIndex] = location.state;\r\n    }\r\n\r\n    handlePush(location: Location<LocationState>) {\r\n        this.states = [...this.states.slice(0, ++this.stateIndex), location.state];\r\n    }\r\n\r\n    render() {\r\n        // This Component doesn't provide anything to the DOM\r\n        // The only reason it is a component is to get access to the state and dispatch\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface LocationState extends MyLocation {\r\n    index: number;\r\n}\r\ninterface MyLocation {\r\n    host: string;\r\n    path: string[];\r\n}\r\n\r\n\r\ninterface StateProps {\r\n    host: string | null;\r\n    path: string[];\r\n}\r\ninterface DispatchProps {\r\n    handlePop(location: Location<LocationState>): void;\r\n}\r\ninterface HistoryHandlerProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => ({\r\n    host: state.account.host,\r\n    path: state.path\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handlePop: (location: Location<LocationState>) => {\r\n            let host = '';\r\n            let path: string[] = [];\r\n\r\n            if (location && typeof location.state !== typeof undefined) {\r\n                ({ host, path } = location.state);\r\n            }\r\n            else {\r\n                const params = new URLSearchParams(location.search.substr(1));\r\n                const url = params.get('url');\r\n                if (url !== null) {\r\n                    ({ host, path } = getLocationObjectFromUrl(url));\r\n                }\r\n            }\r\n            dispatch(setHost(host));\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport const getLocationObjectFromUrl = (urlString: string) => {\r\n    const url = new URL(urlString);\r\n    const host = url.origin;\r\n    const path = url.pathname.split('/').filter(val => val !== '');\r\n\r\n    return {\r\n        host,\r\n        path\r\n    };\r\n}\r\n\r\nconst locationsEqual = (first: MyLocation, second: MyLocation) => {\r\n    return first.host === second.host\r\n           && first.path.length === second.path.length\r\n           && first.path.every((val, index) => val === second.path[index]);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryHandler);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport { solidLogin, setHost, enterFolder, solidLogout, clearCache, MyDispatch, setErrorMessage, closeDialog } from '../../../Actions/Actions';\r\nimport { getLocationObjectFromUrl } from '../../HistoryHandler/HistoryHandler';\r\nimport { DialogButtonClickEvent, DialogDispatchProps, DialogStateProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ChooseLocationProps> {\r\n    state = {\r\n        location: '',\r\n    };\r\n\r\n    componentWillReceiveProps(props: ChooseLocationProps) {\r\n        const { isLoggedIn, webId } = props;\r\n        const params = new URLSearchParams(document.location.search.substr(1));\r\n        const encodedUrl = params.get('url');\r\n\r\n        if (encodedUrl !== null) {\r\n            const location = decodeURI(encodedUrl);\r\n            this.setState({ location });\r\n        }\r\n        else if (isLoggedIn && webId) {\r\n            const location = (new URL(webId)).origin;\r\n            this.setState({ location });\r\n        }\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\r\n        const targetForm = event.currentTarget.form;\r\n        if (targetForm) {\r\n            const input = targetForm.querySelector('input');\r\n            if (input) {\r\n                const location = input.value;\r\n                this.setState({ location });\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Couldn't find location input\");\r\n    }\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        this.props.handleSubmit(event, { location: this.state.location });\r\n    }\r\n\r\n    render() {\r\n        let { location } = this.state;\r\n        location = location ? location : '';\r\n        const { handleClose, handleLogin, handleLogout, open, isLoggedIn, webId } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-choose-location\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-choose-location\">Choose the storage location</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            {!isLoggedIn ?\r\n                                \"If you want to access private resources, please login with the button below.\"\r\n                                : \"Logged in as \" + webId + \".\"\r\n                            }\r\n                        </Typography>\r\n                        {!isLoggedIn ?\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLogin}>Login</Button>\r\n                            : <Button variant=\"outlined\" onClick={handleLogout}>Logout</Button>\r\n                        }\r\n\r\n                        <Typography variant=\"body1\">\r\n                            Please enter the directory you want to open below.\r\n                    </Typography>\r\n                        <TextField autoFocus fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Storage Location\"\r\n                            variant=\"outlined\"\r\n                            onChange={this.handleChange.bind(this)}\r\n                            value={location} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Open directory\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    webId: string | null;\r\n    isLoggedIn: boolean;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleLogin(event: DialogButtonClickEvent): void;\r\n    handleLogout(event: DialogButtonClickEvent): void;\r\n    handleSubmit(event: DialogButtonClickEvent, { location }: { location: string }): void;\r\n}\r\ninterface ChooseLocationProps extends StateProps, DispatchProps { }\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CHOOSE_LOCATION,\r\n        webId: state.account.webId,\r\n        isLoggedIn: state.account.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n        },\r\n        handleLogin: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogin());\r\n        },\r\n        handleLogout: event => {\r\n            event.preventDefault();\r\n            dispatch(solidLogout());\r\n        },\r\n        handleSubmit: (event, { location }) => {\r\n            event.preventDefault();\r\n            if (!location)\r\n                return dispatch(setErrorMessage(\"Please enter the folder which should be opened\"));\r\n\r\n            const { host, path } = getLocationObjectFromUrl(location);\r\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\r\n            dispatch(setHost(host));\r\n            dispatch(clearCache());\r\n            dispatch(enterFolder(path));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { closeDialog, MyDispatch, openDialog } from '../../../Actions/Actions';\r\nimport { closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<ContentProps> {\r\n\r\n    state = {\r\n        lastBlobUrl: null,\r\n        content: '...',\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n        return (\r\n          <div style={{marginLeft:'1em'}}>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-content\" fullWidth={true} maxWidth={'sm'}>\r\n              <DialogTitle id=\"form-dialog-content\">Viewing file </DialogTitle>\r\n              <DialogContent>\r\n                <img src={this.props.blobUrl} alt=\"\" style={{maxWidth: '100%'}}/>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    blobUrl: string | undefined;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {}\r\ninterface ContentProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CONTENT,\r\n        blobUrl: state.blob || undefined\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CONTENT));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport Plyr from 'react-plyr';\r\nimport 'plyr/dist/plyr.css';\r\nimport { FileItem } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<MediaProps> {\r\n    render() {\r\n        const { file, handleClose, open } = this.props;\r\n        const url = file ? file.url : undefined;\r\n        const type = file ? (file.isVideo() ? 'video' : 'audio') : undefined;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-display-media\" fullWidth={true} maxWidth={'lg'}>\r\n                <DialogTitle id=\"form-dialog-display-media\">Display Media</DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        file ?\r\n                            (\r\n                                <div>\r\n                                    <p>Playing {file.name}</p>\r\n                                    <Plyr type={type} /*TODO: provider={provider}*/ url={url} iconUrl=\"./vendor/plyr/plyr.svg\" />\r\n                                </div>\r\n                            )\r\n                            : <p>No media file opened</p>\r\n                            \r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    file?: FileItem;\r\n}\r\ninterface MediaProps extends StateProps, DialogDispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    const open = state.visibleDialogs.MEDIA;\r\n\r\n    const file = state.items.selected[0];   \r\n\r\n    if (file instanceof FileItem) {\r\n            return {\r\n                open,\r\n                file,\r\n            };\r\n    }\r\n    return { open };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MEDIA));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateTextFile, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\n\r\nclass FormDialog extends Component<EditProps> {\r\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\r\n    state = {\r\n        lastBlobUrl: null as string|null,\r\n        content: null as string|null,\r\n        loading: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\r\n            this.setState({\r\n                lastBlobUrl: this.props.blobUrl\r\n            });\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            this.props.blobUrl && fetch(this.props.blobUrl).then(r => {\r\n                return r.text();\r\n            }).then(t => {\r\n                this.setState({\r\n                    content: t\r\n                });\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const content = textField.value;\r\n            this.props.handleSubmit(event, {\r\n                itemName: item.name,\r\n                content\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const itemName = item ? item.getDisplayName() : 'No item selected';\r\n        const textAreaStyle = {\r\n            width: '100%',\r\n            minHeight: '300px'\r\n        };\r\n        const textArea = <textarea style={textAreaStyle} defaultValue={this.state.content || ''} ref={this.textField} />;\r\n\r\n        return (\r\n            <div>\r\n              <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-edit\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-edit\">Editing file {itemName} </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>\r\n                      {this.state.loading ? 'Loading...' : textArea}\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Close\r\n                    </Button>\r\n                    <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                      Update\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item: Item;\r\n    blobUrl: string;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { itemName, content }: { itemName: string, content: string }): void;\r\n}\r\ninterface EditProps extends StateProps, DispatchProps {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDIT, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        item: state.items.selected[0],\r\n        blobUrl: state.blob || ''\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDIT));\r\n        },\r\n        handleSubmit: (event, { itemName, content }) => {\r\n            dispatch(updateTextFile(itemName, content));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","export default function CallJsonP(callback1, searchedString) {\r\n    const autoComplete = `https://suggestqueries.google.com/complete/search?client=firefox&q=${searchedString}`\r\n    jsonp(\r\n        autoComplete,\r\n        (response) => callback1(response)\r\n    );\r\n}\r\n\r\nconst jsonp = (url, callback2) => {\r\n    const callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\r\n    window[callbackName] = function (data) {\r\n        delete window[callbackName];\r\n        document.body.removeChild(script);\r\n        callback2(data);\r\n    };\r\n\r\n    var script = document.createElement('script');\r\n    script.src =\r\n        url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\r\n    document.body.appendChild(script);\r\n};\r\n","import React from 'react';\r\nimport MetaUtils, { Meta, MetaTag, onServerColor } from '../../../Api/MetaUtils';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport CallJsonP from '../../../Api/jsonp';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n//import { styled } from '@material-ui/styles';\r\nimport './Autocomplete.css'\r\n\r\ninterface MultiValueLabelProps {\r\n    children: {},\r\n    data: MetaTag\r\n}\r\n\r\n//Each tag is a MultiValueLabel in Autocomplete componennt\r\nclass MultiValueLabel extends React.Component<MultiValueLabelProps> {\r\n    //Click a tag to publish it\r\n    tagHandleClick() {\r\n        this.props.data.published = !this.props.data.published\r\n        this.forceUpdate()\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        const styles = {\r\n            color: data.published ? onServerColor : 'black'\r\n        };\r\n\r\n        return (\r\n            <div id={data.value}\r\n                style={styles}\r\n                onClick={this.tagHandleClick.bind(this)}>\r\n                {data.tagType}: {data.value}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface PopupProps {\r\n    [x: string]: any,\r\n    meta: Meta\r\n}\r\n\r\ninterface PopupState {\r\n    suggests: Suggestion[]\r\n}\r\n//Suggestions (options in component) need label additional property\r\ninterface ISuggestion extends MetaTag {\r\n    label: string\r\n}\r\n\r\nclass Suggestion {\r\n    tagType: string\r\n    value: string\r\n    published: boolean\r\n    label: string\r\n\r\n    constructor(text: string) {\r\n        this.tagType = 'FreeTag'\r\n        this.value = text;\r\n        this.published = false;\r\n        this.label = text;\r\n    }\r\n}\r\n\r\nexport default class AutocompleteTag extends React.Component<PopupProps, PopupState> {\r\n\r\n    constructor(props: PopupProps) {\r\n        super(props);\r\n        this.state = { suggests: [] };\r\n        this.creatableSelect = React.createRef();\r\n        this.focusCreatableSelect = this.focusCreatableSelect.bind(this);\r\n    }\r\n\r\n    creatableSelect = {} as React.RefObject<PopupProps>\r\n    source = 'local'\r\n    lastStr = ''\r\n\r\n    focusCreatableSelect() {\r\n        if (this.creatableSelect.current) this.creatableSelect.current.focus();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.focusCreatableSelect()\r\n    }\r\n\r\n    //select a suggestion or delete a tag: items parameter is the list of ALL selected values\r\n    handleChangeTagList(items: Suggestion[]) {\r\n        if (items) {\r\n            for (var i = 0; i < items.length; i++) {\r\n                if (!(items[i] instanceof Suggestion)) {\r\n                    items[i] = new Suggestion(items[i].label)\r\n                }\r\n            }\r\n        }\r\n        this.props.meta.tags = items\r\n        this.forceUpdate()\r\n    }\r\n\r\n    //Change source of suggestions for tags\r\n    handleRadioChange = (event: React.ChangeEvent<{}>, value: string) => {\r\n        this.source = value\r\n        this.handleChange(this.lastStr)\r\n        this.forceUpdate()\r\n    };\r\n\r\n    //type a letter. items in suggestions are Metatag\r\n    handleChange(str: string) {\r\n        if (str !== \"\") {\r\n            this.lastStr = str\r\n            let retVal = [] as Suggestion[]\r\n            if (this.source === 'google') {\r\n                CallJsonP((suggests: any[]) => {\r\n                    //suggests[1] creates a new Io\r\n                    suggests[1].forEach((item: string) => {\r\n                        const suggestion = new Suggestion(item)\r\n                        retVal.push(suggestion)\r\n                    })\r\n                    this.setState({ suggests: retVal })\r\n                }\r\n                    , str);\r\n            }\r\n\r\n            if (this.source === 'local') {\r\n                MetaUtils.getLocalUsedTags()\r\n                    .then((foundTags: MetaTag[]) => {\r\n                        foundTags.forEach(tag => {\r\n                            const suggestion = new Suggestion(tag.value)\r\n                            retVal.push(suggestion);\r\n                        })\r\n                        this.setState({ suggests: retVal })\r\n                    })\r\n            }\r\n\r\n            if (this.source === 'central') {\r\n                MetaUtils.getCentralUsedTags()\r\n                    .then((foundTags: MetaTag[]) => {\r\n                        foundTags.forEach(tag => {\r\n                            const suggestion = new Suggestion(tag.value)\r\n                            retVal.push(suggestion);\r\n                        })\r\n                        this.setState({ suggests: retVal })\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    //set all to published\r\n    selectAllToCentral(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.props.meta.tags.forEach((tag) => {\r\n            tag.published = event.target.checked\r\n        })\r\n        this.forceUpdate()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='bodyPlace'>\r\n                <div className='leftplace'>\r\n                    <FormControl>\r\n                        <RadioGroup aria-label=\"gender\" value={this.source} onChange={this.handleRadioChange}>\r\n                            <FormControlLabel value=\"local\" control={<Radio color=\"primary\" style={{ padding: '0 20px 5px 0px' }} />} label=\"Local\" labelPlacement=\"start\" style={{ padding: '0 15px 5px 0' }} />\r\n                            <FormControlLabel value=\"central\" control={<Radio color=\"primary\" style={{ padding: '0 20px 5px 0px' }} />} label=\"Central\" labelPlacement=\"start\" style={{ padding: '0 15px 5px 0' }} />\r\n                            <FormControlLabel value=\"google\" control={<Radio color=\"primary\" style={{ padding: '0 20px 5px 0px' }} />} label=\"Google\" labelPlacement=\"start\" style={{ padding: '0 15px 5px 0' }} />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </div>\r\n                <div className='rightplace'>\r\n                    <div>\r\n                        <CreatableSelect\r\n                            ref={this.creatableSelect}\r\n                            components={{ MultiValueLabel }}\r\n                            options={this.state.suggests}\r\n                            value={this.props.meta.tags}\r\n                            isMulti\r\n                            className='creatableSelect'\r\n                            onChange={this.handleChangeTagList.bind(this)}\r\n                            onInputChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Checkbox\r\n                            color=\"primary\" style={{ padding: '0 0 0 0' }}\r\n                            onChange={e => this.selectAllToCentral(e)}\r\n                        /> Publish all tags to central\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { updateMeta, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport MetaUtils, { Meta, MetaTag } from '../../../Api/MetaUtils';\r\nimport AutocompleteTag from './AutocompleteTag'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nclass FormDialog extends Component<EditTagsProps> {\r\n    //Init mandatory as render sn invoked on left click on item, even before Edit tag is choosed\r\n    currentMeta = {} as Meta;\r\n    saveButtonText = ''\r\n    \r\n    //target function is MetaUtils.updateMeta\r\n    handleSave(event: DialogButtonClickEvent) {\r\n        event.preventDefault();\r\n        //cleanup new tags created with autocomplete properties (label and source)\r\n        let cleanedTags = [] as MetaTag[]\r\n        if (this.currentMeta.tags) {\r\n            this.currentMeta.tags.forEach(tag => {\r\n                cleanedTags.push({ 'tagType': 'FreeTag', 'value': tag.value, published: tag.published })\r\n            })\r\n        }\r\n        this.currentMeta.tags = cleanedTags\r\n        this.props.handleSubmit(event, this.currentMeta);\r\n        this.setState({ item: null })\r\n        MetaUtils.allLocalMeta = []\r\n    }\r\n\r\n    handleClose = {}\r\n\r\n    //changes on mimeType\r\n    handleChange = (name: string) => (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (name === 'mimeType') this.currentMeta.mimeType = event.target.value\r\n        this.forceUpdate()\r\n    };\r\n\r\n    render() {\r\n        if (this.props.item) {\r\n            MetaUtils.getOrInitMeta(this.props.item)\r\n                .then(response => {\r\n                    this.currentMeta = response;\r\n                })\r\n        }\r\n        //handle close: Rdux, sent by store\r\n        const { handleClose, open, item } = this.props;\r\n\r\n        if (item) {\r\n            //this.currentItem = item\r\n            this.handleClose = handleClose\r\n            let extension = '' as string\r\n            if (this.currentMeta && this.currentMeta.pathName) {\r\n                const spl = this.currentMeta.pathName.split('.') as string[]\r\n                if (spl.length > 1) extension = spl[1]\r\n            }\r\n\r\n            return (\r\n                <div id='1'>\r\n                    <Dialog id='2'\r\n                        fullScreen={false}\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"form-dialog-edit\"\r\n                        fullWidth={true} maxWidth={'sm'}\r\n                        PaperProps={{\r\n                            style: {\r\n                                overflow: 'visible'\r\n                            }\r\n                        }}\r\n                    >\r\n                        <form id='3 '>\r\n                            <DialogTitle\r\n                                id=\"form-dialog-edit\">Editing TAGS : {item.getDisplayName()}\r\n                            </DialogTitle>\r\n                            <DialogContent\r\n                                style={{ overflow: 'visible' }}\r\n                            >\r\n                                <AutocompleteTag\r\n                                    meta={this.currentMeta}\r\n                                />\r\n\r\n                                {extension === ''\r\n                                    ? (\r\n                                        <div><br />\r\n                                            File has no extension, enter file type:&nbsp;\r\n                                            <FormControl>\r\n\r\n                                                <Select\r\n                                                    native\r\n                                                    value={this.currentMeta.mimeType}\r\n                                                    onChange={this.handleChange('mimeType')}\r\n                                                >\r\n                                                    <option value=\"\" />\r\n                                                    <option value={'text-plain'}>text-plain</option>\r\n                                                    <option value={'multipart/mixed'}>mixed</option>\r\n                                                    <option value={'image/jpeg}'}>image</option>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </div>\r\n                                    ) : (<div><br />Extension file : {extension}</div>)}\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                                    Close\r\n                                </Button>\r\n                                <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\r\n                                    Save\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    </Dialog>\r\n                </div >\r\n            );\r\n        } else return (null)\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    meta: Meta\r\n    item: Item\r\n    saveText: string\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, meta: Meta): void;\r\n}\r\n\r\ninterface EditTagsProps extends StateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.EDITTAGS, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\r\n        meta: state.metas.selected[0],\r\n        item: state.items.selected[0],\r\n        saveText: ''\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.EDITTAGS));\r\n        },\r\n        handleSubmit: (event, meta) => {\r\n            dispatch(updateMeta(meta));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { createNewFolder, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { createNewFolder, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFolderProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const folderName = textField.value;\r\n            this.props.handleSubmit(event, { folderName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const { handleClose, handleSubmit, open } = this.props;\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-folder\">Create folder</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"Folder name\" type=\"text\" inputRef={this.textField} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { folderName }: { folderName: string }): void;\r\n}\r\ninterface CreateFolderProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FOLDER\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\r\n        },\r\n        handleSubmit: (event, { folderName }) => {\r\n            event.preventDefault();\r\n            dispatch(createNewFolder(folderName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\n//import { createFile, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\r\nimport { createFile, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nclass FormDialog extends Component<CreateFileProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        if (textField) {\r\n            const fileName = textField.value;\r\n            this.props.handleSubmit(event, { fileName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-file\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-create-file\">Create file</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"File name\" type=\"text\" inputRef={this.textField}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { fileName }: { fileName: string }): void;\r\n}\r\ninterface CreateFileProps extends DialogStateProps, DispatchProps { }\r\n\r\nconst mapStateToProps = (state: AppState): DialogStateProps => {\r\n    return {\r\n        open: state.visibleDialogs.CREATE_FILE\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\r\n        },\r\n        handleSubmit: (event, { fileName }) => {\r\n            event.preventDefault();\r\n            dispatch(createFile(fileName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","//import React, { Component, ChangeEvent, createRef } from 'react';\r\nimport React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { renameFile, renameFolder, MyDispatch, closeDialog } from '../../../Actions/Actions';\r\nimport { FolderItem, Item } from '../../../Api/Item';\r\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\nclass FormDialog extends Component<RenameProps> {\r\n    private textField: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleSubmit(event: DialogButtonClickEvent) {\r\n        const textField = this.textField.current;\r\n        const item = this.props.item;\r\n        if (textField && item) {\r\n            const newName = textField.value;\r\n            this.props.handleSubmit(event, { item, newName });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleClose, open, item } = this.props;\r\n        const previousName = item ? item.name : '';\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                  <DialogTitle id=\"form-dialog-create-folder\">Rename</DialogTitle>\r\n                  <DialogContent>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Item name\" type=\"text\" inputRef={this.textField} defaultValue={previousName} />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\r\n                      Save\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    item?: Item;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSubmit(event: DialogButtonClickEvent, { item, newName }: { item: Item, newName: string }): void;\r\n}\r\ninterface RenameProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.RENAME,\r\n        item: state.items.selected[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.RENAME));\r\n        },\r\n        handleSubmit: (event, { item, newName }) => {\r\n            event.preventDefault();\r\n            if (item instanceof FolderItem) // TODO: Create renameItem\r\n                dispatch(renameFolder(item.name, newName));\r\n            else\r\n                dispatch(renameFile(item.name, newName));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n//import ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport '../File.css';\r\nimport { FileItem, Item } from '../../../Api/Item';\r\n\r\n// TODO: Check main differences between normal File.tsx component\r\nfunction FileSublist(props: OwnProps) {\r\n    const { item, isSelected, handleClick, handleDoubleClick } = props;\r\n    const iconStyle = {\r\n        backgroundColor: isSelected ? blue['A200'] : undefined\r\n    };\r\n    return (\r\n        <div className=\"File\" onClick={handleClick} data-selected={isSelected} onDoubleClick={handleDoubleClick}>\r\n        <h1>fileSublist.tsx</h1>\r\n            <ListItem>\r\n            <ListItemIcon>\r\n                        <div style={iconStyle}>\r\n                            { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\r\n                        </div>\r\n                    </ListItemIcon>\r\n                <ListItemText primary={item.name} secondary=\"\" />\r\n                <Divider absolute />\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface OwnProps {\r\n    item: Item;\r\n    isSelected: boolean;\r\n    handleClick(): void;\r\n    handleDoubleClick(): void;\r\n}\r\n\r\nexport default FileSublist;\r\n\r\n","import React from 'react';\r\nimport FileSublist from '../../File/FileSublist/FileSublist'; \r\nimport Loader from '../../Loader/Loader'; \r\nimport FileListEmptyMessage from '../FileListEmptyMessage';\r\nimport './FileListSublist.css'; \r\nimport { FolderItem } from '../../../Api/Item';\r\n\r\nfunction FileListSublist(props: OwnProps) {\r\n    const { items, isLoading, handleOpenFolder } = props;\r\n    \r\n    const itemComponents = items.map((item, key) => {\r\n        return <FileSublist\r\n            item={item}\r\n            isSelected={false}\r\n            handleClick={() => handleOpenFolder(item)}\r\n            handleDoubleClick={() => handleOpenFolder(item)}\r\n            key={key} />\r\n    });\r\n\r\n    return <div className=\"FileListSublist\">\r\n        { isLoading ? \r\n            <Loader /> : \r\n            itemComponents.length ? itemComponents : <FileListEmptyMessage />\r\n        }\r\n    </div>\r\n}\r\n\r\ninterface OwnProps {\r\n    items: FolderItem[];\r\n    isLoading: boolean;\r\n    handleOpenFolder(folder: FolderItem): void;\r\n}\r\n\r\nexport default FileListSublist;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileListSublist from '../../FileList/FileListSublist/FileListSublist'; \r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport { Item, FolderItem } from '../../../Api/Item';\r\nimport * as ApiHandler from '../../../Api/ApiHandler';\r\n\r\nclass FormDialog extends Component<OwnProps, OwnState> {\r\n    private host: string;\r\n    private path: string[];\r\n\r\n    constructor(props: OwnProps) {\r\n        super(props);\r\n        const { initialPath, initialHost } = props;\r\n        this.host = initialHost;\r\n        this.path = initialPath;\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoading: true,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: OwnProps) {\r\n        if (prevProps.initialHost !== this.props.initialHost\r\n            || prevProps.initialPath.join('') !== this.props.initialPath.join('')) {\r\n            this.host = this.props.initialHost;\r\n            this.path = this.props.initialPath;\r\n            this.updateItems();\r\n        }\r\n    }\r\n\r\n    handleGoBack() {\r\n        this.path = this.path.slice(0, -1);\r\n        this.updateItems();\r\n    }\r\n\r\n    handleOpenFolder(folder: FolderItem) {\r\n        this.path = [...folder.path, folder.name];\r\n        this.updateItems();\r\n    }\r\n\r\n    async updateItems() {\r\n        this.setState({ isLoading: true });\r\n        const items = (await ApiHandler.getItemList(this.path.join('/')))\r\n            .filter(item => item instanceof FolderItem);\r\n\r\n        this.setState({ isLoading: false, items });\r\n    }\r\n\r\n    render() {\r\n        const { open, handleClose, handleSubmit, actionName } = this.props;\r\n        const { items, isLoading } = this.state;\r\n        const host = this.host;\r\n        const path = this.path;\r\n        const url = `${host}/${path.join('/')}`;\r\n        const canGoBack = path.length > 0;\r\n        \r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-move\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-move\">\r\n                        {actionName} items to <small style={{color: 'grey'}}>{ url }</small>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileListSublist items={items} isLoading={isLoading} handleOpenFolder={this.handleOpenFolder.bind(this)}/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleGoBack.bind(this)} color=\"primary\" type=\"button\" disabled={!canGoBack}>\r\n                            <KeyboardArrowLeftIcon /> Go back directory\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={(e) => handleSubmit({ host, path })} type=\"submit\">\r\n                            {actionName}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface OwnProps {\r\n    open: boolean;\r\n    actionName: string;\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    handleSubmit({ host, path }: { host: string, path: string[] }): void;\r\n    handleClose(): void;\r\n}\r\n\r\ninterface OwnState {\r\n    items: Item[];\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default FormDialog;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { moveItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction MoveDialog(props: MoveProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, move } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Move\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => move(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    move(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface MoveProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.MOVE,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.MOVE));\r\n        },\r\n        move: (selectedItems, targetLocation) => {\r\n            dispatch(moveItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { copyItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\r\nimport { DialogStateProps } from '../dialogTypes';\r\nimport { Item } from '../../../Api/Item';\r\nimport { AppState } from '../../../Reducers/reducer';\r\nimport { DIALOGS } from '../../../Actions/actionTypes';\r\n\r\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\r\n\r\nfunction CopyDialog(props: CopyProps) {\r\n    const { initialHost, initialPath, selectedItems, open, handleClose, copy } = props;\r\n\r\n    return <ChooseLocation\r\n        open={open}\r\n        actionName=\"Copy\"\r\n        initialHost={initialHost}\r\n        initialPath={initialPath}\r\n        handleClose={handleClose}\r\n        handleSubmit={(location) => copy(selectedItems, location)}\r\n    />\r\n}\r\n\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    initialHost: string;\r\n    initialPath: string[];\r\n    selectedItems: Item[];\r\n}\r\ninterface DispatchProps {\r\n    handleClose(): void;\r\n    copy(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\r\n}\r\ninterface CopyProps extends StateProps, DispatchProps {}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.COPY,\r\n        initialHost: state.account.host || '',\r\n        initialPath: state.path,\r\n        selectedItems: state.items.selected,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n            dispatch(closeDialog(DIALOGS.COPY));\r\n        },\r\n        copy: (selectedItems, targetLocation) => {\r\n            dispatch(copyItems(selectedItems, targetLocation));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyDialog);\r\n","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport { getHumanFileSize } from '../../Api/Item';\r\n\r\nfunction UploadFileList(props: UploadFileListProps) {\r\n    const { files } = props;\r\n    const list = Array.from(files).map((f, i) =>\r\n        <ListItem dense key={i}>\r\n            <ListItemIcon>\r\n                <FileIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${f.name} (${getHumanFileSize(f.size)})`} />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <List component=\"nav\">\r\n                {list}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface UploadFileListProps {\r\n    files: FileList;\r\n}\r\n\r\nexport default UploadFileList;\r\n","import React, { Component, createRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport UploadFileList from './UploadFileList';\r\n\r\nclass FileUploader extends Component<FileUploadProps> {\r\n    inputRef: React.RefObject<HTMLInputElement> = createRef();\r\n\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void {\r\n        const inputElement = this.inputRef.current;\r\n        if (inputElement) {\r\n            inputElement.value = '';\r\n            this.props.handleReset(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fileList, handleSelectedFiles } = this.props;\r\n        const styles = {\r\n            inputfile: {\r\n                // TODO: Change this to display none as soon, as the label button works\r\n                // display: 'none'\r\n            }, inputreset: {\r\n                display: (fileList && fileList.length) ? 'inline-flex' : 'none'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"button-file\">\r\n                    <input style={styles.inputfile} id=\"button-file\" ref={this.inputRef} multiple type=\"file\" onChange={handleSelectedFiles} />\r\n                    {/*<Button component=\"span\" variant=\"contained\" color=\"primary\">\r\n                        Select Files\r\n                    </Button>*/}\r\n                </label>\r\n\r\n                <Button style={styles.inputreset} component=\"span\" type=\"reset\" onClick={this.handleReset.bind(this)}>\r\n                    Clear\r\n                </Button>\r\n\r\n                { fileList && <UploadFileList files={fileList} /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface FileUploadProps {\r\n    fileList: FileList|null;\r\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void;\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n}\r\n\r\nexport default FileUploader;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { connect } from 'react-redux';\r\n//import { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage } from '../../../Actions/Actions';\r\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList } from '../../../Actions/Actions';\r\nimport FileUploader from '../../FileUploader/FileUploader';\r\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\r\nimport { AppState } from '../../../Reducers/reducer';\r\n\r\nclass FormDialog extends Component<UploadFileProps> {\r\n\r\n    render() {\r\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\r\n\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\r\n                <form>\r\n                    <DialogTitle id=\"form-dialog-upload\">\r\n                        Upload files\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset}/>\r\n                        {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\r\n                            Upload\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StateProps extends DialogStateProps {\r\n    canUpload: boolean;\r\n    fileList: FileList|null;\r\n    progress: number;\r\n}\r\ninterface DispatchProps extends DialogDispatchProps {\r\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    handleReset(): void;\r\n}\r\ninterface UploadFileProps extends StateProps, DispatchProps {}\r\n\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: state.visibleDialogs.UPLOAD_FILE,\r\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\r\n        fileList: state.upload.fileList,\r\n        progress: state.upload.progress,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: (event) => {\r\n            dispatch(resetFileUploader());\r\n        },\r\n        handleSubmit: (event) => {\r\n            event.preventDefault();\r\n            dispatch(uploadFiles());\r\n        },\r\n        handleSelectedFiles: (event) => {\r\n            const files = event.target.files;\r\n            dispatch(setFileUploadList(files));\r\n        },\r\n        handleReset: () => {\r\n            dispatch(resetFileUploadList());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\r\n","import React from 'react';\r\nimport DialogMenu from './Menu/Menu';\r\nimport DialogContent from './Content/Content';\r\nimport DialogMedia from './Media/Media';\r\nimport DialogEdit from './Edit/Edit';\r\nimport DialogEditTags from './EditTags/EditTags';\r\nimport DialogCreateFolder from './CreateFolder/CreateFolder';\r\nimport DialogCreateFile from './CreateFile/CreateFile';\r\nimport DialogRename from './Rename/Rename';\r\nimport DialogMove from './Move/Move';\r\nimport DialogCopy from './Copy/Copy';\r\nimport DialogUploadFile from './UploadFile/UploadFile';\r\n\r\n// TODO: Consider moving the visibility logic here\r\nfunction Dialogs() {\r\n    return (\r\n        <div className=\"Dialogs\">\r\n            <DialogMenu />\r\n            <DialogContent />\r\n            <DialogMedia />\r\n            <DialogEdit />\r\n            <DialogEditTags />\r\n            <DialogCreateFolder />\r\n            <DialogCreateFile />\r\n            <DialogMove />\r\n            <DialogCopy />\r\n            <DialogRename />\r\n            <DialogUploadFile />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect } from 'react-redux';\r\nimport { MyDispatch, resetErrorMessage } from '../../Actions/Actions';\r\nimport { AppState } from '../../Reducers/reducer';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  close: {\r\n    padding: theme.spacing.unit / 2,\r\n  },\r\n});\r\n\r\nclass DynamicSnackbar extends React.Component<DynamicSnackbarProps> {\r\n  render() {\r\n    const { classes, errorMsg, handleClose, open, notificationDuration } = this.props;\r\n    return (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={open}\r\n          autoHideDuration={notificationDuration}\r\n          onClose={handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{errorMsg}</span>}\r\n          action={[\r\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" className={classes.close} onClick={handleClose} >\r\n              <CloseIcon />\r\n            </IconButton>,\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface StateProps {\r\n  open: boolean;\r\n  errorMsg: string;\r\n  notificationDuration: number;\r\n}\r\ninterface DispatchProps {\r\n  handleClose(): void;\r\n}\r\ninterface DynamicSnackbarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {}\r\n\r\nconst mapStateToProps = (state: AppState): StateProps => {\r\n    return {\r\n        open: !!state.errorMessage,\r\n        errorMsg: state.errorMessage,\r\n        notificationDuration: 60000\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        handleClose: () => {\r\n          dispatch(resetErrorMessage());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DynamicSnackbar));\r\n\r\n","import React, { Component } from 'react';\r\nimport TreeAndTagList from './TreeAndTagList';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport ContextMenu from './Components/ContextMenu/ContextMenu';\r\nimport Dialogs from './Components/Dialogs/Dialogs';\r\nimport { MuiThemeProvider as MaterialUI, createMuiTheme } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { initApp, MyDispatch, closeContextMenu } from './Actions/Actions';\r\nimport DynamicSnackbar from './Components/Notification/DynamicSnackbar';\r\nimport HistoryHandler from './Components/HistoryHandler/HistoryHandler';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        //primary: blue,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    }\r\n});\r\n\r\nclass App extends Component<AppProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.init();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <MaterialUI theme={theme}>\r\n                    <div onClick={this.props.handleHideContextMenu} onContextMenu={this.props.handleHideContextMenu}>\r\n                        <Navbar />\r\n                        <TreeAndTagList />\r\n                        <ContextMenu />\r\n                        <DynamicSnackbar />\r\n                        <Dialogs />\r\n                    </div>\r\n                </MaterialUI>\r\n                <HistoryHandler />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    init(): void;\r\n    handleHideContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\r\n}\r\n\r\ninterface AppProps extends DispatchProps { }\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\r\n    return {\r\n        init: () => {\r\n            dispatch(initApp());\r\n        },\r\n\r\n        handleHideContextMenu: (event) => {\r\n            const element = event.target as HTMLElement;\r\n            if (!(element.tagName === 'INPUT' || /label/i.test(element.className))) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(closeContextMenu());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport reducer from './Reducers/reducer'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'typeface-roboto';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n    onUpdate: (config) => {\r\n        console.group('serviceWorker.onUpdate');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    },\r\n    onSuccess: (config) => {\r\n        console.group('serviceWorker.onSuccess');\r\n        console.log(config);\r\n        console.groupEnd();\r\n    }\r\n});"],"sourceRoot":""}